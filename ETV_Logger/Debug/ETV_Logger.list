
ETV_Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000116a8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000504  08011848  08011848  00021848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011d4c  08011d4c  00030094  2**0
                  CONTENTS
  4 .ARM          00000008  08011d4c  08011d4c  00021d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011d54  08011d54  00030094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011d54  08011d54  00021d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011d58  08011d58  00021d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08011d5c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000077d0  20000094  08011df0  00030094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007864  08011df0  00037864  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003c6c6  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007657  00000000  00000000  0006c78a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000025a8  00000000  00000000  00073de8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002260  00000000  00000000  00076390  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002212c  00000000  00000000  000785f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002c426  00000000  00000000  0009a71c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000abfd9  00000000  00000000  000c6b42  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00172b1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009cc8  00000000  00000000  00172b98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000094 	.word	0x20000094
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011830 	.word	0x08011830

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000098 	.word	0x20000098
 80001dc:	08011830 	.word	0x08011830

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800031e:	f1a4 0401 	sub.w	r4, r4, #1
 8000322:	d1e9      	bne.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2f>:
 800097c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000980:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000984:	bf24      	itt	cs
 8000986:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800098a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800098e:	d90d      	bls.n	80009ac <__aeabi_d2f+0x30>
 8000990:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000994:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000998:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800099c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009a4:	bf08      	it	eq
 80009a6:	f020 0001 	biceq.w	r0, r0, #1
 80009aa:	4770      	bx	lr
 80009ac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009b0:	d121      	bne.n	80009f6 <__aeabi_d2f+0x7a>
 80009b2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009b6:	bfbc      	itt	lt
 80009b8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009bc:	4770      	bxlt	lr
 80009be:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009c6:	f1c2 0218 	rsb	r2, r2, #24
 80009ca:	f1c2 0c20 	rsb	ip, r2, #32
 80009ce:	fa10 f30c 	lsls.w	r3, r0, ip
 80009d2:	fa20 f002 	lsr.w	r0, r0, r2
 80009d6:	bf18      	it	ne
 80009d8:	f040 0001 	orrne.w	r0, r0, #1
 80009dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009e4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e8:	ea40 000c 	orr.w	r0, r0, ip
 80009ec:	fa23 f302 	lsr.w	r3, r3, r2
 80009f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009f4:	e7cc      	b.n	8000990 <__aeabi_d2f+0x14>
 80009f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009fa:	d107      	bne.n	8000a0c <__aeabi_d2f+0x90>
 80009fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a00:	bf1e      	ittt	ne
 8000a02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a0a:	4770      	bxne	lr
 8000a0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop

08000a1c <__aeabi_uldivmod>:
 8000a1c:	b953      	cbnz	r3, 8000a34 <__aeabi_uldivmod+0x18>
 8000a1e:	b94a      	cbnz	r2, 8000a34 <__aeabi_uldivmod+0x18>
 8000a20:	2900      	cmp	r1, #0
 8000a22:	bf08      	it	eq
 8000a24:	2800      	cmpeq	r0, #0
 8000a26:	bf1c      	itt	ne
 8000a28:	f04f 31ff 	movne.w	r1, #4294967295
 8000a2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a30:	f000 b972 	b.w	8000d18 <__aeabi_idiv0>
 8000a34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a3c:	f000 f806 	bl	8000a4c <__udivmoddi4>
 8000a40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a48:	b004      	add	sp, #16
 8000a4a:	4770      	bx	lr

08000a4c <__udivmoddi4>:
 8000a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a50:	9e08      	ldr	r6, [sp, #32]
 8000a52:	4604      	mov	r4, r0
 8000a54:	4688      	mov	r8, r1
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d14b      	bne.n	8000af2 <__udivmoddi4+0xa6>
 8000a5a:	428a      	cmp	r2, r1
 8000a5c:	4615      	mov	r5, r2
 8000a5e:	d967      	bls.n	8000b30 <__udivmoddi4+0xe4>
 8000a60:	fab2 f282 	clz	r2, r2
 8000a64:	b14a      	cbz	r2, 8000a7a <__udivmoddi4+0x2e>
 8000a66:	f1c2 0720 	rsb	r7, r2, #32
 8000a6a:	fa01 f302 	lsl.w	r3, r1, r2
 8000a6e:	fa20 f707 	lsr.w	r7, r0, r7
 8000a72:	4095      	lsls	r5, r2
 8000a74:	ea47 0803 	orr.w	r8, r7, r3
 8000a78:	4094      	lsls	r4, r2
 8000a7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a7e:	0c23      	lsrs	r3, r4, #16
 8000a80:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a84:	fa1f fc85 	uxth.w	ip, r5
 8000a88:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a8c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a90:	fb07 f10c 	mul.w	r1, r7, ip
 8000a94:	4299      	cmp	r1, r3
 8000a96:	d909      	bls.n	8000aac <__udivmoddi4+0x60>
 8000a98:	18eb      	adds	r3, r5, r3
 8000a9a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a9e:	f080 811b 	bcs.w	8000cd8 <__udivmoddi4+0x28c>
 8000aa2:	4299      	cmp	r1, r3
 8000aa4:	f240 8118 	bls.w	8000cd8 <__udivmoddi4+0x28c>
 8000aa8:	3f02      	subs	r7, #2
 8000aaa:	442b      	add	r3, r5
 8000aac:	1a5b      	subs	r3, r3, r1
 8000aae:	b2a4      	uxth	r4, r4
 8000ab0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ab4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ab8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000abc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ac0:	45a4      	cmp	ip, r4
 8000ac2:	d909      	bls.n	8000ad8 <__udivmoddi4+0x8c>
 8000ac4:	192c      	adds	r4, r5, r4
 8000ac6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000aca:	f080 8107 	bcs.w	8000cdc <__udivmoddi4+0x290>
 8000ace:	45a4      	cmp	ip, r4
 8000ad0:	f240 8104 	bls.w	8000cdc <__udivmoddi4+0x290>
 8000ad4:	3802      	subs	r0, #2
 8000ad6:	442c      	add	r4, r5
 8000ad8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000adc:	eba4 040c 	sub.w	r4, r4, ip
 8000ae0:	2700      	movs	r7, #0
 8000ae2:	b11e      	cbz	r6, 8000aec <__udivmoddi4+0xa0>
 8000ae4:	40d4      	lsrs	r4, r2
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e9c6 4300 	strd	r4, r3, [r6]
 8000aec:	4639      	mov	r1, r7
 8000aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af2:	428b      	cmp	r3, r1
 8000af4:	d909      	bls.n	8000b0a <__udivmoddi4+0xbe>
 8000af6:	2e00      	cmp	r6, #0
 8000af8:	f000 80eb 	beq.w	8000cd2 <__udivmoddi4+0x286>
 8000afc:	2700      	movs	r7, #0
 8000afe:	e9c6 0100 	strd	r0, r1, [r6]
 8000b02:	4638      	mov	r0, r7
 8000b04:	4639      	mov	r1, r7
 8000b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b0a:	fab3 f783 	clz	r7, r3
 8000b0e:	2f00      	cmp	r7, #0
 8000b10:	d147      	bne.n	8000ba2 <__udivmoddi4+0x156>
 8000b12:	428b      	cmp	r3, r1
 8000b14:	d302      	bcc.n	8000b1c <__udivmoddi4+0xd0>
 8000b16:	4282      	cmp	r2, r0
 8000b18:	f200 80fa 	bhi.w	8000d10 <__udivmoddi4+0x2c4>
 8000b1c:	1a84      	subs	r4, r0, r2
 8000b1e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b22:	2001      	movs	r0, #1
 8000b24:	4698      	mov	r8, r3
 8000b26:	2e00      	cmp	r6, #0
 8000b28:	d0e0      	beq.n	8000aec <__udivmoddi4+0xa0>
 8000b2a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b2e:	e7dd      	b.n	8000aec <__udivmoddi4+0xa0>
 8000b30:	b902      	cbnz	r2, 8000b34 <__udivmoddi4+0xe8>
 8000b32:	deff      	udf	#255	; 0xff
 8000b34:	fab2 f282 	clz	r2, r2
 8000b38:	2a00      	cmp	r2, #0
 8000b3a:	f040 808f 	bne.w	8000c5c <__udivmoddi4+0x210>
 8000b3e:	1b49      	subs	r1, r1, r5
 8000b40:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b44:	fa1f f885 	uxth.w	r8, r5
 8000b48:	2701      	movs	r7, #1
 8000b4a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b4e:	0c23      	lsrs	r3, r4, #16
 8000b50:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b58:	fb08 f10c 	mul.w	r1, r8, ip
 8000b5c:	4299      	cmp	r1, r3
 8000b5e:	d907      	bls.n	8000b70 <__udivmoddi4+0x124>
 8000b60:	18eb      	adds	r3, r5, r3
 8000b62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0x122>
 8000b68:	4299      	cmp	r1, r3
 8000b6a:	f200 80cd 	bhi.w	8000d08 <__udivmoddi4+0x2bc>
 8000b6e:	4684      	mov	ip, r0
 8000b70:	1a59      	subs	r1, r3, r1
 8000b72:	b2a3      	uxth	r3, r4
 8000b74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b78:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b7c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b80:	fb08 f800 	mul.w	r8, r8, r0
 8000b84:	45a0      	cmp	r8, r4
 8000b86:	d907      	bls.n	8000b98 <__udivmoddi4+0x14c>
 8000b88:	192c      	adds	r4, r5, r4
 8000b8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b8e:	d202      	bcs.n	8000b96 <__udivmoddi4+0x14a>
 8000b90:	45a0      	cmp	r8, r4
 8000b92:	f200 80b6 	bhi.w	8000d02 <__udivmoddi4+0x2b6>
 8000b96:	4618      	mov	r0, r3
 8000b98:	eba4 0408 	sub.w	r4, r4, r8
 8000b9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ba0:	e79f      	b.n	8000ae2 <__udivmoddi4+0x96>
 8000ba2:	f1c7 0c20 	rsb	ip, r7, #32
 8000ba6:	40bb      	lsls	r3, r7
 8000ba8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bac:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bb0:	fa01 f407 	lsl.w	r4, r1, r7
 8000bb4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bb8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bbc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000bc0:	4325      	orrs	r5, r4
 8000bc2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bc6:	0c2c      	lsrs	r4, r5, #16
 8000bc8:	fb08 3319 	mls	r3, r8, r9, r3
 8000bcc:	fa1f fa8e 	uxth.w	sl, lr
 8000bd0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000bd4:	fb09 f40a 	mul.w	r4, r9, sl
 8000bd8:	429c      	cmp	r4, r3
 8000bda:	fa02 f207 	lsl.w	r2, r2, r7
 8000bde:	fa00 f107 	lsl.w	r1, r0, r7
 8000be2:	d90b      	bls.n	8000bfc <__udivmoddi4+0x1b0>
 8000be4:	eb1e 0303 	adds.w	r3, lr, r3
 8000be8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000bec:	f080 8087 	bcs.w	8000cfe <__udivmoddi4+0x2b2>
 8000bf0:	429c      	cmp	r4, r3
 8000bf2:	f240 8084 	bls.w	8000cfe <__udivmoddi4+0x2b2>
 8000bf6:	f1a9 0902 	sub.w	r9, r9, #2
 8000bfa:	4473      	add	r3, lr
 8000bfc:	1b1b      	subs	r3, r3, r4
 8000bfe:	b2ad      	uxth	r5, r5
 8000c00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c04:	fb08 3310 	mls	r3, r8, r0, r3
 8000c08:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c0c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c10:	45a2      	cmp	sl, r4
 8000c12:	d908      	bls.n	8000c26 <__udivmoddi4+0x1da>
 8000c14:	eb1e 0404 	adds.w	r4, lr, r4
 8000c18:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1c:	d26b      	bcs.n	8000cf6 <__udivmoddi4+0x2aa>
 8000c1e:	45a2      	cmp	sl, r4
 8000c20:	d969      	bls.n	8000cf6 <__udivmoddi4+0x2aa>
 8000c22:	3802      	subs	r0, #2
 8000c24:	4474      	add	r4, lr
 8000c26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c2e:	eba4 040a 	sub.w	r4, r4, sl
 8000c32:	454c      	cmp	r4, r9
 8000c34:	46c2      	mov	sl, r8
 8000c36:	464b      	mov	r3, r9
 8000c38:	d354      	bcc.n	8000ce4 <__udivmoddi4+0x298>
 8000c3a:	d051      	beq.n	8000ce0 <__udivmoddi4+0x294>
 8000c3c:	2e00      	cmp	r6, #0
 8000c3e:	d069      	beq.n	8000d14 <__udivmoddi4+0x2c8>
 8000c40:	ebb1 050a 	subs.w	r5, r1, sl
 8000c44:	eb64 0403 	sbc.w	r4, r4, r3
 8000c48:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c4c:	40fd      	lsrs	r5, r7
 8000c4e:	40fc      	lsrs	r4, r7
 8000c50:	ea4c 0505 	orr.w	r5, ip, r5
 8000c54:	e9c6 5400 	strd	r5, r4, [r6]
 8000c58:	2700      	movs	r7, #0
 8000c5a:	e747      	b.n	8000aec <__udivmoddi4+0xa0>
 8000c5c:	f1c2 0320 	rsb	r3, r2, #32
 8000c60:	fa20 f703 	lsr.w	r7, r0, r3
 8000c64:	4095      	lsls	r5, r2
 8000c66:	fa01 f002 	lsl.w	r0, r1, r2
 8000c6a:	fa21 f303 	lsr.w	r3, r1, r3
 8000c6e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c72:	4338      	orrs	r0, r7
 8000c74:	0c01      	lsrs	r1, r0, #16
 8000c76:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c7a:	fa1f f885 	uxth.w	r8, r5
 8000c7e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c82:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c86:	fb07 f308 	mul.w	r3, r7, r8
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c90:	d907      	bls.n	8000ca2 <__udivmoddi4+0x256>
 8000c92:	1869      	adds	r1, r5, r1
 8000c94:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c98:	d22f      	bcs.n	8000cfa <__udivmoddi4+0x2ae>
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	d92d      	bls.n	8000cfa <__udivmoddi4+0x2ae>
 8000c9e:	3f02      	subs	r7, #2
 8000ca0:	4429      	add	r1, r5
 8000ca2:	1acb      	subs	r3, r1, r3
 8000ca4:	b281      	uxth	r1, r0
 8000ca6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000caa:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb2:	fb00 f308 	mul.w	r3, r0, r8
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d907      	bls.n	8000cca <__udivmoddi4+0x27e>
 8000cba:	1869      	adds	r1, r5, r1
 8000cbc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cc0:	d217      	bcs.n	8000cf2 <__udivmoddi4+0x2a6>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d915      	bls.n	8000cf2 <__udivmoddi4+0x2a6>
 8000cc6:	3802      	subs	r0, #2
 8000cc8:	4429      	add	r1, r5
 8000cca:	1ac9      	subs	r1, r1, r3
 8000ccc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000cd0:	e73b      	b.n	8000b4a <__udivmoddi4+0xfe>
 8000cd2:	4637      	mov	r7, r6
 8000cd4:	4630      	mov	r0, r6
 8000cd6:	e709      	b.n	8000aec <__udivmoddi4+0xa0>
 8000cd8:	4607      	mov	r7, r0
 8000cda:	e6e7      	b.n	8000aac <__udivmoddi4+0x60>
 8000cdc:	4618      	mov	r0, r3
 8000cde:	e6fb      	b.n	8000ad8 <__udivmoddi4+0x8c>
 8000ce0:	4541      	cmp	r1, r8
 8000ce2:	d2ab      	bcs.n	8000c3c <__udivmoddi4+0x1f0>
 8000ce4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ce8:	eb69 020e 	sbc.w	r2, r9, lr
 8000cec:	3801      	subs	r0, #1
 8000cee:	4613      	mov	r3, r2
 8000cf0:	e7a4      	b.n	8000c3c <__udivmoddi4+0x1f0>
 8000cf2:	4660      	mov	r0, ip
 8000cf4:	e7e9      	b.n	8000cca <__udivmoddi4+0x27e>
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	e795      	b.n	8000c26 <__udivmoddi4+0x1da>
 8000cfa:	4667      	mov	r7, ip
 8000cfc:	e7d1      	b.n	8000ca2 <__udivmoddi4+0x256>
 8000cfe:	4681      	mov	r9, r0
 8000d00:	e77c      	b.n	8000bfc <__udivmoddi4+0x1b0>
 8000d02:	3802      	subs	r0, #2
 8000d04:	442c      	add	r4, r5
 8000d06:	e747      	b.n	8000b98 <__udivmoddi4+0x14c>
 8000d08:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d0c:	442b      	add	r3, r5
 8000d0e:	e72f      	b.n	8000b70 <__udivmoddi4+0x124>
 8000d10:	4638      	mov	r0, r7
 8000d12:	e708      	b.n	8000b26 <__udivmoddi4+0xda>
 8000d14:	4637      	mov	r7, r6
 8000d16:	e6e9      	b.n	8000aec <__udivmoddi4+0xa0>

08000d18 <__aeabi_idiv0>:
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop

08000d1c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d22:	463b      	mov	r3, r7
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000d2e:	4b44      	ldr	r3, [pc, #272]	; (8000e40 <MX_ADC1_Init+0x124>)
 8000d30:	4a44      	ldr	r2, [pc, #272]	; (8000e44 <MX_ADC1_Init+0x128>)
 8000d32:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000d34:	4b42      	ldr	r3, [pc, #264]	; (8000e40 <MX_ADC1_Init+0x124>)
 8000d36:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d3a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d3c:	4b40      	ldr	r3, [pc, #256]	; (8000e40 <MX_ADC1_Init+0x124>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000d42:	4b3f      	ldr	r3, [pc, #252]	; (8000e40 <MX_ADC1_Init+0x124>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d48:	4b3d      	ldr	r3, [pc, #244]	; (8000e40 <MX_ADC1_Init+0x124>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d4e:	4b3c      	ldr	r3, [pc, #240]	; (8000e40 <MX_ADC1_Init+0x124>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d56:	4b3a      	ldr	r3, [pc, #232]	; (8000e40 <MX_ADC1_Init+0x124>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d5c:	4b38      	ldr	r3, [pc, #224]	; (8000e40 <MX_ADC1_Init+0x124>)
 8000d5e:	4a3a      	ldr	r2, [pc, #232]	; (8000e48 <MX_ADC1_Init+0x12c>)
 8000d60:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d62:	4b37      	ldr	r3, [pc, #220]	; (8000e40 <MX_ADC1_Init+0x124>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8000d68:	4b35      	ldr	r3, [pc, #212]	; (8000e40 <MX_ADC1_Init+0x124>)
 8000d6a:	2206      	movs	r2, #6
 8000d6c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d6e:	4b34      	ldr	r3, [pc, #208]	; (8000e40 <MX_ADC1_Init+0x124>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000d76:	4b32      	ldr	r3, [pc, #200]	; (8000e40 <MX_ADC1_Init+0x124>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d7c:	4830      	ldr	r0, [pc, #192]	; (8000e40 <MX_ADC1_Init+0x124>)
 8000d7e:	f001 fa67 	bl	8002250 <HAL_ADC_Init>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000d88:	f000 fdf5 	bl	8001976 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000d8c:	2304      	movs	r3, #4
 8000d8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d90:	2301      	movs	r3, #1
 8000d92:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000d94:	2307      	movs	r3, #7
 8000d96:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d98:	463b      	mov	r3, r7
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4828      	ldr	r0, [pc, #160]	; (8000e40 <MX_ADC1_Init+0x124>)
 8000d9e:	f001 fe9f 	bl	8002ae0 <HAL_ADC_ConfigChannel>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000da8:	f000 fde5 	bl	8001976 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000dac:	2305      	movs	r3, #5
 8000dae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000db0:	2302      	movs	r3, #2
 8000db2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000db4:	463b      	mov	r3, r7
 8000db6:	4619      	mov	r1, r3
 8000db8:	4821      	ldr	r0, [pc, #132]	; (8000e40 <MX_ADC1_Init+0x124>)
 8000dba:	f001 fe91 	bl	8002ae0 <HAL_ADC_ConfigChannel>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000dc4:	f000 fdd7 	bl	8001976 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000dc8:	2306      	movs	r3, #6
 8000dca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dd0:	463b      	mov	r3, r7
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	481a      	ldr	r0, [pc, #104]	; (8000e40 <MX_ADC1_Init+0x124>)
 8000dd6:	f001 fe83 	bl	8002ae0 <HAL_ADC_ConfigChannel>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000de0:	f000 fdc9 	bl	8001976 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000de4:	2307      	movs	r3, #7
 8000de6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000de8:	2304      	movs	r3, #4
 8000dea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dec:	463b      	mov	r3, r7
 8000dee:	4619      	mov	r1, r3
 8000df0:	4813      	ldr	r0, [pc, #76]	; (8000e40 <MX_ADC1_Init+0x124>)
 8000df2:	f001 fe75 	bl	8002ae0 <HAL_ADC_ConfigChannel>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000dfc:	f000 fdbb 	bl	8001976 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000e00:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <MX_ADC1_Init+0x130>)
 8000e02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000e04:	2305      	movs	r3, #5
 8000e06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e08:	463b      	mov	r3, r7
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	480c      	ldr	r0, [pc, #48]	; (8000e40 <MX_ADC1_Init+0x124>)
 8000e0e:	f001 fe67 	bl	8002ae0 <HAL_ADC_ConfigChannel>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000e18:	f000 fdad 	bl	8001976 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000e1c:	2311      	movs	r3, #17
 8000e1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000e20:	2306      	movs	r3, #6
 8000e22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e24:	463b      	mov	r3, r7
 8000e26:	4619      	mov	r1, r3
 8000e28:	4805      	ldr	r0, [pc, #20]	; (8000e40 <MX_ADC1_Init+0x124>)
 8000e2a:	f001 fe59 	bl	8002ae0 <HAL_ADC_ConfigChannel>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000e34:	f000 fd9f 	bl	8001976 <Error_Handler>
  }

}
 8000e38:	bf00      	nop
 8000e3a:	3710      	adds	r7, #16
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20006a2c 	.word	0x20006a2c
 8000e44:	40012000 	.word	0x40012000
 8000e48:	0f000001 	.word	0x0f000001
 8000e4c:	10000012 	.word	0x10000012

08000e50 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08a      	sub	sp, #40	; 0x28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a33      	ldr	r2, [pc, #204]	; (8000f3c <HAL_ADC_MspInit+0xec>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d15f      	bne.n	8000f32 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]
 8000e76:	4b32      	ldr	r3, [pc, #200]	; (8000f40 <HAL_ADC_MspInit+0xf0>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7a:	4a31      	ldr	r2, [pc, #196]	; (8000f40 <HAL_ADC_MspInit+0xf0>)
 8000e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e80:	6453      	str	r3, [r2, #68]	; 0x44
 8000e82:	4b2f      	ldr	r3, [pc, #188]	; (8000f40 <HAL_ADC_MspInit+0xf0>)
 8000e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	4b2b      	ldr	r3, [pc, #172]	; (8000f40 <HAL_ADC_MspInit+0xf0>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a2a      	ldr	r2, [pc, #168]	; (8000f40 <HAL_ADC_MspInit+0xf0>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b28      	ldr	r3, [pc, #160]	; (8000f40 <HAL_ADC_MspInit+0xf0>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7 
    */
    GPIO_InitStruct.Pin = ANALOG_in_A_Pin|ANALOG_in_B_Pin|ANALOG_in_C_Pin|ANALOG_in_D_Pin;
 8000eaa:	23f0      	movs	r3, #240	; 0xf0
 8000eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4821      	ldr	r0, [pc, #132]	; (8000f44 <HAL_ADC_MspInit+0xf4>)
 8000ebe:	f002 ffcb 	bl	8003e58 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000ec2:	4b21      	ldr	r3, [pc, #132]	; (8000f48 <HAL_ADC_MspInit+0xf8>)
 8000ec4:	4a21      	ldr	r2, [pc, #132]	; (8000f4c <HAL_ADC_MspInit+0xfc>)
 8000ec6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ec8:	4b1f      	ldr	r3, [pc, #124]	; (8000f48 <HAL_ADC_MspInit+0xf8>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ece:	4b1e      	ldr	r3, [pc, #120]	; (8000f48 <HAL_ADC_MspInit+0xf8>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ed4:	4b1c      	ldr	r3, [pc, #112]	; (8000f48 <HAL_ADC_MspInit+0xf8>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000eda:	4b1b      	ldr	r3, [pc, #108]	; (8000f48 <HAL_ADC_MspInit+0xf8>)
 8000edc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ee0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ee2:	4b19      	ldr	r3, [pc, #100]	; (8000f48 <HAL_ADC_MspInit+0xf8>)
 8000ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ee8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000eea:	4b17      	ldr	r3, [pc, #92]	; (8000f48 <HAL_ADC_MspInit+0xf8>)
 8000eec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ef0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ef2:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <HAL_ADC_MspInit+0xf8>)
 8000ef4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ef8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000efa:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <HAL_ADC_MspInit+0xf8>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f00:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <HAL_ADC_MspInit+0xf8>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f06:	4810      	ldr	r0, [pc, #64]	; (8000f48 <HAL_ADC_MspInit+0xf8>)
 8000f08:	f002 fa2a 	bl	8003360 <HAL_DMA_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000f12:	f000 fd30 	bl	8001976 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a0b      	ldr	r2, [pc, #44]	; (8000f48 <HAL_ADC_MspInit+0xf8>)
 8000f1a:	639a      	str	r2, [r3, #56]	; 0x38
 8000f1c:	4a0a      	ldr	r2, [pc, #40]	; (8000f48 <HAL_ADC_MspInit+0xf8>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2105      	movs	r1, #5
 8000f26:	2012      	movs	r0, #18
 8000f28:	f002 f9ac 	bl	8003284 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000f2c:	2012      	movs	r0, #18
 8000f2e:	f002 f9d5 	bl	80032dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f32:	bf00      	nop
 8000f34:	3728      	adds	r7, #40	; 0x28
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40012000 	.word	0x40012000
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40020000 	.word	0x40020000
 8000f48:	20006a74 	.word	0x20006a74
 8000f4c:	40026410 	.word	0x40026410

08000f50 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <MX_CRC_Init+0x20>)
 8000f56:	4a07      	ldr	r2, [pc, #28]	; (8000f74 <MX_CRC_Init+0x24>)
 8000f58:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000f5a:	4805      	ldr	r0, [pc, #20]	; (8000f70 <MX_CRC_Init+0x20>)
 8000f5c:	f002 f9d6 	bl	800330c <HAL_CRC_Init>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000f66:	f000 fd06 	bl	8001976 <Error_Handler>
  }

}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20006ad4 	.word	0x20006ad4
 8000f74:	40023000 	.word	0x40023000

08000f78 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a0b      	ldr	r2, [pc, #44]	; (8000fb4 <HAL_CRC_MspInit+0x3c>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d10d      	bne.n	8000fa6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <HAL_CRC_MspInit+0x40>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a09      	ldr	r2, [pc, #36]	; (8000fb8 <HAL_CRC_MspInit+0x40>)
 8000f94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b07      	ldr	r3, [pc, #28]	; (8000fb8 <HAL_CRC_MspInit+0x40>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000fa6:	bf00      	nop
 8000fa8:	3714      	adds	r7, #20
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	40023000 	.word	0x40023000
 8000fb8:	40023800 	.word	0x40023800

08000fbc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	607b      	str	r3, [r7, #4]
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <MX_DMA_Init+0x3c>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a0b      	ldr	r2, [pc, #44]	; (8000ff8 <MX_DMA_Init+0x3c>)
 8000fcc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <MX_DMA_Init+0x3c>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2105      	movs	r1, #5
 8000fe2:	2038      	movs	r0, #56	; 0x38
 8000fe4:	f002 f94e 	bl	8003284 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000fe8:	2038      	movs	r0, #56	; 0x38
 8000fea:	f002 f977 	bl	80032dc <HAL_NVIC_EnableIRQ>

}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40023800 	.word	0x40023800

08000ffc <configureTimerForRunTimeStats>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void) {
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0

}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void) {
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0
	return 0;
 800100e:	2300      	movs	r3, #0
}
 8001010:	4618      	mov	r0, r3
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook(void) {
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0
	 specified, or call vTaskDelay()). If the application makes use of the
	 vTaskDelete() API function (as this demo application does) then it is also
	 important that vApplicationIdleHook() is permitted to return to its calling
	 function, because it is the responsibility of the idle task to clean up
	 memory allocated by the kernel to any task that has since been deleted. */
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook(void) {
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
	/* This function will be called by each tick interrupt if
	 configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
	 added here, but the tick hook is called from an interrupt context, so
	 code must not attempt to block, and only the interrupt safe FreeRTOS API
	 functions can be used (those that end in FromISR()). */
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask,
		signed char *pcTaskName) {
 8001036:	b480      	push	{r7}
 8001038:	b083      	sub	sp, #12
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
 800103e:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
	 called if a stack overflow is detected. */
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void) {
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
	 demo application. If heap_1.c or heap_2.c are used, then the size of the
	 heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	 FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	 to query the size of free heap space that remains (although it does not
	 provide information on how the remaining heap might be fragmented). */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
	...

0800105c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of adcBufSmf_ */
  adcBufSmf_Handle = osSemaphoreNew(1, 1, &adcBufSmf__attributes);
 8001060:	4a24      	ldr	r2, [pc, #144]	; (80010f4 <MX_FREERTOS_Init+0x98>)
 8001062:	2101      	movs	r1, #1
 8001064:	2001      	movs	r0, #1
 8001066:	f00c fb1f 	bl	800d6a8 <osSemaphoreNew>
 800106a:	4602      	mov	r2, r0
 800106c:	4b22      	ldr	r3, [pc, #136]	; (80010f8 <MX_FREERTOS_Init+0x9c>)
 800106e:	601a      	str	r2, [r3, #0]

  /* creation of adcFinalSmf_ */
  adcFinalSmf_Handle = osSemaphoreNew(1, 1, &adcFinalSmf__attributes);
 8001070:	4a22      	ldr	r2, [pc, #136]	; (80010fc <MX_FREERTOS_Init+0xa0>)
 8001072:	2101      	movs	r1, #1
 8001074:	2001      	movs	r0, #1
 8001076:	f00c fb17 	bl	800d6a8 <osSemaphoreNew>
 800107a:	4602      	mov	r2, r0
 800107c:	4b20      	ldr	r3, [pc, #128]	; (8001100 <MX_FREERTOS_Init+0xa4>)
 800107e:	601a      	str	r2, [r3, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of adcBufQue_ */
  adcBufQue_Handle = osMessageQueueNew (200, sizeof(uint32_t), &adcBufQue__attributes);
 8001080:	4a20      	ldr	r2, [pc, #128]	; (8001104 <MX_FREERTOS_Init+0xa8>)
 8001082:	2104      	movs	r1, #4
 8001084:	20c8      	movs	r0, #200	; 0xc8
 8001086:	f00c fc6b 	bl	800d960 <osMessageQueueNew>
 800108a:	4602      	mov	r2, r0
 800108c:	4b1e      	ldr	r3, [pc, #120]	; (8001108 <MX_FREERTOS_Init+0xac>)
 800108e:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001090:	4a1e      	ldr	r2, [pc, #120]	; (800110c <MX_FREERTOS_Init+0xb0>)
 8001092:	2100      	movs	r1, #0
 8001094:	481e      	ldr	r0, [pc, #120]	; (8001110 <MX_FREERTOS_Init+0xb4>)
 8001096:	f00c fa33 	bl	800d500 <osThreadNew>
 800109a:	4602      	mov	r2, r0
 800109c:	4b1d      	ldr	r3, [pc, #116]	; (8001114 <MX_FREERTOS_Init+0xb8>)
 800109e:	601a      	str	r2, [r3, #0]

  /* creation of blinki */
  blinkiHandle = osThreadNew(blinkiStart, NULL, &blinki_attributes);
 80010a0:	4a1d      	ldr	r2, [pc, #116]	; (8001118 <MX_FREERTOS_Init+0xbc>)
 80010a2:	2100      	movs	r1, #0
 80010a4:	481d      	ldr	r0, [pc, #116]	; (800111c <MX_FREERTOS_Init+0xc0>)
 80010a6:	f00c fa2b 	bl	800d500 <osThreadNew>
 80010aa:	4602      	mov	r2, r0
 80010ac:	4b1c      	ldr	r3, [pc, #112]	; (8001120 <MX_FREERTOS_Init+0xc4>)
 80010ae:	601a      	str	r2, [r3, #0]

  /* creation of analogMerenje */
  analogMerenjeHandle = osThreadNew(analogMerenjeStart, NULL, &analogMerenje_attributes);
 80010b0:	4a1c      	ldr	r2, [pc, #112]	; (8001124 <MX_FREERTOS_Init+0xc8>)
 80010b2:	2100      	movs	r1, #0
 80010b4:	481c      	ldr	r0, [pc, #112]	; (8001128 <MX_FREERTOS_Init+0xcc>)
 80010b6:	f00c fa23 	bl	800d500 <osThreadNew>
 80010ba:	4602      	mov	r2, r0
 80010bc:	4b1b      	ldr	r3, [pc, #108]	; (800112c <MX_FREERTOS_Init+0xd0>)
 80010be:	601a      	str	r2, [r3, #0]

  /* creation of analogFilter */
  analogFilterHandle = osThreadNew(analogFilterStart, NULL, &analogFilter_attributes);
 80010c0:	4a1b      	ldr	r2, [pc, #108]	; (8001130 <MX_FREERTOS_Init+0xd4>)
 80010c2:	2100      	movs	r1, #0
 80010c4:	481b      	ldr	r0, [pc, #108]	; (8001134 <MX_FREERTOS_Init+0xd8>)
 80010c6:	f00c fa1b 	bl	800d500 <osThreadNew>
 80010ca:	4602      	mov	r2, r0
 80010cc:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <MX_FREERTOS_Init+0xdc>)
 80010ce:	601a      	str	r2, [r3, #0]

  /* creation of extInt_A */
  extInt_AHandle = osThreadNew(extInt_A_receiver, NULL, &extInt_A_attributes);
 80010d0:	4a1a      	ldr	r2, [pc, #104]	; (800113c <MX_FREERTOS_Init+0xe0>)
 80010d2:	2100      	movs	r1, #0
 80010d4:	481a      	ldr	r0, [pc, #104]	; (8001140 <MX_FREERTOS_Init+0xe4>)
 80010d6:	f00c fa13 	bl	800d500 <osThreadNew>
 80010da:	4602      	mov	r2, r0
 80010dc:	4b19      	ldr	r3, [pc, #100]	; (8001144 <MX_FREERTOS_Init+0xe8>)
 80010de:	601a      	str	r2, [r3, #0]

  /* creation of extInt_B */
  extInt_BHandle = osThreadNew(extInt_B_receiver, NULL, &extInt_B_attributes);
 80010e0:	4a19      	ldr	r2, [pc, #100]	; (8001148 <MX_FREERTOS_Init+0xec>)
 80010e2:	2100      	movs	r1, #0
 80010e4:	4819      	ldr	r0, [pc, #100]	; (800114c <MX_FREERTOS_Init+0xf0>)
 80010e6:	f00c fa0b 	bl	800d500 <osThreadNew>
 80010ea:	4602      	mov	r2, r0
 80010ec:	4b18      	ldr	r3, [pc, #96]	; (8001150 <MX_FREERTOS_Init+0xf4>)
 80010ee:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	08011cf8 	.word	0x08011cf8
 80010f8:	20006af0 	.word	0x20006af0
 80010fc:	08011d08 	.word	0x08011d08
 8001100:	20006adc 	.word	0x20006adc
 8001104:	08011ce0 	.word	0x08011ce0
 8001108:	20006af8 	.word	0x20006af8
 800110c:	08011c08 	.word	0x08011c08
 8001110:	08001155 	.word	0x08001155
 8001114:	20006ae4 	.word	0x20006ae4
 8001118:	08011c2c 	.word	0x08011c2c
 800111c:	08001169 	.word	0x08001169
 8001120:	20006afc 	.word	0x20006afc
 8001124:	08011c50 	.word	0x08011c50
 8001128:	0800119d 	.word	0x0800119d
 800112c:	20006ae8 	.word	0x20006ae8
 8001130:	08011c74 	.word	0x08011c74
 8001134:	080011b9 	.word	0x080011b9
 8001138:	20006af4 	.word	0x20006af4
 800113c:	08011c98 	.word	0x08011c98
 8001140:	08001459 	.word	0x08001459
 8001144:	20006aec 	.word	0x20006aec
 8001148:	08011cbc 	.word	0x08011cbc
 800114c:	0800147b 	.word	0x0800147b
 8001150:	20006ae0 	.word	0x20006ae0

08001154 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800115c:	f00f ff2a 	bl	8010fb4 <MX_USB_HOST_Init>
  /* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	for (;;) {
		osDelay(100);
 8001160:	2064      	movs	r0, #100	; 0x64
 8001162:	f00c fa73 	bl	800d64c <osDelay>
 8001166:	e7fb      	b.n	8001160 <StartDefaultTask+0xc>

08001168 <blinkiStart>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_blinkiStart */
void blinkiStart(void *argument)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blinkiStart */
	int blinkLen = 4;
 8001170:	2304      	movs	r3, #4
 8001172:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for (;;) {
		uint32_t x = HAL_RTCEx_BKUPRead(&hrtc, 11);
 8001174:	210b      	movs	r1, #11
 8001176:	4808      	ldr	r0, [pc, #32]	; (8001198 <blinkiStart+0x30>)
 8001178:	f006 fc32 	bl	80079e0 <HAL_RTCEx_BKUPRead>
 800117c:	60b8      	str	r0, [r7, #8]
		trep(blinkLen);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	4618      	mov	r0, r3
 8001182:	f000 feef 	bl	8001f64 <trep>
		osDelay(blinkiPERIOD - blinkLen+1);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 800118c:	3301      	adds	r3, #1
 800118e:	4618      	mov	r0, r3
 8001190:	f00c fa5c 	bl	800d64c <osDelay>
	for (;;) {
 8001194:	e7ee      	b.n	8001174 <blinkiStart+0xc>
 8001196:	bf00      	nop
 8001198:	20006b54 	.word	0x20006b54

0800119c <analogMerenjeStart>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_analogMerenjeStart */
void analogMerenjeStart(void *argument)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN analogMerenjeStart */
	/* Infinite loop */
	for (;;) {
		adcBackgroundStart();
 80011a4:	f000 f97a 	bl	800149c <adcBackgroundStart>
		osDelay(pdMS_TO_TICKS(ADC_REPEAT_PERIOD_mS));
 80011a8:	f242 7010 	movw	r0, #10000	; 0x2710
 80011ac:	f00c fa4e 	bl	800d64c <osDelay>
		adcBackgroundStart();
 80011b0:	e7f8      	b.n	80011a4 <analogMerenjeStart+0x8>
 80011b2:	0000      	movs	r0, r0
 80011b4:	0000      	movs	r0, r0
	...

080011b8 <analogFilterStart>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_analogFilterStart */
void analogFilterStart(void *argument)
{
 80011b8:	b590      	push	{r4, r7, lr}
 80011ba:	b0c9      	sub	sp, #292	; 0x124
 80011bc:	af00      	add	r7, sp, #0
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	6018      	str	r0, [r3, #0]
	 * adc1_in5
	 * ...
	 * temperature sensor (interni senzor na cpu)
	 * Vrefint (interni referentni napon za adc)
	 */
	uint32_t istorija[ADC_SAMPLES_max][ADC_ULAZA_max] = { 0 };
 80011c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011c6:	22c0      	movs	r2, #192	; 0xc0
 80011c8:	2100      	movs	r1, #0
 80011ca:	4618      	mov	r0, r3
 80011cc:	f010 fa6d 	bl	80116aa <memset>
	uint32_t najnoviji[ADC_ULAZA_koristi] = { 0 };
 80011d0:	f107 0320 	add.w	r3, r7, #32
 80011d4:	461a      	mov	r2, r3
 80011d6:	2300      	movs	r3, #0
 80011d8:	6013      	str	r3, [r2, #0]
 80011da:	6053      	str	r3, [r2, #4]
 80011dc:	6093      	str	r3, [r2, #8]
 80011de:	60d3      	str	r3, [r2, #12]
 80011e0:	6113      	str	r3, [r2, #16]
 80011e2:	6153      	str	r3, [r2, #20]
	float analogFiltered[ADC_ULAZA_koristi] = { 0 };
 80011e4:	f107 0308 	add.w	r3, r7, #8
 80011e8:	461a      	mov	r2, r3
 80011ea:	2300      	movs	r3, #0
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	6053      	str	r3, [r2, #4]
 80011f0:	6093      	str	r3, [r2, #8]
 80011f2:	60d3      	str	r3, [r2, #12]
 80011f4:	6113      	str	r3, [r2, #16]
 80011f6:	6153      	str	r3, [r2, #20]
	uint32_t tmp = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

	/* Infinite loop */
	for (;;) {
		// najnoviji rezultat[] prebacujem jedan po jedan ulaz, u matricu istorija[][]

		for (int ulaz = 0; ulaz < ADC_ULAZA_koristi; ++ulaz) {
 80011fe:	2300      	movs	r3, #0
 8001200:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001204:	e015      	b.n	8001232 <analogFilterStart+0x7a>
			// sledeci rezultat merenja iz queue stavim u najnoviji[]. Moze to i brze ali ovako je cistije i lakse

			while(osOK != osMessageQueueGet(adcBufQue_Handle, &najnoviji[ulaz], NULL, osWaitForever) ) {
 8001206:	bf00      	nop
 8001208:	4b8b      	ldr	r3, [pc, #556]	; (8001438 <analogFilterStart+0x280>)
 800120a:	6818      	ldr	r0, [r3, #0]
 800120c:	f107 0220 	add.w	r2, r7, #32
 8001210:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	18d1      	adds	r1, r2, r3
 8001218:	f04f 33ff 	mov.w	r3, #4294967295
 800121c:	2200      	movs	r2, #0
 800121e:	f00c fc99 	bl	800db54 <osMessageQueueGet>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d1ef      	bne.n	8001208 <analogFilterStart+0x50>
		for (int ulaz = 0; ulaz < ADC_ULAZA_koristi; ++ulaz) {
 8001228:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800122c:	3301      	adds	r3, #1
 800122e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001232:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001236:	2b05      	cmp	r3, #5
 8001238:	dde5      	ble.n	8001206 <analogFilterStart+0x4e>

		}

		// nakon dovoljno cekanja u queue svi ulazi su izmereni i prebaceni u najnoviji[]
		// sad cemo da ih procesiramo
		for (int sempl = 0; sempl < ADC_SAMPLES_koristi; ++sempl) {
 800123a:	2300      	movs	r3, #0
 800123c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001240:	e05c      	b.n	80012fc <analogFilterStart+0x144>
			// prebaci najnovije merenje u istoriju
			for (int ulaz = 0; ulaz < ADC_ULAZA_koristi; ++ulaz) {
 8001242:	2300      	movs	r3, #0
 8001244:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8001248:	e04f      	b.n	80012ea <analogFilterStart+0x132>
				// jedan po jedan ulaz
				istorija[sempl][ulaz] = najnoviji[ulaz];
 800124a:	f107 0320 	add.w	r3, r7, #32
 800124e:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001252:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001256:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800125a:	4613      	mov	r3, r2
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	4413      	add	r3, r2
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001266:	4413      	add	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800126e:	4413      	add	r3, r2
 8001270:	f843 1ce8 	str.w	r1, [r3, #-232]

				// kad sam vec tu, za isti taj ulaz nadjem average svih semplova do sada
				tmp = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
				for (int i = 0; i < ADC_SAMPLES_koristi; ++i) {
 800127a:	2300      	movs	r3, #0
 800127c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001280:	e018      	b.n	80012b4 <analogFilterStart+0xfc>
					tmp = tmp + istorija[i][ulaz];
 8001282:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001286:	4613      	mov	r3, r2
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	4413      	add	r3, r2
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001292:	4413      	add	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800129a:	4413      	add	r3, r2
 800129c:	f853 3ce8 	ldr.w	r3, [r3, #-232]
 80012a0:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80012a4:	4413      	add	r3, r2
 80012a6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
				for (int i = 0; i < ADC_SAMPLES_koristi; ++i) {
 80012aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80012ae:	3301      	adds	r3, #1
 80012b0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80012b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80012b8:	2b07      	cmp	r3, #7
 80012ba:	dde2      	ble.n	8001282 <analogFilterStart+0xca>
				}
				// i sacuvam to
				analogFiltered[ulaz] = ((float) tmp) / ((float) ADC_SAMPLES_koristi);
 80012bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80012c0:	ee07 3a90 	vmov	s15, r3
 80012c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012c8:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80012cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012d0:	f107 0208 	add.w	r2, r7, #8
 80012d4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	4413      	add	r3, r2
 80012dc:	edc3 7a00 	vstr	s15, [r3]
			for (int ulaz = 0; ulaz < ADC_ULAZA_koristi; ++ulaz) {
 80012e0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80012e4:	3301      	adds	r3, #1
 80012e6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80012ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80012ee:	2b05      	cmp	r3, #5
 80012f0:	ddab      	ble.n	800124a <analogFilterStart+0x92>
		for (int sempl = 0; sempl < ADC_SAMPLES_koristi; ++sempl) {
 80012f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80012f6:	3301      	adds	r3, #1
 80012f8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80012fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001300:	2b07      	cmp	r3, #7
 8001302:	dd9e      	ble.n	8001242 <analogFilterStart+0x8a>
		}
		// specijalan tretman za interno merenje temperature procesora
		// pogledati datasheet i reference manual za konkretan cpu, izabranu rezoluciju adc-a itd
		// celzijusa = ((adcMerenje * (Vrefint / adcRezolucija) - 0.76) / 2.5) + 25
		// celzijusa = ((adcMerenje * (  3.3   /     4096     ) - 0.76) / 2.5) + 25;
		float tmp = analogFiltered[ADC_ULAZA_koristi - 2];// prioritet internog temp senzora = pretposlednji (ali indeksi pocinju od 0)
 8001304:	f107 0308 	add.w	r3, r7, #8
 8001308:	691b      	ldr	r3, [r3, #16]
 800130a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
		float cpuTemperatura = ((tmp * (3.3 / 4096) - 0.76) / 2.5) + 25;
 800130e:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8001312:	f7ff f8c9 	bl	80004a8 <__aeabi_f2d>
 8001316:	a344      	add	r3, pc, #272	; (adr r3, 8001428 <analogFilterStart+0x270>)
 8001318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131c:	f7ff f91c 	bl	8000558 <__aeabi_dmul>
 8001320:	4603      	mov	r3, r0
 8001322:	460c      	mov	r4, r1
 8001324:	4618      	mov	r0, r3
 8001326:	4621      	mov	r1, r4
 8001328:	a341      	add	r3, pc, #260	; (adr r3, 8001430 <analogFilterStart+0x278>)
 800132a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132e:	f7fe ff5b 	bl	80001e8 <__aeabi_dsub>
 8001332:	4603      	mov	r3, r0
 8001334:	460c      	mov	r4, r1
 8001336:	4618      	mov	r0, r3
 8001338:	4621      	mov	r1, r4
 800133a:	f04f 0200 	mov.w	r2, #0
 800133e:	4b3f      	ldr	r3, [pc, #252]	; (800143c <analogFilterStart+0x284>)
 8001340:	f7ff fa34 	bl	80007ac <__aeabi_ddiv>
 8001344:	4603      	mov	r3, r0
 8001346:	460c      	mov	r4, r1
 8001348:	4618      	mov	r0, r3
 800134a:	4621      	mov	r1, r4
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	4b3b      	ldr	r3, [pc, #236]	; (8001440 <analogFilterStart+0x288>)
 8001352:	f7fe ff4b 	bl	80001ec <__adddf3>
 8001356:	4603      	mov	r3, r0
 8001358:	460c      	mov	r4, r1
 800135a:	4618      	mov	r0, r3
 800135c:	4621      	mov	r1, r4
 800135e:	f7ff fb0d 	bl	800097c <__aeabi_d2f>
 8001362:	4603      	mov	r3, r0
 8001364:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
		float cpuAdcVoltageReference = analogFiltered[ADC_ULAZA_koristi - 1];// prioritet Vrefint = poslednji (ali indeksi pocinju od 0)
 8001368:	f107 0308 	add.w	r3, r7, #8
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
		analogFiltered[ADC_ULAZA_koristi - 2] = cpuTemperatura;	// XXX zasto je uvek 24.696?
 8001372:	f107 0308 	add.w	r3, r7, #8
 8001376:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800137a:	611a      	str	r2, [r3, #16]
		analogFiltered[ADC_ULAZA_koristi - 1] = cpuAdcVoltageReference;
 800137c:	f107 0308 	add.w	r3, r7, #8
 8001380:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8001384:	615a      	str	r2, [r3, #20]

		while (osOK != osSemaphoreAcquire(adcFinalSmf_Handle, osWaitForever)) {
 8001386:	bf00      	nop
 8001388:	4b2e      	ldr	r3, [pc, #184]	; (8001444 <analogFilterStart+0x28c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f04f 31ff 	mov.w	r1, #4294967295
 8001390:	4618      	mov	r0, r3
 8001392:	f00c fa27 	bl	800d7e4 <osSemaphoreAcquire>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1f5      	bne.n	8001388 <analogFilterStart+0x1d0>
			// ako istekne osWaitForever, vracam se na cekanje
			// FEA bilo sta drugo osim osWaitForever -> sta onda?
		}
		for (int i = 0; i < ADC_ULAZA_koristi; ++i) {
 800139c:	2300      	movs	r3, #0
 800139e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80013a2:	e034      	b.n	800140e <analogFilterStart+0x256>
			float af = analogFiltered[i];
 80013a4:	f107 0208 	add.w	r2, r7, #8
 80013a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	4413      	add	r3, r2
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
			adcAnalog[i] = af;				// finalni rezultat ADC konvertora
 80013b6:	4a24      	ldr	r2, [pc, #144]	; (8001448 <analogFilterStart+0x290>)
 80013b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4413      	add	r3, r2
 80013c0:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80013c4:	601a      	str	r2, [r3, #0]

			if (af < 1500) {// konvertujem to isto u fejk logicki nivo (ADC rezolucija je 4096)
 80013c6:	edd7 7a3e 	vldr	s15, [r7, #248]	; 0xf8
 80013ca:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800144c <analogFilterStart+0x294>
 80013ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d6:	d506      	bpl.n	80013e6 <analogFilterStart+0x22e>
				adcLogic[i] = 0;		// ispod 1500 smatram da je logicka nula
 80013d8:	4a1d      	ldr	r2, [pc, #116]	; (8001450 <analogFilterStart+0x298>)
 80013da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80013de:	2100      	movs	r1, #0
 80013e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80013e4:	e00e      	b.n	8001404 <analogFilterStart+0x24c>
			} else if (af > 2500) {
 80013e6:	edd7 7a3e 	vldr	s15, [r7, #248]	; 0xf8
 80013ea:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001454 <analogFilterStart+0x29c>
 80013ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f6:	dd05      	ble.n	8001404 <analogFilterStart+0x24c>
				adcLogic[i] = 1;	// preko 2500 smatram da je logicka jedinica
 80013f8:	4a15      	ldr	r2, [pc, #84]	; (8001450 <analogFilterStart+0x298>)
 80013fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80013fe:	2101      	movs	r1, #1
 8001400:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0; i < ADC_ULAZA_koristi; ++i) {
 8001404:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001408:	3301      	adds	r3, #1
 800140a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800140e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001412:	2b05      	cmp	r3, #5
 8001414:	ddc6      	ble.n	80013a4 <analogFilterStart+0x1ec>
			};			// izmedju 1500 i 2500 stanje se ne menja. Histerezis!
		}
		if (osOK != osSemaphoreRelease(adcFinalSmf_Handle)) {
 8001416:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <analogFilterStart+0x28c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	f00c fa48 	bl	800d8b0 <osSemaphoreRelease>
	for (;;) {
 8001420:	e6ed      	b.n	80011fe <analogFilterStart+0x46>
 8001422:	bf00      	nop
 8001424:	f3af 8000 	nop.w
 8001428:	66666666 	.word	0x66666666
 800142c:	3f4a6666 	.word	0x3f4a6666
 8001430:	851eb852 	.word	0x851eb852
 8001434:	3fe851eb 	.word	0x3fe851eb
 8001438:	20006af8 	.word	0x20006af8
 800143c:	40040000 	.word	0x40040000
 8001440:	40390000 	.word	0x40390000
 8001444:	20006adc 	.word	0x20006adc
 8001448:	200000c8 	.word	0x200000c8
 800144c:	44bb8000 	.word	0x44bb8000
 8001450:	200000e0 	.word	0x200000e0
 8001454:	451c4000 	.word	0x451c4000

08001458 <extInt_A_receiver>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_extInt_A_receiver */
void extInt_A_receiver(void *argument)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN extInt_A_receiver */
	/* Infinite loop */
	for (;;) {
		if (pdTRUE == ulTaskNotifyTake(pdTRUE, portMAX_DELAY)) {
 8001460:	f04f 31ff 	mov.w	r1, #4294967295
 8001464:	2001      	movs	r0, #1
 8001466:	f00e fd17 	bl	800fe98 <ulTaskNotifyTake>
 800146a:	4603      	mov	r3, r0
 800146c:	2b01      	cmp	r3, #1
 800146e:	d1f7      	bne.n	8001460 <extInt_A_receiver+0x8>
			// ISR se desio, uradi nesto
			osDelay(pdMS_TO_TICKS(EXTI_MINIMUM_REPEAT_mS));		// TODO jos neko vreme ne raagujem na novi interrupt
 8001470:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001474:	f00c f8ea 	bl	800d64c <osDelay>
		if (pdTRUE == ulTaskNotifyTake(pdTRUE, portMAX_DELAY)) {
 8001478:	e7f2      	b.n	8001460 <extInt_A_receiver+0x8>

0800147a <extInt_B_receiver>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_extInt_B_receiver */
void extInt_B_receiver(void *argument)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN extInt_B_receiver */
	/* Infinite loop */
	for (;;) {
		if (pdTRUE == ulTaskNotifyTake(pdTRUE, portMAX_DELAY)) {
 8001482:	f04f 31ff 	mov.w	r1, #4294967295
 8001486:	2001      	movs	r0, #1
 8001488:	f00e fd06 	bl	800fe98 <ulTaskNotifyTake>
 800148c:	4603      	mov	r3, r0
 800148e:	2b01      	cmp	r3, #1
 8001490:	d1f7      	bne.n	8001482 <extInt_B_receiver+0x8>
			// ISR se desio, uradi nesto
			osDelay(pdMS_TO_TICKS(EXTI_MINIMUM_REPEAT_mS));		// TODO jos neko vreme ne raagujem na novi interrupt
 8001492:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001496:	f00c f8d9 	bl	800d64c <osDelay>
		if (pdTRUE == ulTaskNotifyTake(pdTRUE, portMAX_DELAY)) {
 800149a:	e7f2      	b.n	8001482 <extInt_B_receiver+0x8>

0800149c <adcBackgroundStart>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void adcBackgroundStart() {
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
	 * temperature sensor (interni senzor na cpu)
	 * Vrefint (interni referentni napon za adc)
	 */

//	treptrep();
	ledon();
 80014a0:	f000 fd3c 	bl	8001f1c <ledon>
	osDelay(blinkiPERIOD * 2);
 80014a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80014a8:	f00c f8d0 	bl	800d64c <osDelay>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcDMABuf, ADC_ULAZA_koristi);// pokrenem ADC konverziju
 80014ac:	2206      	movs	r2, #6
 80014ae:	4903      	ldr	r1, [pc, #12]	; (80014bc <adcBackgroundStart+0x20>)
 80014b0:	4803      	ldr	r0, [pc, #12]	; (80014c0 <adcBackgroundStart+0x24>)
 80014b2:	f001 f99b 	bl	80027ec <HAL_ADC_Start_DMA>
	 - otpusti semafor
	 - i sve se to desava u pozadini
	 -I DOK ZAVRSI, IDEM DA ODMARAM npr 10 sekundi do sledeceg starta konverzije
	 */

}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	200000b0 	.word	0x200000b0
 80014c0:	20006a2c 	.word	0x20006a2c

080014c4 <z_HAL_ADC_DMA_irq_hendler>:

void z_HAL_ADC_DMA_irq_hendler(void) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0

	HAL_ADC_Stop_DMA(&hadc1);			// zaustavi ga
 80014ca:	481a      	ldr	r0, [pc, #104]	; (8001534 <z_HAL_ADC_DMA_irq_hendler+0x70>)
 80014cc:	f001 fa88 	bl	80029e0 <HAL_ADC_Stop_DMA>
	const uint8_t prioBzvz = 100;	// uvek isti prio -> nema preticanja u queue
 80014d0:	2364      	movs	r3, #100	; 0x64
 80014d2:	72fb      	strb	r3, [r7, #11]
	const uint32_t nula = 0;	// May be called from IRQ service if timeout = 0
 80014d4:	2300      	movs	r3, #0
 80014d6:	607b      	str	r3, [r7, #4]

	// ako ima slobodnih mesta bar za ceo jedan ciklus merenja
	uint32_t slob = osMessageQueueGetSpace(adcBufQue_Handle);
 80014d8:	4b17      	ldr	r3, [pc, #92]	; (8001538 <z_HAL_ADC_DMA_irq_hendler+0x74>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f00c fbab 	bl	800dc38 <osMessageQueueGetSpace>
 80014e2:	6038      	str	r0, [r7, #0]
	if (slob >= ADC_ULAZA_koristi) {
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	2b05      	cmp	r3, #5
 80014e8:	d91e      	bls.n	8001528 <z_HAL_ADC_DMA_irq_hendler+0x64>
		// saljem pojedinacna merenja u queue, ali potrebam je veliki queue
		if (osOK != osSemaphoreAcquire(adcBufSmf_Handle, nula) ) {
 80014ea:	4b14      	ldr	r3, [pc, #80]	; (800153c <z_HAL_ADC_DMA_irq_hendler+0x78>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f00c f977 	bl	800d7e4 <osSemaphoreAcquire>
			// FEA desila se neka greska
		}
		for (int i = 0; i < ADC_ULAZA_koristi; ++i) {
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	e00d      	b.n	8001518 <z_HAL_ADC_DMA_irq_hendler+0x54>
			if (osOK != osMessageQueuePut(adcBufQue_Handle, (uint32_t*) adcDMABuf[i], prioBzvz, nula) ) {
 80014fc:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <z_HAL_ADC_DMA_irq_hendler+0x74>)
 80014fe:	6818      	ldr	r0, [r3, #0]
 8001500:	4a0f      	ldr	r2, [pc, #60]	; (8001540 <z_HAL_ADC_DMA_irq_hendler+0x7c>)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001508:	4619      	mov	r1, r3
 800150a:	7afa      	ldrb	r2, [r7, #11]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f00c faad 	bl	800da6c <osMessageQueuePut>
		for (int i = 0; i < ADC_ULAZA_koristi; ++i) {
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	3301      	adds	r3, #1
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2b05      	cmp	r3, #5
 800151c:	ddee      	ble.n	80014fc <z_HAL_ADC_DMA_irq_hendler+0x38>
				// FEA desila se neka greska
			}
		}
		if (osOK != osSemaphoreRelease(adcBufSmf_Handle)) {
 800151e:	4b07      	ldr	r3, [pc, #28]	; (800153c <z_HAL_ADC_DMA_irq_hendler+0x78>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f00c f9c4 	bl	800d8b0 <osSemaphoreRelease>
			// FEA desila se neka greska
		}
	} else {
		// FEA nije bilo mesta u adcRezultatQueue
	}
	ledof();
 8001528:	f000 fd04 	bl	8001f34 <ledof>

}
 800152c:	bf00      	nop
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20006a2c 	.word	0x20006a2c
 8001538:	20006af8 	.word	0x20006af8
 800153c:	20006af0 	.word	0x20006af0
 8001540:	200000b0 	.word	0x200000b0

08001544 <HAL_GPIO_EXTI_Callback>:





void HAL_GPIO_EXTI_Callback(uint16_t GpioPin){
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	80fb      	strh	r3, [r7, #6]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
	switch (GpioPin) {
 8001552:	88fb      	ldrh	r3, [r7, #6]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d002      	beq.n	800155e <HAL_GPIO_EXTI_Callback+0x1a>
 8001558:	2b02      	cmp	r3, #2
 800155a:	d014      	beq.n	8001586 <HAL_GPIO_EXTI_Callback+0x42>
		vTaskNotifyGiveFromISR(extInt_BHandle, &xHigherPriorityTaskWoken);
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
		break;

	default:
		break;
 800155c:	e02a      	b.n	80015b4 <HAL_GPIO_EXTI_Callback+0x70>
		vTaskNotifyGiveFromISR(extInt_AHandle, &xHigherPriorityTaskWoken);
 800155e:	4b17      	ldr	r3, [pc, #92]	; (80015bc <HAL_GPIO_EXTI_Callback+0x78>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f107 020c 	add.w	r2, r7, #12
 8001566:	4611      	mov	r1, r2
 8001568:	4618      	mov	r0, r3
 800156a:	f00e fcdd 	bl	800ff28 <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d01c      	beq.n	80015ae <HAL_GPIO_EXTI_Callback+0x6a>
 8001574:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	f3bf 8f4f 	dsb	sy
 8001580:	f3bf 8f6f 	isb	sy
		break;
 8001584:	e013      	b.n	80015ae <HAL_GPIO_EXTI_Callback+0x6a>
		vTaskNotifyGiveFromISR(extInt_BHandle, &xHigherPriorityTaskWoken);
 8001586:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <HAL_GPIO_EXTI_Callback+0x80>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f107 020c 	add.w	r2, r7, #12
 800158e:	4611      	mov	r1, r2
 8001590:	4618      	mov	r0, r3
 8001592:	f00e fcc9 	bl	800ff28 <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d00a      	beq.n	80015b2 <HAL_GPIO_EXTI_Callback+0x6e>
 800159c:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <HAL_GPIO_EXTI_Callback+0x7c>)
 800159e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	f3bf 8f4f 	dsb	sy
 80015a8:	f3bf 8f6f 	isb	sy
		break;
 80015ac:	e001      	b.n	80015b2 <HAL_GPIO_EXTI_Callback+0x6e>
		break;
 80015ae:	bf00      	nop
 80015b0:	e000      	b.n	80015b4 <HAL_GPIO_EXTI_Callback+0x70>
		break;
 80015b2:	bf00      	nop
	}
}
 80015b4:	bf00      	nop
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20006aec 	.word	0x20006aec
 80015c0:	e000ed04 	.word	0xe000ed04
 80015c4:	20006ae0 	.word	0x20006ae0

080015c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08a      	sub	sp, #40	; 0x28
 80015cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ce:	f107 0314 	add.w	r3, r7, #20
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	609a      	str	r2, [r3, #8]
 80015da:	60da      	str	r2, [r3, #12]
 80015dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	4b4a      	ldr	r3, [pc, #296]	; (800170c <MX_GPIO_Init+0x144>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	4a49      	ldr	r2, [pc, #292]	; (800170c <MX_GPIO_Init+0x144>)
 80015e8:	f043 0304 	orr.w	r3, r3, #4
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4b47      	ldr	r3, [pc, #284]	; (800170c <MX_GPIO_Init+0x144>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f003 0304 	and.w	r3, r3, #4
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	4b43      	ldr	r3, [pc, #268]	; (800170c <MX_GPIO_Init+0x144>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a42      	ldr	r2, [pc, #264]	; (800170c <MX_GPIO_Init+0x144>)
 8001604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b40      	ldr	r3, [pc, #256]	; (800170c <MX_GPIO_Init+0x144>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	4b3c      	ldr	r3, [pc, #240]	; (800170c <MX_GPIO_Init+0x144>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a3b      	ldr	r2, [pc, #236]	; (800170c <MX_GPIO_Init+0x144>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b39      	ldr	r3, [pc, #228]	; (800170c <MX_GPIO_Init+0x144>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	607b      	str	r3, [r7, #4]
 8001636:	4b35      	ldr	r3, [pc, #212]	; (800170c <MX_GPIO_Init+0x144>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	4a34      	ldr	r2, [pc, #208]	; (800170c <MX_GPIO_Init+0x144>)
 800163c:	f043 0302 	orr.w	r3, r3, #2
 8001640:	6313      	str	r3, [r2, #48]	; 0x30
 8001642:	4b32      	ldr	r3, [pc, #200]	; (800170c <MX_GPIO_Init+0x144>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin, GPIO_PIN_RESET);
 800164e:	2200      	movs	r2, #0
 8001650:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001654:	482e      	ldr	r0, [pc, #184]	; (8001710 <MX_GPIO_Init+0x148>)
 8001656:	f002 fea7 	bl	80043a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIGITAL_out_A_Pin|DIGITAL_out_B_Pin, GPIO_PIN_RESET);
 800165a:	2200      	movs	r2, #0
 800165c:	f240 4104 	movw	r1, #1028	; 0x404
 8001660:	482c      	ldr	r0, [pc, #176]	; (8001714 <MX_GPIO_Init+0x14c>)
 8001662:	f002 fea1 	bl	80043a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(_USB_DRIVE_VBUS_FS_z_freeze_GPIO_Port, _USB_DRIVE_VBUS_FS_z_freeze_Pin, GPIO_PIN_RESET);
 8001666:	2200      	movs	r2, #0
 8001668:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800166c:	482a      	ldr	r0, [pc, #168]	; (8001718 <MX_GPIO_Init+0x150>)
 800166e:	f002 fe9b 	bl	80043a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOARD_LED_Pin;
 8001672:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001678:	2301      	movs	r3, #1
 800167a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001680:	2300      	movs	r3, #0
 8001682:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BOARD_LED_GPIO_Port, &GPIO_InitStruct);
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	4619      	mov	r1, r3
 800168a:	4821      	ldr	r0, [pc, #132]	; (8001710 <MX_GPIO_Init+0x148>)
 800168c:	f002 fbe4 	bl	8003e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = EXT_interrupt_A_Pin|EXT_interrupt_B_Pin;
 8001690:	2303      	movs	r3, #3
 8001692:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001694:	4b21      	ldr	r3, [pc, #132]	; (800171c <MX_GPIO_Init+0x154>)
 8001696:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	4619      	mov	r1, r3
 80016a2:	481c      	ldr	r0, [pc, #112]	; (8001714 <MX_GPIO_Init+0x14c>)
 80016a4:	f002 fbd8 	bl	8003e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DIGITAL_out_A_Pin|DIGITAL_out_B_Pin;
 80016a8:	f240 4304 	movw	r3, #1028	; 0x404
 80016ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ae:	2301      	movs	r3, #1
 80016b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b6:	2300      	movs	r3, #0
 80016b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ba:	f107 0314 	add.w	r3, r7, #20
 80016be:	4619      	mov	r1, r3
 80016c0:	4814      	ldr	r0, [pc, #80]	; (8001714 <MX_GPIO_Init+0x14c>)
 80016c2:	f002 fbc9 	bl	8003e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = _USB_DRIVE_VBUS_FS_z_freeze_Pin;
 80016c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016cc:	2301      	movs	r3, #1
 80016ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d4:	2300      	movs	r3, #0
 80016d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(_USB_DRIVE_VBUS_FS_z_freeze_GPIO_Port, &GPIO_InitStruct);
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	4619      	mov	r1, r3
 80016de:	480e      	ldr	r0, [pc, #56]	; (8001718 <MX_GPIO_Init+0x150>)
 80016e0:	f002 fbba 	bl	8003e58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80016e4:	2200      	movs	r2, #0
 80016e6:	2105      	movs	r1, #5
 80016e8:	2006      	movs	r0, #6
 80016ea:	f001 fdcb 	bl	8003284 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80016ee:	2006      	movs	r0, #6
 80016f0:	f001 fdf4 	bl	80032dc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80016f4:	2200      	movs	r2, #0
 80016f6:	2105      	movs	r1, #5
 80016f8:	2007      	movs	r0, #7
 80016fa:	f001 fdc3 	bl	8003284 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80016fe:	2007      	movs	r0, #7
 8001700:	f001 fdec 	bl	80032dc <HAL_NVIC_EnableIRQ>

}
 8001704:	bf00      	nop
 8001706:	3728      	adds	r7, #40	; 0x28
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40023800 	.word	0x40023800
 8001710:	40020800 	.word	0x40020800
 8001714:	40020400 	.word	0x40020400
 8001718:	40020000 	.word	0x40020000
 800171c:	10110000 	.word	0x10110000

08001720 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001724:	4b12      	ldr	r3, [pc, #72]	; (8001770 <MX_I2C1_Init+0x50>)
 8001726:	4a13      	ldr	r2, [pc, #76]	; (8001774 <MX_I2C1_Init+0x54>)
 8001728:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800172a:	4b11      	ldr	r3, [pc, #68]	; (8001770 <MX_I2C1_Init+0x50>)
 800172c:	4a12      	ldr	r2, [pc, #72]	; (8001778 <MX_I2C1_Init+0x58>)
 800172e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001730:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <MX_I2C1_Init+0x50>)
 8001732:	2200      	movs	r2, #0
 8001734:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001736:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <MX_I2C1_Init+0x50>)
 8001738:	2200      	movs	r2, #0
 800173a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800173c:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <MX_I2C1_Init+0x50>)
 800173e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001742:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001744:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <MX_I2C1_Init+0x50>)
 8001746:	2200      	movs	r2, #0
 8001748:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800174a:	4b09      	ldr	r3, [pc, #36]	; (8001770 <MX_I2C1_Init+0x50>)
 800174c:	2200      	movs	r2, #0
 800174e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001750:	4b07      	ldr	r3, [pc, #28]	; (8001770 <MX_I2C1_Init+0x50>)
 8001752:	2200      	movs	r2, #0
 8001754:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <MX_I2C1_Init+0x50>)
 8001758:	2200      	movs	r2, #0
 800175a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800175c:	4804      	ldr	r0, [pc, #16]	; (8001770 <MX_I2C1_Init+0x50>)
 800175e:	f004 fb93 	bl	8005e88 <HAL_I2C_Init>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001768:	f000 f905 	bl	8001976 <Error_Handler>
  }

}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20006b00 	.word	0x20006b00
 8001774:	40005400 	.word	0x40005400
 8001778:	000186a0 	.word	0x000186a0

0800177c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08a      	sub	sp, #40	; 0x28
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001784:	f107 0314 	add.w	r3, r7, #20
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a19      	ldr	r2, [pc, #100]	; (8001800 <HAL_I2C_MspInit+0x84>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d12c      	bne.n	80017f8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	613b      	str	r3, [r7, #16]
 80017a2:	4b18      	ldr	r3, [pc, #96]	; (8001804 <HAL_I2C_MspInit+0x88>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4a17      	ldr	r2, [pc, #92]	; (8001804 <HAL_I2C_MspInit+0x88>)
 80017a8:	f043 0302 	orr.w	r3, r3, #2
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	4b15      	ldr	r3, [pc, #84]	; (8001804 <HAL_I2C_MspInit+0x88>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	613b      	str	r3, [r7, #16]
 80017b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80017ba:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80017be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017c0:	2312      	movs	r3, #18
 80017c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017c4:	2301      	movs	r3, #1
 80017c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c8:	2303      	movs	r3, #3
 80017ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017cc:	2304      	movs	r3, #4
 80017ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d0:	f107 0314 	add.w	r3, r7, #20
 80017d4:	4619      	mov	r1, r3
 80017d6:	480c      	ldr	r0, [pc, #48]	; (8001808 <HAL_I2C_MspInit+0x8c>)
 80017d8:	f002 fb3e 	bl	8003e58 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017dc:	2300      	movs	r3, #0
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	4b08      	ldr	r3, [pc, #32]	; (8001804 <HAL_I2C_MspInit+0x88>)
 80017e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e4:	4a07      	ldr	r2, [pc, #28]	; (8001804 <HAL_I2C_MspInit+0x88>)
 80017e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017ea:	6413      	str	r3, [r2, #64]	; 0x40
 80017ec:	4b05      	ldr	r3, [pc, #20]	; (8001804 <HAL_I2C_MspInit+0x88>)
 80017ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80017f8:	bf00      	nop
 80017fa:	3728      	adds	r7, #40	; 0x28
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40005400 	.word	0x40005400
 8001804:	40023800 	.word	0x40023800
 8001808:	40020400 	.word	0x40020400

0800180c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001810:	f000 fcba 	bl	8002188 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001814:	f000 f81e 	bl	8001854 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001818:	f7ff fed6 	bl	80015c8 <MX_GPIO_Init>
  MX_DMA_Init();
 800181c:	f7ff fbce 	bl	8000fbc <MX_DMA_Init>
  MX_ADC1_Init();
 8001820:	f7ff fa7c 	bl	8000d1c <MX_ADC1_Init>
  MX_CRC_Init();
 8001824:	f7ff fb94 	bl	8000f50 <MX_CRC_Init>
  MX_SPI2_Init();
 8001828:	f000 f928 	bl	8001a7c <MX_SPI2_Init>
  MX_SPI3_Init();
 800182c:	f000 f95c 	bl	8001ae8 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 8001830:	f000 fbd8 	bl	8001fe4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001834:	f000 fbac 	bl	8001f90 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001838:	f7ff ff72 	bl	8001720 <MX_I2C1_Init>
  MX_RTC_Init();
 800183c:	f000 f8ae 	bl	800199c <MX_RTC_Init>
  MX_FATFS_Init();
 8001840:	f008 fa92 	bl	8009d68 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001844:	f00b fdf2 	bl	800d42c <osKernelInitialize>
  MX_FREERTOS_Init(); 
 8001848:	f7ff fc08 	bl	800105c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800184c:	f00b fe22 	bl	800d494 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001850:	e7fe      	b.n	8001850 <main+0x44>
	...

08001854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b09a      	sub	sp, #104	; 0x68
 8001858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800185a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800185e:	2230      	movs	r2, #48	; 0x30
 8001860:	2100      	movs	r1, #0
 8001862:	4618      	mov	r0, r3
 8001864:	f00f ff21 	bl	80116aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001868:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001878:	f107 030c 	add.w	r3, r7, #12
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
 8001886:	611a      	str	r2, [r3, #16]
 8001888:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	60bb      	str	r3, [r7, #8]
 800188e:	4b30      	ldr	r3, [pc, #192]	; (8001950 <SystemClock_Config+0xfc>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	4a2f      	ldr	r2, [pc, #188]	; (8001950 <SystemClock_Config+0xfc>)
 8001894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001898:	6413      	str	r3, [r2, #64]	; 0x40
 800189a:	4b2d      	ldr	r3, [pc, #180]	; (8001950 <SystemClock_Config+0xfc>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a2:	60bb      	str	r3, [r7, #8]
 80018a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018a6:	2300      	movs	r3, #0
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	4b2a      	ldr	r3, [pc, #168]	; (8001954 <SystemClock_Config+0x100>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a29      	ldr	r2, [pc, #164]	; (8001954 <SystemClock_Config+0x100>)
 80018b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	4b27      	ldr	r3, [pc, #156]	; (8001954 <SystemClock_Config+0x100>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018be:	607b      	str	r3, [r7, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80018c2:	2305      	movs	r3, #5
 80018c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80018cc:	2301      	movs	r3, #1
 80018ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018d0:	2302      	movs	r3, #2
 80018d2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018d8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 15;
 80018da:	230f      	movs	r3, #15
 80018dc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 144;
 80018de:	2390      	movs	r3, #144	; 0x90
 80018e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018e2:	2302      	movs	r3, #2
 80018e4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80018e6:	2305      	movs	r3, #5
 80018e8:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018ee:	4618      	mov	r0, r3
 80018f0:	f004 fc8a 	bl	8006208 <HAL_RCC_OscConfig>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80018fa:	f000 f83c 	bl	8001976 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018fe:	230f      	movs	r3, #15
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001902:	2301      	movs	r3, #1
 8001904:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001906:	2300      	movs	r3, #0
 8001908:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800190a:	2300      	movs	r3, #0
 800190c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800190e:	2300      	movs	r3, #0
 8001910:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001916:	2100      	movs	r1, #0
 8001918:	4618      	mov	r0, r3
 800191a:	f004 ff95 	bl	8006848 <HAL_RCC_ClockConfig>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001924:	f000 f827 	bl	8001976 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001928:	2302      	movs	r3, #2
 800192a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800192c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001930:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001932:	f107 030c 	add.w	r3, r7, #12
 8001936:	4618      	mov	r0, r3
 8001938:	f005 fa2c 	bl	8006d94 <HAL_RCCEx_PeriphCLKConfig>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001942:	f000 f818 	bl	8001976 <Error_Handler>
  }
}
 8001946:	bf00      	nop
 8001948:	3768      	adds	r7, #104	; 0x68
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40023800 	.word	0x40023800
 8001954:	40007000 	.word	0x40007000

08001958 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001968:	d101      	bne.n	800196e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800196a:	f000 fc2f 	bl	80021cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800197a:	bf00      	nop
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
	...

0800199c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 80019a2:	1d3b      	adds	r3, r7, #4
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80019b0:	2300      	movs	r3, #0
 80019b2:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80019b4:	4b24      	ldr	r3, [pc, #144]	; (8001a48 <MX_RTC_Init+0xac>)
 80019b6:	4a25      	ldr	r2, [pc, #148]	; (8001a4c <MX_RTC_Init+0xb0>)
 80019b8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80019ba:	4b23      	ldr	r3, [pc, #140]	; (8001a48 <MX_RTC_Init+0xac>)
 80019bc:	2200      	movs	r2, #0
 80019be:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80019c0:	4b21      	ldr	r3, [pc, #132]	; (8001a48 <MX_RTC_Init+0xac>)
 80019c2:	227f      	movs	r2, #127	; 0x7f
 80019c4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80019c6:	4b20      	ldr	r3, [pc, #128]	; (8001a48 <MX_RTC_Init+0xac>)
 80019c8:	22ff      	movs	r2, #255	; 0xff
 80019ca:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80019cc:	4b1e      	ldr	r3, [pc, #120]	; (8001a48 <MX_RTC_Init+0xac>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80019d2:	4b1d      	ldr	r3, [pc, #116]	; (8001a48 <MX_RTC_Init+0xac>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80019d8:	4b1b      	ldr	r3, [pc, #108]	; (8001a48 <MX_RTC_Init+0xac>)
 80019da:	2200      	movs	r2, #0
 80019dc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80019de:	481a      	ldr	r0, [pc, #104]	; (8001a48 <MX_RTC_Init+0xac>)
 80019e0:	f005 fbec 	bl	80071bc <HAL_RTC_Init>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80019ea:	f7ff ffc4 	bl	8001976 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80019fa:	2300      	movs	r3, #0
 80019fc:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80019fe:	2300      	movs	r3, #0
 8001a00:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001a02:	1d3b      	adds	r3, r7, #4
 8001a04:	2201      	movs	r2, #1
 8001a06:	4619      	mov	r1, r3
 8001a08:	480f      	ldr	r0, [pc, #60]	; (8001a48 <MX_RTC_Init+0xac>)
 8001a0a:	f005 fcbd 	bl	8007388 <HAL_RTC_SetTime>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001a14:	f7ff ffaf 	bl	8001976 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001a20:	2301      	movs	r3, #1
 8001a22:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001a28:	463b      	mov	r3, r7
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4806      	ldr	r0, [pc, #24]	; (8001a48 <MX_RTC_Init+0xac>)
 8001a30:	f005 fe16 	bl	8007660 <HAL_RTC_SetDate>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001a3a:	f7ff ff9c 	bl	8001976 <Error_Handler>
  }

}
 8001a3e:	bf00      	nop
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20006b54 	.word	0x20006b54
 8001a4c:	40002800 	.word	0x40002800

08001a50 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a05      	ldr	r2, [pc, #20]	; (8001a74 <HAL_RTC_MspInit+0x24>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d102      	bne.n	8001a68 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a62:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <HAL_RTC_MspInit+0x28>)
 8001a64:	2201      	movs	r2, #1
 8001a66:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	40002800 	.word	0x40002800
 8001a78:	42470e3c 	.word	0x42470e3c

08001a7c <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001a80:	4b17      	ldr	r3, [pc, #92]	; (8001ae0 <MX_SPI2_Init+0x64>)
 8001a82:	4a18      	ldr	r2, [pc, #96]	; (8001ae4 <MX_SPI2_Init+0x68>)
 8001a84:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a86:	4b16      	ldr	r3, [pc, #88]	; (8001ae0 <MX_SPI2_Init+0x64>)
 8001a88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a8c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a8e:	4b14      	ldr	r3, [pc, #80]	; (8001ae0 <MX_SPI2_Init+0x64>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a94:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <MX_SPI2_Init+0x64>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a9a:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <MX_SPI2_Init+0x64>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001aa0:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <MX_SPI2_Init+0x64>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <MX_SPI2_Init+0x64>)
 8001aa8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001aac:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001aae:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <MX_SPI2_Init+0x64>)
 8001ab0:	2238      	movs	r2, #56	; 0x38
 8001ab2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ab4:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <MX_SPI2_Init+0x64>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001aba:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <MX_SPI2_Init+0x64>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ac0:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <MX_SPI2_Init+0x64>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001ac6:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <MX_SPI2_Init+0x64>)
 8001ac8:	220a      	movs	r2, #10
 8001aca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001acc:	4804      	ldr	r0, [pc, #16]	; (8001ae0 <MX_SPI2_Init+0x64>)
 8001ace:	f005 ffe1 	bl	8007a94 <HAL_SPI_Init>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001ad8:	f7ff ff4d 	bl	8001976 <Error_Handler>
  }

}
 8001adc:	bf00      	nop
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20006b74 	.word	0x20006b74
 8001ae4:	40003800 	.word	0x40003800

08001ae8 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8001aec:	4b17      	ldr	r3, [pc, #92]	; (8001b4c <MX_SPI3_Init+0x64>)
 8001aee:	4a18      	ldr	r2, [pc, #96]	; (8001b50 <MX_SPI3_Init+0x68>)
 8001af0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001af2:	4b16      	ldr	r3, [pc, #88]	; (8001b4c <MX_SPI3_Init+0x64>)
 8001af4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001af8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001afa:	4b14      	ldr	r3, [pc, #80]	; (8001b4c <MX_SPI3_Init+0x64>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b00:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <MX_SPI3_Init+0x64>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b06:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <MX_SPI3_Init+0x64>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b0c:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <MX_SPI3_Init+0x64>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001b12:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <MX_SPI3_Init+0x64>)
 8001b14:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001b18:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001b1a:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <MX_SPI3_Init+0x64>)
 8001b1c:	2238      	movs	r2, #56	; 0x38
 8001b1e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b20:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <MX_SPI3_Init+0x64>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b26:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <MX_SPI3_Init+0x64>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b2c:	4b07      	ldr	r3, [pc, #28]	; (8001b4c <MX_SPI3_Init+0x64>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001b32:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <MX_SPI3_Init+0x64>)
 8001b34:	220a      	movs	r2, #10
 8001b36:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001b38:	4804      	ldr	r0, [pc, #16]	; (8001b4c <MX_SPI3_Init+0x64>)
 8001b3a:	f005 ffab 	bl	8007a94 <HAL_SPI_Init>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001b44:	f7ff ff17 	bl	8001976 <Error_Handler>
  }

}
 8001b48:	bf00      	nop
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20006bcc 	.word	0x20006bcc
 8001b50:	40003c00 	.word	0x40003c00

08001b54 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08c      	sub	sp, #48	; 0x30
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5c:	f107 031c 	add.w	r3, r7, #28
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a4a      	ldr	r2, [pc, #296]	; (8001c9c <HAL_SPI_MspInit+0x148>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d135      	bne.n	8001be2 <HAL_SPI_MspInit+0x8e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	61bb      	str	r3, [r7, #24]
 8001b7a:	4b49      	ldr	r3, [pc, #292]	; (8001ca0 <HAL_SPI_MspInit+0x14c>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	4a48      	ldr	r2, [pc, #288]	; (8001ca0 <HAL_SPI_MspInit+0x14c>)
 8001b80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b84:	6413      	str	r3, [r2, #64]	; 0x40
 8001b86:	4b46      	ldr	r3, [pc, #280]	; (8001ca0 <HAL_SPI_MspInit+0x14c>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b8e:	61bb      	str	r3, [r7, #24]
 8001b90:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	4b42      	ldr	r3, [pc, #264]	; (8001ca0 <HAL_SPI_MspInit+0x14c>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	4a41      	ldr	r2, [pc, #260]	; (8001ca0 <HAL_SPI_MspInit+0x14c>)
 8001b9c:	f043 0302 	orr.w	r3, r3, #2
 8001ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba2:	4b3f      	ldr	r3, [pc, #252]	; (8001ca0 <HAL_SPI_MspInit+0x14c>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	617b      	str	r3, [r7, #20]
 8001bac:	697b      	ldr	r3, [r7, #20]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001bae:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bc0:	2305      	movs	r3, #5
 8001bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc4:	f107 031c 	add.w	r3, r7, #28
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4836      	ldr	r0, [pc, #216]	; (8001ca4 <HAL_SPI_MspInit+0x150>)
 8001bcc:	f002 f944 	bl	8003e58 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2105      	movs	r1, #5
 8001bd4:	2024      	movs	r0, #36	; 0x24
 8001bd6:	f001 fb55 	bl	8003284 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001bda:	2024      	movs	r0, #36	; 0x24
 8001bdc:	f001 fb7e 	bl	80032dc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001be0:	e057      	b.n	8001c92 <HAL_SPI_MspInit+0x13e>
  else if(spiHandle->Instance==SPI3)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a30      	ldr	r2, [pc, #192]	; (8001ca8 <HAL_SPI_MspInit+0x154>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d152      	bne.n	8001c92 <HAL_SPI_MspInit+0x13e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001bec:	2300      	movs	r3, #0
 8001bee:	613b      	str	r3, [r7, #16]
 8001bf0:	4b2b      	ldr	r3, [pc, #172]	; (8001ca0 <HAL_SPI_MspInit+0x14c>)
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf4:	4a2a      	ldr	r2, [pc, #168]	; (8001ca0 <HAL_SPI_MspInit+0x14c>)
 8001bf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bfa:	6413      	str	r3, [r2, #64]	; 0x40
 8001bfc:	4b28      	ldr	r3, [pc, #160]	; (8001ca0 <HAL_SPI_MspInit+0x14c>)
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c04:	613b      	str	r3, [r7, #16]
 8001c06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	4b24      	ldr	r3, [pc, #144]	; (8001ca0 <HAL_SPI_MspInit+0x14c>)
 8001c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c10:	4a23      	ldr	r2, [pc, #140]	; (8001ca0 <HAL_SPI_MspInit+0x14c>)
 8001c12:	f043 0301 	orr.w	r3, r3, #1
 8001c16:	6313      	str	r3, [r2, #48]	; 0x30
 8001c18:	4b21      	ldr	r3, [pc, #132]	; (8001ca0 <HAL_SPI_MspInit+0x14c>)
 8001c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c24:	2300      	movs	r3, #0
 8001c26:	60bb      	str	r3, [r7, #8]
 8001c28:	4b1d      	ldr	r3, [pc, #116]	; (8001ca0 <HAL_SPI_MspInit+0x14c>)
 8001c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2c:	4a1c      	ldr	r2, [pc, #112]	; (8001ca0 <HAL_SPI_MspInit+0x14c>)
 8001c2e:	f043 0302 	orr.w	r3, r3, #2
 8001c32:	6313      	str	r3, [r2, #48]	; 0x30
 8001c34:	4b1a      	ldr	r3, [pc, #104]	; (8001ca0 <HAL_SPI_MspInit+0x14c>)
 8001c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c46:	2302      	movs	r3, #2
 8001c48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c52:	2306      	movs	r3, #6
 8001c54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c56:	f107 031c 	add.w	r3, r7, #28
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4813      	ldr	r0, [pc, #76]	; (8001cac <HAL_SPI_MspInit+0x158>)
 8001c5e:	f002 f8fb 	bl	8003e58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001c62:	2338      	movs	r3, #56	; 0x38
 8001c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c66:	2302      	movs	r3, #2
 8001c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c72:	2306      	movs	r3, #6
 8001c74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c76:	f107 031c 	add.w	r3, r7, #28
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4809      	ldr	r0, [pc, #36]	; (8001ca4 <HAL_SPI_MspInit+0x150>)
 8001c7e:	f002 f8eb 	bl	8003e58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8001c82:	2200      	movs	r2, #0
 8001c84:	2105      	movs	r1, #5
 8001c86:	2033      	movs	r0, #51	; 0x33
 8001c88:	f001 fafc 	bl	8003284 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001c8c:	2033      	movs	r0, #51	; 0x33
 8001c8e:	f001 fb25 	bl	80032dc <HAL_NVIC_EnableIRQ>
}
 8001c92:	bf00      	nop
 8001c94:	3730      	adds	r7, #48	; 0x30
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40003800 	.word	0x40003800
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40020400 	.word	0x40020400
 8001ca8:	40003c00 	.word	0x40003c00
 8001cac:	40020000 	.word	0x40020000

08001cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	607b      	str	r3, [r7, #4]
 8001cba:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <HAL_MspInit+0x54>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbe:	4a11      	ldr	r2, [pc, #68]	; (8001d04 <HAL_MspInit+0x54>)
 8001cc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cc6:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <HAL_MspInit+0x54>)
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cce:	607b      	str	r3, [r7, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	603b      	str	r3, [r7, #0]
 8001cd6:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <HAL_MspInit+0x54>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	4a0a      	ldr	r2, [pc, #40]	; (8001d04 <HAL_MspInit+0x54>)
 8001cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce2:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <HAL_MspInit+0x54>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cea:	603b      	str	r3, [r7, #0]
 8001cec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	210f      	movs	r1, #15
 8001cf2:	f06f 0001 	mvn.w	r0, #1
 8001cf6:	f001 fac5 	bl	8003284 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40023800 	.word	0x40023800

08001d08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08c      	sub	sp, #48	; 0x30
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001d14:	2300      	movs	r3, #0
 8001d16:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8001d18:	2200      	movs	r2, #0
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	201c      	movs	r0, #28
 8001d1e:	f001 fab1 	bl	8003284 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 8001d22:	201c      	movs	r0, #28
 8001d24:	f001 fada 	bl	80032dc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	4b1f      	ldr	r3, [pc, #124]	; (8001dac <HAL_InitTick+0xa4>)
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d30:	4a1e      	ldr	r2, [pc, #120]	; (8001dac <HAL_InitTick+0xa4>)
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	6413      	str	r3, [r2, #64]	; 0x40
 8001d38:	4b1c      	ldr	r3, [pc, #112]	; (8001dac <HAL_InitTick+0xa4>)
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d44:	f107 0210 	add.w	r2, r7, #16
 8001d48:	f107 0314 	add.w	r3, r7, #20
 8001d4c:	4611      	mov	r1, r2
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f004 ffee 	bl	8006d30 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d54:	f004 ffc4 	bl	8006ce0 <HAL_RCC_GetPCLK1Freq>
 8001d58:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d5c:	4a14      	ldr	r2, [pc, #80]	; (8001db0 <HAL_InitTick+0xa8>)
 8001d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d62:	0c9b      	lsrs	r3, r3, #18
 8001d64:	3b01      	subs	r3, #1
 8001d66:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001d68:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <HAL_InitTick+0xac>)
 8001d6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d6e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8001d70:	4b10      	ldr	r3, [pc, #64]	; (8001db4 <HAL_InitTick+0xac>)
 8001d72:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d76:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001d78:	4a0e      	ldr	r2, [pc, #56]	; (8001db4 <HAL_InitTick+0xac>)
 8001d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d7c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001d7e:	4b0d      	ldr	r3, [pc, #52]	; (8001db4 <HAL_InitTick+0xac>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d84:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <HAL_InitTick+0xac>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8001d8a:	480a      	ldr	r0, [pc, #40]	; (8001db4 <HAL_InitTick+0xac>)
 8001d8c:	f006 f8ce 	bl	8007f2c <HAL_TIM_Base_Init>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d104      	bne.n	8001da0 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8001d96:	4807      	ldr	r0, [pc, #28]	; (8001db4 <HAL_InitTick+0xac>)
 8001d98:	f006 f974 	bl	8008084 <HAL_TIM_Base_Start_IT>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	e000      	b.n	8001da2 <HAL_InitTick+0x9a>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3730      	adds	r7, #48	; 0x30
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40023800 	.word	0x40023800
 8001db0:	431bde83 	.word	0x431bde83
 8001db4:	20006c24 	.word	0x20006c24

08001db8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
	...

08001dc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	uint32_t xx = HAL_RTCEx_BKUPRead(&hrtc, 13);
 8001dce:	210d      	movs	r1, #13
 8001dd0:	4802      	ldr	r0, [pc, #8]	; (8001ddc <HardFault_Handler+0x14>)
 8001dd2:	f005 fe05 	bl	80079e0 <HAL_RTCEx_BKUPRead>
 8001dd6:	6078      	str	r0, [r7, #4]

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dd8:	e7fe      	b.n	8001dd8 <HardFault_Handler+0x10>
 8001dda:	bf00      	nop
 8001ddc:	20006b54 	.word	0x20006b54

08001de0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001de4:	e7fe      	b.n	8001de4 <MemManage_Handler+0x4>

08001de6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001de6:	b480      	push	{r7}
 8001de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dea:	e7fe      	b.n	8001dea <BusFault_Handler+0x4>

08001dec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001df0:	e7fe      	b.n	8001df0 <UsageFault_Handler+0x4>

08001df2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001df2:	b480      	push	{r7}
 8001df4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001e04:	2001      	movs	r0, #1
 8001e06:	f002 fb29 	bl	800445c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001e12:	2002      	movs	r0, #2
 8001e14:	f002 fb22 	bl	800445c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001e18:	bf00      	nop
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001e20:	4802      	ldr	r0, [pc, #8]	; (8001e2c <ADC_IRQHandler+0x10>)
 8001e22:	f000 fb73 	bl	800250c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20006a2c 	.word	0x20006a2c

08001e30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e34:	4802      	ldr	r0, [pc, #8]	; (8001e40 <TIM2_IRQHandler+0x10>)
 8001e36:	f006 f985 	bl	8008144 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20006c24 	.word	0x20006c24

08001e44 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001e48:	4802      	ldr	r0, [pc, #8]	; (8001e54 <SPI2_IRQHandler+0x10>)
 8001e4a:	f005 ff51 	bl	8007cf0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20006b74 	.word	0x20006b74

08001e58 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001e5c:	4802      	ldr	r0, [pc, #8]	; (8001e68 <SPI3_IRQHandler+0x10>)
 8001e5e:	f005 ff47 	bl	8007cf0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20006bcc 	.word	0x20006bcc

08001e6c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e70:	4803      	ldr	r0, [pc, #12]	; (8001e80 <DMA2_Stream0_IRQHandler+0x14>)
 8001e72:	f001 fd89 	bl	8003988 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

	z_HAL_ADC_DMA_irq_hendler();
 8001e76:	f7ff fb25 	bl	80014c4 <z_HAL_ADC_DMA_irq_hendler>

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20006a74 	.word	0x20006a74

08001e84 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001e88:	4802      	ldr	r0, [pc, #8]	; (8001e94 <OTG_FS_IRQHandler+0x10>)
 8001e8a:	f002 fd9b 	bl	80049c4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	2000759c 	.word	0x2000759c

08001e98 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001ea0:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <_sbrk+0x50>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d102      	bne.n	8001eae <_sbrk+0x16>
		heap_end = &end;
 8001ea8:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <_sbrk+0x50>)
 8001eaa:	4a10      	ldr	r2, [pc, #64]	; (8001eec <_sbrk+0x54>)
 8001eac:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001eae:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <_sbrk+0x50>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001eb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <_sbrk+0x50>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4413      	add	r3, r2
 8001ebc:	466a      	mov	r2, sp
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d907      	bls.n	8001ed2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001ec2:	f00f fbad 	bl	8011620 <__errno>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	230c      	movs	r3, #12
 8001eca:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed0:	e006      	b.n	8001ee0 <_sbrk+0x48>
	}

	heap_end += incr;
 8001ed2:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <_sbrk+0x50>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4413      	add	r3, r2
 8001eda:	4a03      	ldr	r2, [pc, #12]	; (8001ee8 <_sbrk+0x50>)
 8001edc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001ede:	68fb      	ldr	r3, [r7, #12]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	200000f8 	.word	0x200000f8
 8001eec:	20007868 	.word	0x20007868

08001ef0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ef4:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <SystemInit+0x28>)
 8001ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001efa:	4a07      	ldr	r2, [pc, #28]	; (8001f18 <SystemInit+0x28>)
 8001efc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f04:	4b04      	ldr	r3, [pc, #16]	; (8001f18 <SystemInit+0x28>)
 8001f06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f0a:	609a      	str	r2, [r3, #8]
#endif
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <ledon>:
#include "FreeRTOS.h"
#include "cmsis_os.h"
#include "adc.h"


void ledon(void){
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin, GPIO_PIN_RESET);
 8001f20:	2200      	movs	r2, #0
 8001f22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f26:	4802      	ldr	r0, [pc, #8]	; (8001f30 <ledon+0x14>)
 8001f28:	f002 fa3e 	bl	80043a8 <HAL_GPIO_WritePin>
}
 8001f2c:	bf00      	nop
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40020800 	.word	0x40020800

08001f34 <ledof>:

void ledof(void){
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin, GPIO_PIN_SET);
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f3e:	4802      	ldr	r0, [pc, #8]	; (8001f48 <ledof+0x14>)
 8001f40:	f002 fa32 	bl	80043a8 <HAL_GPIO_WritePin>
}
 8001f44:	bf00      	nop
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40020800 	.word	0x40020800

08001f4c <ledtogl>:

void ledtogl(void) {
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin);
 8001f50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f54:	4802      	ldr	r0, [pc, #8]	; (8001f60 <ledtogl+0x14>)
 8001f56:	f002 fa59 	bl	800440c <HAL_GPIO_TogglePin>
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40020800 	.word	0x40020800

08001f64 <trep>:

void trep(uint32_t tickova){
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
	ledtogl();
 8001f6c:	f7ff ffee 	bl	8001f4c <ledtogl>
	osDelay(tickova/2);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	085b      	lsrs	r3, r3, #1
 8001f74:	4618      	mov	r0, r3
 8001f76:	f00b fb69 	bl	800d64c <osDelay>
	ledtogl();
 8001f7a:	f7ff ffe7 	bl	8001f4c <ledtogl>
	osDelay(tickova/2);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	085b      	lsrs	r3, r3, #1
 8001f82:	4618      	mov	r0, r3
 8001f84:	f00b fb62 	bl	800d64c <osDelay>
}
 8001f88:	bf00      	nop
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001f94:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <MX_USART1_UART_Init+0x4c>)
 8001f96:	4a12      	ldr	r2, [pc, #72]	; (8001fe0 <MX_USART1_UART_Init+0x50>)
 8001f98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f9a:	4b10      	ldr	r3, [pc, #64]	; (8001fdc <MX_USART1_UART_Init+0x4c>)
 8001f9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fa0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fa2:	4b0e      	ldr	r3, [pc, #56]	; (8001fdc <MX_USART1_UART_Init+0x4c>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <MX_USART1_UART_Init+0x4c>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fae:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <MX_USART1_UART_Init+0x4c>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fb4:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <MX_USART1_UART_Init+0x4c>)
 8001fb6:	220c      	movs	r2, #12
 8001fb8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fba:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <MX_USART1_UART_Init+0x4c>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fc0:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <MX_USART1_UART_Init+0x4c>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8001fc6:	4805      	ldr	r0, [pc, #20]	; (8001fdc <MX_USART1_UART_Init+0x4c>)
 8001fc8:	f006 fb36 	bl	8008638 <HAL_HalfDuplex_Init>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001fd2:	f7ff fcd0 	bl	8001976 <Error_Handler>
  }

}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	20006c64 	.word	0x20006c64
 8001fe0:	40011000 	.word	0x40011000

08001fe4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001fe8:	4b11      	ldr	r3, [pc, #68]	; (8002030 <MX_USART2_UART_Init+0x4c>)
 8001fea:	4a12      	ldr	r2, [pc, #72]	; (8002034 <MX_USART2_UART_Init+0x50>)
 8001fec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001fee:	4b10      	ldr	r3, [pc, #64]	; (8002030 <MX_USART2_UART_Init+0x4c>)
 8001ff0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ff4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ff6:	4b0e      	ldr	r3, [pc, #56]	; (8002030 <MX_USART2_UART_Init+0x4c>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ffc:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <MX_USART2_UART_Init+0x4c>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002002:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <MX_USART2_UART_Init+0x4c>)
 8002004:	2200      	movs	r2, #0
 8002006:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002008:	4b09      	ldr	r3, [pc, #36]	; (8002030 <MX_USART2_UART_Init+0x4c>)
 800200a:	220c      	movs	r2, #12
 800200c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800200e:	4b08      	ldr	r3, [pc, #32]	; (8002030 <MX_USART2_UART_Init+0x4c>)
 8002010:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002014:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002016:	4b06      	ldr	r3, [pc, #24]	; (8002030 <MX_USART2_UART_Init+0x4c>)
 8002018:	2200      	movs	r2, #0
 800201a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800201c:	4804      	ldr	r0, [pc, #16]	; (8002030 <MX_USART2_UART_Init+0x4c>)
 800201e:	f006 fa55 	bl	80084cc <HAL_UART_Init>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8002028:	f7ff fca5 	bl	8001976 <Error_Handler>
  }

}
 800202c:	bf00      	nop
 800202e:	bd80      	pop	{r7, pc}
 8002030:	20006ca4 	.word	0x20006ca4
 8002034:	40004400 	.word	0x40004400

08002038 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b08c      	sub	sp, #48	; 0x30
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002040:	f107 031c 	add.w	r3, r7, #28
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	60da      	str	r2, [r3, #12]
 800204e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a32      	ldr	r2, [pc, #200]	; (8002120 <HAL_UART_MspInit+0xe8>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d12c      	bne.n	80020b4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	61bb      	str	r3, [r7, #24]
 800205e:	4b31      	ldr	r3, [pc, #196]	; (8002124 <HAL_UART_MspInit+0xec>)
 8002060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002062:	4a30      	ldr	r2, [pc, #192]	; (8002124 <HAL_UART_MspInit+0xec>)
 8002064:	f043 0310 	orr.w	r3, r3, #16
 8002068:	6453      	str	r3, [r2, #68]	; 0x44
 800206a:	4b2e      	ldr	r3, [pc, #184]	; (8002124 <HAL_UART_MspInit+0xec>)
 800206c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206e:	f003 0310 	and.w	r3, r3, #16
 8002072:	61bb      	str	r3, [r7, #24]
 8002074:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	617b      	str	r3, [r7, #20]
 800207a:	4b2a      	ldr	r3, [pc, #168]	; (8002124 <HAL_UART_MspInit+0xec>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	4a29      	ldr	r2, [pc, #164]	; (8002124 <HAL_UART_MspInit+0xec>)
 8002080:	f043 0302 	orr.w	r3, r3, #2
 8002084:	6313      	str	r3, [r2, #48]	; 0x30
 8002086:	4b27      	ldr	r3, [pc, #156]	; (8002124 <HAL_UART_MspInit+0xec>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	617b      	str	r3, [r7, #20]
 8002090:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002092:	2340      	movs	r3, #64	; 0x40
 8002094:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002096:	2312      	movs	r3, #18
 8002098:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800209e:	2303      	movs	r3, #3
 80020a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020a2:	2307      	movs	r3, #7
 80020a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a6:	f107 031c 	add.w	r3, r7, #28
 80020aa:	4619      	mov	r1, r3
 80020ac:	481e      	ldr	r0, [pc, #120]	; (8002128 <HAL_UART_MspInit+0xf0>)
 80020ae:	f001 fed3 	bl	8003e58 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80020b2:	e030      	b.n	8002116 <HAL_UART_MspInit+0xde>
  else if(uartHandle->Instance==USART2)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a1c      	ldr	r2, [pc, #112]	; (800212c <HAL_UART_MspInit+0xf4>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d12b      	bne.n	8002116 <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART2_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	613b      	str	r3, [r7, #16]
 80020c2:	4b18      	ldr	r3, [pc, #96]	; (8002124 <HAL_UART_MspInit+0xec>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	4a17      	ldr	r2, [pc, #92]	; (8002124 <HAL_UART_MspInit+0xec>)
 80020c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020cc:	6413      	str	r3, [r2, #64]	; 0x40
 80020ce:	4b15      	ldr	r3, [pc, #84]	; (8002124 <HAL_UART_MspInit+0xec>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	4b11      	ldr	r3, [pc, #68]	; (8002124 <HAL_UART_MspInit+0xec>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	4a10      	ldr	r2, [pc, #64]	; (8002124 <HAL_UART_MspInit+0xec>)
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ea:	4b0e      	ldr	r3, [pc, #56]	; (8002124 <HAL_UART_MspInit+0xec>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80020f6:	230f      	movs	r3, #15
 80020f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fa:	2302      	movs	r3, #2
 80020fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002102:	2303      	movs	r3, #3
 8002104:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002106:	2307      	movs	r3, #7
 8002108:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210a:	f107 031c 	add.w	r3, r7, #28
 800210e:	4619      	mov	r1, r3
 8002110:	4807      	ldr	r0, [pc, #28]	; (8002130 <HAL_UART_MspInit+0xf8>)
 8002112:	f001 fea1 	bl	8003e58 <HAL_GPIO_Init>
}
 8002116:	bf00      	nop
 8002118:	3730      	adds	r7, #48	; 0x30
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40011000 	.word	0x40011000
 8002124:	40023800 	.word	0x40023800
 8002128:	40020400 	.word	0x40020400
 800212c:	40004400 	.word	0x40004400
 8002130:	40020000 	.word	0x40020000

08002134 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002134:	f8df d034 	ldr.w	sp, [pc, #52]	; 800216c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002138:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800213a:	e003      	b.n	8002144 <LoopCopyDataInit>

0800213c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800213c:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800213e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002140:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002142:	3104      	adds	r1, #4

08002144 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002144:	480b      	ldr	r0, [pc, #44]	; (8002174 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002146:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002148:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800214a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800214c:	d3f6      	bcc.n	800213c <CopyDataInit>
  ldr  r2, =_sbss
 800214e:	4a0b      	ldr	r2, [pc, #44]	; (800217c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002150:	e002      	b.n	8002158 <LoopFillZerobss>

08002152 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002152:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002154:	f842 3b04 	str.w	r3, [r2], #4

08002158 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002158:	4b09      	ldr	r3, [pc, #36]	; (8002180 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800215a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800215c:	d3f9      	bcc.n	8002152 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800215e:	f7ff fec7 	bl	8001ef0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002162:	f00f fa63 	bl	801162c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002166:	f7ff fb51 	bl	800180c <main>
  bx  lr    
 800216a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800216c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002170:	08011d5c 	.word	0x08011d5c
  ldr  r0, =_sdata
 8002174:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002178:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 800217c:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 8002180:	20007864 	.word	0x20007864

08002184 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002184:	e7fe      	b.n	8002184 <DMA1_Stream0_IRQHandler>
	...

08002188 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800218c:	4b0e      	ldr	r3, [pc, #56]	; (80021c8 <HAL_Init+0x40>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a0d      	ldr	r2, [pc, #52]	; (80021c8 <HAL_Init+0x40>)
 8002192:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002196:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002198:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <HAL_Init+0x40>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a0a      	ldr	r2, [pc, #40]	; (80021c8 <HAL_Init+0x40>)
 800219e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021a4:	4b08      	ldr	r3, [pc, #32]	; (80021c8 <HAL_Init+0x40>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a07      	ldr	r2, [pc, #28]	; (80021c8 <HAL_Init+0x40>)
 80021aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021b0:	2003      	movs	r0, #3
 80021b2:	f001 f847 	bl	8003244 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021b6:	2000      	movs	r0, #0
 80021b8:	f7ff fda6 	bl	8001d08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021bc:	f7ff fd78 	bl	8001cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40023c00 	.word	0x40023c00

080021cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <HAL_IncTick+0x20>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	461a      	mov	r2, r3
 80021d6:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <HAL_IncTick+0x24>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4413      	add	r3, r2
 80021dc:	4a04      	ldr	r2, [pc, #16]	; (80021f0 <HAL_IncTick+0x24>)
 80021de:	6013      	str	r3, [r2, #0]
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	20000008 	.word	0x20000008
 80021f0:	20006ce4 	.word	0x20006ce4

080021f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  return uwTick;
 80021f8:	4b03      	ldr	r3, [pc, #12]	; (8002208 <HAL_GetTick+0x14>)
 80021fa:	681b      	ldr	r3, [r3, #0]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	20006ce4 	.word	0x20006ce4

0800220c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002214:	f7ff ffee 	bl	80021f4 <HAL_GetTick>
 8002218:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002224:	d005      	beq.n	8002232 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002226:	4b09      	ldr	r3, [pc, #36]	; (800224c <HAL_Delay+0x40>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	461a      	mov	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4413      	add	r3, r2
 8002230:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002232:	bf00      	nop
 8002234:	f7ff ffde 	bl	80021f4 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	429a      	cmp	r2, r3
 8002242:	d8f7      	bhi.n	8002234 <HAL_Delay+0x28>
  {
  }
}
 8002244:	bf00      	nop
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	20000008 	.word	0x20000008

08002250 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002258:	2300      	movs	r3, #0
 800225a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e147      	b.n	80024f6 <HAL_ADC_Init+0x2a6>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4aa5      	ldr	r2, [pc, #660]	; (8002500 <HAL_ADC_Init+0x2b0>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d004      	beq.n	800227a <HAL_ADC_Init+0x2a>
 8002270:	f240 1143 	movw	r1, #323	; 0x143
 8002274:	48a3      	ldr	r0, [pc, #652]	; (8002504 <HAL_ADC_Init+0x2b4>)
 8002276:	f7ff fb85 	bl	8001984 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d013      	beq.n	80022aa <HAL_ADC_Init+0x5a>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800228a:	d00e      	beq.n	80022aa <HAL_ADC_Init+0x5a>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002294:	d009      	beq.n	80022aa <HAL_ADC_Init+0x5a>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800229e:	d004      	beq.n	80022aa <HAL_ADC_Init+0x5a>
 80022a0:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80022a4:	4897      	ldr	r0, [pc, #604]	; (8002504 <HAL_ADC_Init+0x2b4>)
 80022a6:	f7ff fb6d 	bl	8001984 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d013      	beq.n	80022da <HAL_ADC_Init+0x8a>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022ba:	d00e      	beq.n	80022da <HAL_ADC_Init+0x8a>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022c4:	d009      	beq.n	80022da <HAL_ADC_Init+0x8a>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80022ce:	d004      	beq.n	80022da <HAL_ADC_Init+0x8a>
 80022d0:	f240 1145 	movw	r1, #325	; 0x145
 80022d4:	488b      	ldr	r0, [pc, #556]	; (8002504 <HAL_ADC_Init+0x2b4>)
 80022d6:	f7ff fb55 	bl	8001984 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d008      	beq.n	80022f4 <HAL_ADC_Init+0xa4>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d004      	beq.n	80022f4 <HAL_ADC_Init+0xa4>
 80022ea:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80022ee:	4885      	ldr	r0, [pc, #532]	; (8002504 <HAL_ADC_Init+0x2b4>)
 80022f0:	f7ff fb48 	bl	8001984 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	7e1b      	ldrb	r3, [r3, #24]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d008      	beq.n	800230e <HAL_ADC_Init+0xbe>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	7e1b      	ldrb	r3, [r3, #24]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d004      	beq.n	800230e <HAL_ADC_Init+0xbe>
 8002304:	f240 1147 	movw	r1, #327	; 0x147
 8002308:	487e      	ldr	r0, [pc, #504]	; (8002504 <HAL_ADC_Init+0x2b4>)
 800230a:	f7ff fb3b 	bl	8001984 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002312:	2b00      	cmp	r3, #0
 8002314:	d054      	beq.n	80023c0 <HAL_ADC_Init+0x170>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800231e:	d04f      	beq.n	80023c0 <HAL_ADC_Init+0x170>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002324:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002328:	d04a      	beq.n	80023c0 <HAL_ADC_Init+0x170>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002332:	d045      	beq.n	80023c0 <HAL_ADC_Init+0x170>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002338:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800233c:	d040      	beq.n	80023c0 <HAL_ADC_Init+0x170>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002342:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002346:	d03b      	beq.n	80023c0 <HAL_ADC_Init+0x170>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8002350:	d036      	beq.n	80023c0 <HAL_ADC_Init+0x170>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002356:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 800235a:	d031      	beq.n	80023c0 <HAL_ADC_Init+0x170>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002360:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002364:	d02c      	beq.n	80023c0 <HAL_ADC_Init+0x170>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236a:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 800236e:	d027      	beq.n	80023c0 <HAL_ADC_Init+0x170>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002374:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8002378:	d022      	beq.n	80023c0 <HAL_ADC_Init+0x170>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237e:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 8002382:	d01d      	beq.n	80023c0 <HAL_ADC_Init+0x170>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002388:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800238c:	d018      	beq.n	80023c0 <HAL_ADC_Init+0x170>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002392:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 8002396:	d013      	beq.n	80023c0 <HAL_ADC_Init+0x170>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239c:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80023a0:	d00e      	beq.n	80023c0 <HAL_ADC_Init+0x170>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80023aa:	d009      	beq.n	80023c0 <HAL_ADC_Init+0x170>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b0:	4a55      	ldr	r2, [pc, #340]	; (8002508 <HAL_ADC_Init+0x2b8>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d004      	beq.n	80023c0 <HAL_ADC_Init+0x170>
 80023b6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80023ba:	4852      	ldr	r0, [pc, #328]	; (8002504 <HAL_ADC_Init+0x2b4>)
 80023bc:	f7ff fae2 	bl	8001984 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d009      	beq.n	80023dc <HAL_ADC_Init+0x18c>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023d0:	d004      	beq.n	80023dc <HAL_ADC_Init+0x18c>
 80023d2:	f240 1149 	movw	r1, #329	; 0x149
 80023d6:	484b      	ldr	r0, [pc, #300]	; (8002504 <HAL_ADC_Init+0x2b4>)
 80023d8:	f7ff fad4 	bl	8001984 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d003      	beq.n	80023ec <HAL_ADC_Init+0x19c>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	69db      	ldr	r3, [r3, #28]
 80023e8:	2b10      	cmp	r3, #16
 80023ea:	d904      	bls.n	80023f6 <HAL_ADC_Init+0x1a6>
 80023ec:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80023f0:	4844      	ldr	r0, [pc, #272]	; (8002504 <HAL_ADC_Init+0x2b4>)
 80023f2:	f7ff fac7 	bl	8001984 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d009      	beq.n	8002414 <HAL_ADC_Init+0x1c4>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002406:	2b01      	cmp	r3, #1
 8002408:	d004      	beq.n	8002414 <HAL_ADC_Init+0x1c4>
 800240a:	f240 114b 	movw	r1, #331	; 0x14b
 800240e:	483d      	ldr	r0, [pc, #244]	; (8002504 <HAL_ADC_Init+0x2b4>)
 8002410:	f7ff fab8 	bl	8001984 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d00c      	beq.n	8002436 <HAL_ADC_Init+0x1e6>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d008      	beq.n	8002436 <HAL_ADC_Init+0x1e6>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	2b02      	cmp	r3, #2
 800242a:	d004      	beq.n	8002436 <HAL_ADC_Init+0x1e6>
 800242c:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8002430:	4834      	ldr	r0, [pc, #208]	; (8002504 <HAL_ADC_Init+0x2b4>)
 8002432:	f7ff faa7 	bl	8001984 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 3020 	ldrb.w	r3, [r3, #32]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d009      	beq.n	8002454 <HAL_ADC_Init+0x204>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d004      	beq.n	8002454 <HAL_ADC_Init+0x204>
 800244a:	f240 114d 	movw	r1, #333	; 0x14d
 800244e:	482d      	ldr	r0, [pc, #180]	; (8002504 <HAL_ADC_Init+0x2b4>)
 8002450:	f7ff fa98 	bl	8001984 <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002458:	4a2b      	ldr	r2, [pc, #172]	; (8002508 <HAL_ADC_Init+0x2b8>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d017      	beq.n	800248e <HAL_ADC_Init+0x23e>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002462:	2b00      	cmp	r3, #0
 8002464:	d013      	beq.n	800248e <HAL_ADC_Init+0x23e>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800246e:	d00e      	beq.n	800248e <HAL_ADC_Init+0x23e>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002474:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002478:	d009      	beq.n	800248e <HAL_ADC_Init+0x23e>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002482:	d004      	beq.n	800248e <HAL_ADC_Init+0x23e>
 8002484:	f240 1151 	movw	r1, #337	; 0x151
 8002488:	481e      	ldr	r0, [pc, #120]	; (8002504 <HAL_ADC_Init+0x2b4>)
 800248a:	f7ff fa7b 	bl	8001984 <assert_failed>
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	2b00      	cmp	r3, #0
 8002494:	d109      	bne.n	80024aa <HAL_ADC_Init+0x25a>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7fe fcda 	bl	8000e50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	f003 0310 	and.w	r3, r3, #16
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d118      	bne.n	80024e8 <HAL_ADC_Init+0x298>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024be:	f023 0302 	bic.w	r3, r3, #2
 80024c2:	f043 0202 	orr.w	r2, r3, #2
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 fc76 	bl	8002dbc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	f023 0303 	bic.w	r3, r3, #3
 80024de:	f043 0201 	orr.w	r2, r3, #1
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	641a      	str	r2, [r3, #64]	; 0x40
 80024e6:	e001      	b.n	80024ec <HAL_ADC_Init+0x29c>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80024f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40012000 	.word	0x40012000
 8002504:	080118bc 	.word	0x080118bc
 8002508:	0f000001 	.word	0x0f000001

0800250c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002514:	2300      	movs	r3, #0
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	2300      	movs	r3, #0
 800251a:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	7e1b      	ldrb	r3, [r3, #24]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d008      	beq.n	8002536 <HAL_ADC_IRQHandler+0x2a>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	7e1b      	ldrb	r3, [r3, #24]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d004      	beq.n	8002536 <HAL_ADC_IRQHandler+0x2a>
 800252c:	f240 419d 	movw	r1, #1181	; 0x49d
 8002530:	4860      	ldr	r0, [pc, #384]	; (80026b4 <HAL_ADC_IRQHandler+0x1a8>)
 8002532:	f7ff fa27 	bl	8001984 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <HAL_ADC_IRQHandler+0x3a>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	2b10      	cmp	r3, #16
 8002544:	d904      	bls.n	8002550 <HAL_ADC_IRQHandler+0x44>
 8002546:	f240 419e 	movw	r1, #1182	; 0x49e
 800254a:	485a      	ldr	r0, [pc, #360]	; (80026b4 <HAL_ADC_IRQHandler+0x1a8>)
 800254c:	f7ff fa1a 	bl	8001984 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d00c      	beq.n	8002572 <HAL_ADC_IRQHandler+0x66>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d008      	beq.n	8002572 <HAL_ADC_IRQHandler+0x66>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	695b      	ldr	r3, [r3, #20]
 8002564:	2b02      	cmp	r3, #2
 8002566:	d004      	beq.n	8002572 <HAL_ADC_IRQHandler+0x66>
 8002568:	f240 419f 	movw	r1, #1183	; 0x49f
 800256c:	4851      	ldr	r0, [pc, #324]	; (80026b4 <HAL_ADC_IRQHandler+0x1a8>)
 800256e:	f7ff fa09 	bl	8001984 <assert_failed>
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b02      	cmp	r3, #2
 800257e:	bf0c      	ite	eq
 8002580:	2301      	moveq	r3, #1
 8002582:	2300      	movne	r3, #0
 8002584:	b2db      	uxtb	r3, r3
 8002586:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f003 0320 	and.w	r3, r3, #32
 8002592:	2b20      	cmp	r3, #32
 8002594:	bf0c      	ite	eq
 8002596:	2301      	moveq	r3, #1
 8002598:	2300      	movne	r3, #0
 800259a:	b2db      	uxtb	r3, r3
 800259c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d049      	beq.n	8002638 <HAL_ADC_IRQHandler+0x12c>
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d046      	beq.n	8002638 <HAL_ADC_IRQHandler+0x12c>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	f003 0310 	and.w	r3, r3, #16
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d105      	bne.n	80025c2 <HAL_ADC_IRQHandler+0xb6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d12b      	bne.n	8002628 <HAL_ADC_IRQHandler+0x11c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d127      	bne.n	8002628 <HAL_ADC_IRQHandler+0x11c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025de:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d006      	beq.n	80025f4 <HAL_ADC_IRQHandler+0xe8>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d119      	bne.n	8002628 <HAL_ADC_IRQHandler+0x11c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 0220 	bic.w	r2, r2, #32
 8002602:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002608:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002614:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d105      	bne.n	8002628 <HAL_ADC_IRQHandler+0x11c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002620:	f043 0201 	orr.w	r2, r3, #1
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 fa31 	bl	8002a90 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f06f 0212 	mvn.w	r2, #18
 8002636:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0304 	and.w	r3, r3, #4
 8002642:	2b04      	cmp	r3, #4
 8002644:	bf0c      	ite	eq
 8002646:	2301      	moveq	r3, #1
 8002648:	2300      	movne	r3, #0
 800264a:	b2db      	uxtb	r3, r3
 800264c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002658:	2b80      	cmp	r3, #128	; 0x80
 800265a:	bf0c      	ite	eq
 800265c:	2301      	moveq	r3, #1
 800265e:	2300      	movne	r3, #0
 8002660:	b2db      	uxtb	r3, r3
 8002662:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d05a      	beq.n	8002720 <HAL_ADC_IRQHandler+0x214>
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d057      	beq.n	8002720 <HAL_ADC_IRQHandler+0x214>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002674:	f003 0310 	and.w	r3, r3, #16
 8002678:	2b00      	cmp	r3, #0
 800267a:	d105      	bne.n	8002688 <HAL_ADC_IRQHandler+0x17c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002680:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d13c      	bne.n	8002710 <HAL_ADC_IRQHandler+0x204>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800269c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d009      	beq.n	80026b8 <HAL_ADC_IRQHandler+0x1ac>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d12e      	bne.n	8002710 <HAL_ADC_IRQHandler+0x204>
 80026b2:	e001      	b.n	80026b8 <HAL_ADC_IRQHandler+0x1ac>
 80026b4:	080118bc 	.word	0x080118bc
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d124      	bne.n	8002710 <HAL_ADC_IRQHandler+0x204>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d11d      	bne.n	8002710 <HAL_ADC_IRQHandler+0x204>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d119      	bne.n	8002710 <HAL_ADC_IRQHandler+0x204>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	685a      	ldr	r2, [r3, #4]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026ea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002700:	2b00      	cmp	r3, #0
 8002702:	d105      	bne.n	8002710 <HAL_ADC_IRQHandler+0x204>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	f043 0201 	orr.w	r2, r3, #1
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 fcdf 	bl	80030d4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f06f 020c 	mvn.w	r2, #12
 800271e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b01      	cmp	r3, #1
 800272c:	bf0c      	ite	eq
 800272e:	2301      	moveq	r3, #1
 8002730:	2300      	movne	r3, #0
 8002732:	b2db      	uxtb	r3, r3
 8002734:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002740:	2b40      	cmp	r3, #64	; 0x40
 8002742:	bf0c      	ite	eq
 8002744:	2301      	moveq	r3, #1
 8002746:	2300      	movne	r3, #0
 8002748:	b2db      	uxtb	r3, r3
 800274a:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d017      	beq.n	8002782 <HAL_ADC_IRQHandler+0x276>
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d014      	beq.n	8002782 <HAL_ADC_IRQHandler+0x276>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b01      	cmp	r3, #1
 8002764:	d10d      	bne.n	8002782 <HAL_ADC_IRQHandler+0x276>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f9a0 	bl	8002ab8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f06f 0201 	mvn.w	r2, #1
 8002780:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0320 	and.w	r3, r3, #32
 800278c:	2b20      	cmp	r3, #32
 800278e:	bf0c      	ite	eq
 8002790:	2301      	moveq	r3, #1
 8002792:	2300      	movne	r3, #0
 8002794:	b2db      	uxtb	r3, r3
 8002796:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027a6:	bf0c      	ite	eq
 80027a8:	2301      	moveq	r3, #1
 80027aa:	2300      	movne	r3, #0
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d015      	beq.n	80027e2 <HAL_ADC_IRQHandler+0x2d6>
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d012      	beq.n	80027e2 <HAL_ADC_IRQHandler+0x2d6>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c0:	f043 0202 	orr.w	r2, r3, #2
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f06f 0220 	mvn.w	r2, #32
 80027d0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f97a 	bl	8002acc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f06f 0220 	mvn.w	r2, #32
 80027e0:	601a      	str	r2, [r3, #0]
  }
}
 80027e2:	bf00      	nop
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop

080027ec <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80027f8:	2300      	movs	r3, #0
 80027fa:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	7e1b      	ldrb	r3, [r3, #24]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d008      	beq.n	8002816 <HAL_ADC_Start_DMA+0x2a>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	7e1b      	ldrb	r3, [r3, #24]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d004      	beq.n	8002816 <HAL_ADC_Start_DMA+0x2a>
 800280c:	f44f 61a8 	mov.w	r1, #1344	; 0x540
 8002810:	486b      	ldr	r0, [pc, #428]	; (80029c0 <HAL_ADC_Start_DMA+0x1d4>)
 8002812:	f7ff f8b7 	bl	8001984 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281a:	2b00      	cmp	r3, #0
 800281c:	d013      	beq.n	8002846 <HAL_ADC_Start_DMA+0x5a>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002822:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002826:	d00e      	beq.n	8002846 <HAL_ADC_Start_DMA+0x5a>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002830:	d009      	beq.n	8002846 <HAL_ADC_Start_DMA+0x5a>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002836:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800283a:	d004      	beq.n	8002846 <HAL_ADC_Start_DMA+0x5a>
 800283c:	f240 5141 	movw	r1, #1345	; 0x541
 8002840:	485f      	ldr	r0, [pc, #380]	; (80029c0 <HAL_ADC_Start_DMA+0x1d4>)
 8002842:	f7ff f89f 	bl	8001984 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800284c:	2b01      	cmp	r3, #1
 800284e:	d101      	bne.n	8002854 <HAL_ADC_Start_DMA+0x68>
 8002850:	2302      	movs	r3, #2
 8002852:	e0b1      	b.n	80029b8 <HAL_ADC_Start_DMA+0x1cc>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b01      	cmp	r3, #1
 8002868:	d018      	beq.n	800289c <HAL_ADC_Start_DMA+0xb0>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f042 0201 	orr.w	r2, r2, #1
 8002878:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800287a:	4b52      	ldr	r3, [pc, #328]	; (80029c4 <HAL_ADC_Start_DMA+0x1d8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a52      	ldr	r2, [pc, #328]	; (80029c8 <HAL_ADC_Start_DMA+0x1dc>)
 8002880:	fba2 2303 	umull	r2, r3, r2, r3
 8002884:	0c9a      	lsrs	r2, r3, #18
 8002886:	4613      	mov	r3, r2
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	4413      	add	r3, r2
 800288c:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800288e:	e002      	b.n	8002896 <HAL_ADC_Start_DMA+0xaa>
    {
      counter--;
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	3b01      	subs	r3, #1
 8002894:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1f9      	bne.n	8002890 <HAL_ADC_Start_DMA+0xa4>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	f040 8085 	bne.w	80029b6 <HAL_ADC_Start_DMA+0x1ca>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80028b4:	f023 0301 	bic.w	r3, r3, #1
 80028b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d007      	beq.n	80028de <HAL_ADC_Start_DMA+0xf2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028ea:	d106      	bne.n	80028fa <HAL_ADC_Start_DMA+0x10e>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f0:	f023 0206 	bic.w	r2, r3, #6
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	645a      	str	r2, [r3, #68]	; 0x44
 80028f8:	e002      	b.n	8002900 <HAL_ADC_Start_DMA+0x114>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002908:	4b30      	ldr	r3, [pc, #192]	; (80029cc <HAL_ADC_Start_DMA+0x1e0>)
 800290a:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002910:	4a2f      	ldr	r2, [pc, #188]	; (80029d0 <HAL_ADC_Start_DMA+0x1e4>)
 8002912:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002918:	4a2e      	ldr	r2, [pc, #184]	; (80029d4 <HAL_ADC_Start_DMA+0x1e8>)
 800291a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002920:	4a2d      	ldr	r2, [pc, #180]	; (80029d8 <HAL_ADC_Start_DMA+0x1ec>)
 8002922:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800292c:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800293c:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800294c:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	334c      	adds	r3, #76	; 0x4c
 8002958:	4619      	mov	r1, r3
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f000 ff1b 	bl	8003798 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f003 031f 	and.w	r3, r3, #31
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10f      	bne.n	800298e <HAL_ADC_Start_DMA+0x1a2>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d11c      	bne.n	80029b6 <HAL_ADC_Start_DMA+0x1ca>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800298a:	609a      	str	r2, [r3, #8]
 800298c:	e013      	b.n	80029b6 <HAL_ADC_Start_DMA+0x1ca>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a12      	ldr	r2, [pc, #72]	; (80029dc <HAL_ADC_Start_DMA+0x1f0>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d10e      	bne.n	80029b6 <HAL_ADC_Start_DMA+0x1ca>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d107      	bne.n	80029b6 <HAL_ADC_Start_DMA+0x1ca>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029b4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	080118bc 	.word	0x080118bc
 80029c4:	20000000 	.word	0x20000000
 80029c8:	431bde83 	.word	0x431bde83
 80029cc:	40012300 	.word	0x40012300
 80029d0:	08002fd1 	.word	0x08002fd1
 80029d4:	0800308b 	.word	0x0800308b
 80029d8:	080030a7 	.word	0x080030a7
 80029dc:	40012000 	.word	0x40012000

080029e0 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029e8:	2300      	movs	r3, #0
 80029ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a25      	ldr	r2, [pc, #148]	; (8002a88 <HAL_ADC_Stop_DMA+0xa8>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d004      	beq.n	8002a00 <HAL_ADC_Stop_DMA+0x20>
 80029f6:	f240 51c4 	movw	r1, #1476	; 0x5c4
 80029fa:	4824      	ldr	r0, [pc, #144]	; (8002a8c <HAL_ADC_Stop_DMA+0xac>)
 80029fc:	f7fe ffc2 	bl	8001984 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d101      	bne.n	8002a0e <HAL_ADC_Stop_DMA+0x2e>
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	e038      	b.n	8002a80 <HAL_ADC_Stop_DMA+0xa0>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 0201 	bic.w	r2, r2, #1
 8002a24:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d120      	bne.n	8002a76 <HAL_ADC_Stop_DMA+0x96>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	689a      	ldr	r2, [r3, #8]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a42:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f000 ff0b 	bl	8003864 <HAL_DMA_Abort>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002a60:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a6a:	f023 0301 	bic.w	r3, r3, #1
 8002a6e:	f043 0201 	orr.w	r2, r3, #1
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40012000 	.word	0x40012000
 8002a8c:	080118bc 	.word	0x080118bc

08002a90 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002aea:	2300      	movs	r3, #0
 8002aec:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2b12      	cmp	r3, #18
 8002af4:	d904      	bls.n	8002b00 <HAL_ADC_ConfigChannel+0x20>
 8002af6:	f44f 61cb 	mov.w	r1, #1624	; 0x658
 8002afa:	486f      	ldr	r0, [pc, #444]	; (8002cb8 <HAL_ADC_ConfigChannel+0x1d8>)
 8002afc:	f7fe ff42 	bl	8001984 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d003      	beq.n	8002b10 <HAL_ADC_ConfigChannel+0x30>
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	2b10      	cmp	r3, #16
 8002b0e:	d904      	bls.n	8002b1a <HAL_ADC_ConfigChannel+0x3a>
 8002b10:	f240 6159 	movw	r1, #1625	; 0x659
 8002b14:	4868      	ldr	r0, [pc, #416]	; (8002cb8 <HAL_ADC_ConfigChannel+0x1d8>)
 8002b16:	f7fe ff35 	bl	8001984 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d020      	beq.n	8002b64 <HAL_ADC_ConfigChannel+0x84>
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d01c      	beq.n	8002b64 <HAL_ADC_ConfigChannel+0x84>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d018      	beq.n	8002b64 <HAL_ADC_ConfigChannel+0x84>
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	2b03      	cmp	r3, #3
 8002b38:	d014      	beq.n	8002b64 <HAL_ADC_ConfigChannel+0x84>
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d010      	beq.n	8002b64 <HAL_ADC_ConfigChannel+0x84>
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	2b05      	cmp	r3, #5
 8002b48:	d00c      	beq.n	8002b64 <HAL_ADC_ConfigChannel+0x84>
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	2b06      	cmp	r3, #6
 8002b50:	d008      	beq.n	8002b64 <HAL_ADC_ConfigChannel+0x84>
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	2b07      	cmp	r3, #7
 8002b58:	d004      	beq.n	8002b64 <HAL_ADC_ConfigChannel+0x84>
 8002b5a:	f240 615a 	movw	r1, #1626	; 0x65a
 8002b5e:	4856      	ldr	r0, [pc, #344]	; (8002cb8 <HAL_ADC_ConfigChannel+0x1d8>)
 8002b60:	f7fe ff10 	bl	8001984 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d101      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0x92>
 8002b6e:	2302      	movs	r3, #2
 8002b70:	e115      	b.n	8002d9e <HAL_ADC_ConfigChannel+0x2be>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2b09      	cmp	r3, #9
 8002b80:	d925      	bls.n	8002bce <HAL_ADC_ConfigChannel+0xee>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68d9      	ldr	r1, [r3, #12]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	461a      	mov	r2, r3
 8002b90:	4613      	mov	r3, r2
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	4413      	add	r3, r2
 8002b96:	3b1e      	subs	r3, #30
 8002b98:	2207      	movs	r2, #7
 8002b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9e:	43da      	mvns	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	400a      	ands	r2, r1
 8002ba6:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68d9      	ldr	r1, [r3, #12]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	689a      	ldr	r2, [r3, #8]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	4618      	mov	r0, r3
 8002bba:	4603      	mov	r3, r0
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	4403      	add	r3, r0
 8002bc0:	3b1e      	subs	r3, #30
 8002bc2:	409a      	lsls	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	60da      	str	r2, [r3, #12]
 8002bcc:	e022      	b.n	8002c14 <HAL_ADC_ConfigChannel+0x134>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	6919      	ldr	r1, [r3, #16]
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	461a      	mov	r2, r3
 8002bdc:	4613      	mov	r3, r2
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	4413      	add	r3, r2
 8002be2:	2207      	movs	r2, #7
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	43da      	mvns	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	400a      	ands	r2, r1
 8002bf0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	6919      	ldr	r1, [r3, #16]
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	4618      	mov	r0, r3
 8002c04:	4603      	mov	r3, r0
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	4403      	add	r3, r0
 8002c0a:	409a      	lsls	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	2b06      	cmp	r3, #6
 8002c1a:	d824      	bhi.n	8002c66 <HAL_ADC_ConfigChannel+0x186>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	4613      	mov	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	3b05      	subs	r3, #5
 8002c2e:	221f      	movs	r2, #31
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	43da      	mvns	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	400a      	ands	r2, r1
 8002c3c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685a      	ldr	r2, [r3, #4]
 8002c50:	4613      	mov	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	3b05      	subs	r3, #5
 8002c58:	fa00 f203 	lsl.w	r2, r0, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	430a      	orrs	r2, r1
 8002c62:	635a      	str	r2, [r3, #52]	; 0x34
 8002c64:	e04e      	b.n	8002d04 <HAL_ADC_ConfigChannel+0x224>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2b0c      	cmp	r3, #12
 8002c6c:	d826      	bhi.n	8002cbc <HAL_ADC_ConfigChannel+0x1dc>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3b23      	subs	r3, #35	; 0x23
 8002c80:	221f      	movs	r2, #31
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	43da      	mvns	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	400a      	ands	r2, r1
 8002c8e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3b23      	subs	r3, #35	; 0x23
 8002caa:	fa00 f203 	lsl.w	r2, r0, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	631a      	str	r2, [r3, #48]	; 0x30
 8002cb6:	e025      	b.n	8002d04 <HAL_ADC_ConfigChannel+0x224>
 8002cb8:	080118bc 	.word	0x080118bc
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	4413      	add	r3, r2
 8002ccc:	3b41      	subs	r3, #65	; 0x41
 8002cce:	221f      	movs	r2, #31
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	43da      	mvns	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	400a      	ands	r2, r1
 8002cdc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	4618      	mov	r0, r3
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685a      	ldr	r2, [r3, #4]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4413      	add	r3, r2
 8002cf6:	3b41      	subs	r3, #65	; 0x41
 8002cf8:	fa00 f203 	lsl.w	r2, r0, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	430a      	orrs	r2, r1
 8002d02:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d04:	4b28      	ldr	r3, [pc, #160]	; (8002da8 <HAL_ADC_ConfigChannel+0x2c8>)
 8002d06:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a27      	ldr	r2, [pc, #156]	; (8002dac <HAL_ADC_ConfigChannel+0x2cc>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d10f      	bne.n	8002d32 <HAL_ADC_ConfigChannel+0x252>
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2b12      	cmp	r3, #18
 8002d18:	d10b      	bne.n	8002d32 <HAL_ADC_ConfigChannel+0x252>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a1d      	ldr	r2, [pc, #116]	; (8002dac <HAL_ADC_ConfigChannel+0x2cc>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d12b      	bne.n	8002d94 <HAL_ADC_ConfigChannel+0x2b4>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a1b      	ldr	r2, [pc, #108]	; (8002db0 <HAL_ADC_ConfigChannel+0x2d0>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d003      	beq.n	8002d4e <HAL_ADC_ConfigChannel+0x26e>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2b11      	cmp	r3, #17
 8002d4c:	d122      	bne.n	8002d94 <HAL_ADC_ConfigChannel+0x2b4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a11      	ldr	r2, [pc, #68]	; (8002db0 <HAL_ADC_ConfigChannel+0x2d0>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d111      	bne.n	8002d94 <HAL_ADC_ConfigChannel+0x2b4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d70:	4b10      	ldr	r3, [pc, #64]	; (8002db4 <HAL_ADC_ConfigChannel+0x2d4>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a10      	ldr	r2, [pc, #64]	; (8002db8 <HAL_ADC_ConfigChannel+0x2d8>)
 8002d76:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7a:	0c9a      	lsrs	r2, r3, #18
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d86:	e002      	b.n	8002d8e <HAL_ADC_ConfigChannel+0x2ae>
      {
        counter--;
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1f9      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x2a8>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	40012300 	.word	0x40012300
 8002dac:	40012000 	.word	0x40012000
 8002db0:	10000012 	.word	0x10000012
 8002db4:	20000000 	.word	0x20000000
 8002db8:	431bde83 	.word	0x431bde83

08002dbc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002dc4:	4b7f      	ldr	r3, [pc, #508]	; (8002fc4 <ADC_Init+0x208>)
 8002dc6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002df0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6859      	ldr	r1, [r3, #4]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	021a      	lsls	r2, r3, #8
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002e14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6859      	ldr	r1, [r3, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	430a      	orrs	r2, r1
 8002e26:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6899      	ldr	r1, [r3, #8]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	68da      	ldr	r2, [r3, #12]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4e:	4a5e      	ldr	r2, [pc, #376]	; (8002fc8 <ADC_Init+0x20c>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d022      	beq.n	8002e9a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e62:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6899      	ldr	r1, [r3, #8]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6899      	ldr	r1, [r3, #8]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	430a      	orrs	r2, r1
 8002e96:	609a      	str	r2, [r3, #8]
 8002e98:	e00f      	b.n	8002eba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ea8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002eb8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 0202 	bic.w	r2, r2, #2
 8002ec8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6899      	ldr	r1, [r3, #8]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	7e1b      	ldrb	r3, [r3, #24]
 8002ed4:	005a      	lsls	r2, r3, #1
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d028      	beq.n	8002f3a <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d003      	beq.n	8002ef8 <ADC_Init+0x13c>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef4:	2b08      	cmp	r3, #8
 8002ef6:	d904      	bls.n	8002f02 <ADC_Init+0x146>
 8002ef8:	f240 7175 	movw	r1, #1909	; 0x775
 8002efc:	4833      	ldr	r0, [pc, #204]	; (8002fcc <ADC_Init+0x210>)
 8002efe:	f7fe fd41 	bl	8001984 <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f10:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	685a      	ldr	r2, [r3, #4]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f20:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6859      	ldr	r1, [r3, #4]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	035a      	lsls	r2, r3, #13
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	605a      	str	r2, [r3, #4]
 8002f38:	e007      	b.n	8002f4a <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f48:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f58:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	69db      	ldr	r3, [r3, #28]
 8002f64:	3b01      	subs	r3, #1
 8002f66:	051a      	lsls	r2, r3, #20
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689a      	ldr	r2, [r3, #8]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6899      	ldr	r1, [r3, #8]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f8c:	025a      	lsls	r2, r3, #9
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fa4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6899      	ldr	r1, [r3, #8]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	029a      	lsls	r2, r3, #10
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	609a      	str	r2, [r3, #8]
}
 8002fba:	bf00      	nop
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40012300 	.word	0x40012300
 8002fc8:	0f000001 	.word	0x0f000001
 8002fcc:	080118bc 	.word	0x080118bc

08002fd0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fdc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d13c      	bne.n	8003064 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d12b      	bne.n	800305c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003008:	2b00      	cmp	r3, #0
 800300a:	d127      	bne.n	800305c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003012:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003016:	2b00      	cmp	r3, #0
 8003018:	d006      	beq.n	8003028 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003024:	2b00      	cmp	r3, #0
 8003026:	d119      	bne.n	800305c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 0220 	bic.w	r2, r2, #32
 8003036:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003048:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d105      	bne.n	800305c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003054:	f043 0201 	orr.w	r2, r3, #1
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f7ff fd17 	bl	8002a90 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003062:	e00e      	b.n	8003082 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003068:	f003 0310 	and.w	r3, r3, #16
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f7ff fd2b 	bl	8002acc <HAL_ADC_ErrorCallback>
}
 8003076:	e004      	b.n	8003082 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	4798      	blx	r3
}
 8003082:	bf00      	nop
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b084      	sub	sp, #16
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003096:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f7ff fd03 	bl	8002aa4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800309e:	bf00      	nop
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b084      	sub	sp, #16
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2240      	movs	r2, #64	; 0x40
 80030b8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030be:	f043 0204 	orr.w	r2, r3, #4
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f7ff fd00 	bl	8002acc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030cc:	bf00      	nop
 80030ce:	3710      	adds	r7, #16
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030f8:	4b0c      	ldr	r3, [pc, #48]	; (800312c <__NVIC_SetPriorityGrouping+0x44>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030fe:	68ba      	ldr	r2, [r7, #8]
 8003100:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003104:	4013      	ands	r3, r2
 8003106:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003110:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003118:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800311a:	4a04      	ldr	r2, [pc, #16]	; (800312c <__NVIC_SetPriorityGrouping+0x44>)
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	60d3      	str	r3, [r2, #12]
}
 8003120:	bf00      	nop
 8003122:	3714      	adds	r7, #20
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	e000ed00 	.word	0xe000ed00

08003130 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003134:	4b04      	ldr	r3, [pc, #16]	; (8003148 <__NVIC_GetPriorityGrouping+0x18>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	0a1b      	lsrs	r3, r3, #8
 800313a:	f003 0307 	and.w	r3, r3, #7
}
 800313e:	4618      	mov	r0, r3
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	e000ed00 	.word	0xe000ed00

0800314c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	4603      	mov	r3, r0
 8003154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315a:	2b00      	cmp	r3, #0
 800315c:	db0b      	blt.n	8003176 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800315e:	79fb      	ldrb	r3, [r7, #7]
 8003160:	f003 021f 	and.w	r2, r3, #31
 8003164:	4907      	ldr	r1, [pc, #28]	; (8003184 <__NVIC_EnableIRQ+0x38>)
 8003166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316a:	095b      	lsrs	r3, r3, #5
 800316c:	2001      	movs	r0, #1
 800316e:	fa00 f202 	lsl.w	r2, r0, r2
 8003172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003176:	bf00      	nop
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	e000e100 	.word	0xe000e100

08003188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	4603      	mov	r3, r0
 8003190:	6039      	str	r1, [r7, #0]
 8003192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003198:	2b00      	cmp	r3, #0
 800319a:	db0a      	blt.n	80031b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	b2da      	uxtb	r2, r3
 80031a0:	490c      	ldr	r1, [pc, #48]	; (80031d4 <__NVIC_SetPriority+0x4c>)
 80031a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a6:	0112      	lsls	r2, r2, #4
 80031a8:	b2d2      	uxtb	r2, r2
 80031aa:	440b      	add	r3, r1
 80031ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031b0:	e00a      	b.n	80031c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	b2da      	uxtb	r2, r3
 80031b6:	4908      	ldr	r1, [pc, #32]	; (80031d8 <__NVIC_SetPriority+0x50>)
 80031b8:	79fb      	ldrb	r3, [r7, #7]
 80031ba:	f003 030f 	and.w	r3, r3, #15
 80031be:	3b04      	subs	r3, #4
 80031c0:	0112      	lsls	r2, r2, #4
 80031c2:	b2d2      	uxtb	r2, r2
 80031c4:	440b      	add	r3, r1
 80031c6:	761a      	strb	r2, [r3, #24]
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr
 80031d4:	e000e100 	.word	0xe000e100
 80031d8:	e000ed00 	.word	0xe000ed00

080031dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031dc:	b480      	push	{r7}
 80031de:	b089      	sub	sp, #36	; 0x24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	f1c3 0307 	rsb	r3, r3, #7
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	bf28      	it	cs
 80031fa:	2304      	movcs	r3, #4
 80031fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	3304      	adds	r3, #4
 8003202:	2b06      	cmp	r3, #6
 8003204:	d902      	bls.n	800320c <NVIC_EncodePriority+0x30>
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	3b03      	subs	r3, #3
 800320a:	e000      	b.n	800320e <NVIC_EncodePriority+0x32>
 800320c:	2300      	movs	r3, #0
 800320e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003210:	f04f 32ff 	mov.w	r2, #4294967295
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	43da      	mvns	r2, r3
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	401a      	ands	r2, r3
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003224:	f04f 31ff 	mov.w	r1, #4294967295
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	fa01 f303 	lsl.w	r3, r1, r3
 800322e:	43d9      	mvns	r1, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003234:	4313      	orrs	r3, r2
         );
}
 8003236:	4618      	mov	r0, r3
 8003238:	3724      	adds	r7, #36	; 0x24
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
	...

08003244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b07      	cmp	r3, #7
 8003250:	d00f      	beq.n	8003272 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2b06      	cmp	r3, #6
 8003256:	d00c      	beq.n	8003272 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b05      	cmp	r3, #5
 800325c:	d009      	beq.n	8003272 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b04      	cmp	r3, #4
 8003262:	d006      	beq.n	8003272 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b03      	cmp	r3, #3
 8003268:	d003      	beq.n	8003272 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800326a:	2192      	movs	r1, #146	; 0x92
 800326c:	4804      	ldr	r0, [pc, #16]	; (8003280 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800326e:	f7fe fb89 	bl	8001984 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7ff ff38 	bl	80030e8 <__NVIC_SetPriorityGrouping>
}
 8003278:	bf00      	nop
 800327a:	3708      	adds	r7, #8
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	080118f4 	.word	0x080118f4

08003284 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	4603      	mov	r3, r0
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
 8003290:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003292:	2300      	movs	r3, #0
 8003294:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2b0f      	cmp	r3, #15
 800329a:	d903      	bls.n	80032a4 <HAL_NVIC_SetPriority+0x20>
 800329c:	21aa      	movs	r1, #170	; 0xaa
 800329e:	480e      	ldr	r0, [pc, #56]	; (80032d8 <HAL_NVIC_SetPriority+0x54>)
 80032a0:	f7fe fb70 	bl	8001984 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	2b0f      	cmp	r3, #15
 80032a8:	d903      	bls.n	80032b2 <HAL_NVIC_SetPriority+0x2e>
 80032aa:	21ab      	movs	r1, #171	; 0xab
 80032ac:	480a      	ldr	r0, [pc, #40]	; (80032d8 <HAL_NVIC_SetPriority+0x54>)
 80032ae:	f7fe fb69 	bl	8001984 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032b2:	f7ff ff3d 	bl	8003130 <__NVIC_GetPriorityGrouping>
 80032b6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	68b9      	ldr	r1, [r7, #8]
 80032bc:	6978      	ldr	r0, [r7, #20]
 80032be:	f7ff ff8d 	bl	80031dc <NVIC_EncodePriority>
 80032c2:	4602      	mov	r2, r0
 80032c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032c8:	4611      	mov	r1, r2
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7ff ff5c 	bl	8003188 <__NVIC_SetPriority>
}
 80032d0:	bf00      	nop
 80032d2:	3718      	adds	r7, #24
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	080118f4 	.word	0x080118f4

080032dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	4603      	mov	r3, r0
 80032e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80032e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	da03      	bge.n	80032f6 <HAL_NVIC_EnableIRQ+0x1a>
 80032ee:	21be      	movs	r1, #190	; 0xbe
 80032f0:	4805      	ldr	r0, [pc, #20]	; (8003308 <HAL_NVIC_EnableIRQ+0x2c>)
 80032f2:	f7fe fb47 	bl	8001984 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff ff26 	bl	800314c <__NVIC_EnableIRQ>
}
 8003300:	bf00      	nop
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	080118f4 	.word	0x080118f4

0800330c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e017      	b.n	800334e <HAL_CRC_Init+0x42>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a0d      	ldr	r2, [pc, #52]	; (8003358 <HAL_CRC_Init+0x4c>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d003      	beq.n	8003330 <HAL_CRC_Init+0x24>
 8003328:	2168      	movs	r1, #104	; 0x68
 800332a:	480c      	ldr	r0, [pc, #48]	; (800335c <HAL_CRC_Init+0x50>)
 800332c:	f7fe fb2a 	bl	8001984 <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	795b      	ldrb	r3, [r3, #5]
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d105      	bne.n	8003346 <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f7fd fe19 	bl	8000f78 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	40023000 	.word	0x40023000
 800335c:	08011930 	.word	0x08011930

08003360 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003368:	2300      	movs	r3, #0
 800336a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800336c:	f7fe ff42 	bl	80021f4 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d101      	bne.n	800337c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e204      	b.n	8003786 <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a97      	ldr	r2, [pc, #604]	; (80035e0 <HAL_DMA_Init+0x280>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d04e      	beq.n	8003424 <HAL_DMA_Init+0xc4>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a96      	ldr	r2, [pc, #600]	; (80035e4 <HAL_DMA_Init+0x284>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d049      	beq.n	8003424 <HAL_DMA_Init+0xc4>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a94      	ldr	r2, [pc, #592]	; (80035e8 <HAL_DMA_Init+0x288>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d044      	beq.n	8003424 <HAL_DMA_Init+0xc4>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a93      	ldr	r2, [pc, #588]	; (80035ec <HAL_DMA_Init+0x28c>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d03f      	beq.n	8003424 <HAL_DMA_Init+0xc4>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a91      	ldr	r2, [pc, #580]	; (80035f0 <HAL_DMA_Init+0x290>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d03a      	beq.n	8003424 <HAL_DMA_Init+0xc4>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a90      	ldr	r2, [pc, #576]	; (80035f4 <HAL_DMA_Init+0x294>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d035      	beq.n	8003424 <HAL_DMA_Init+0xc4>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a8e      	ldr	r2, [pc, #568]	; (80035f8 <HAL_DMA_Init+0x298>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d030      	beq.n	8003424 <HAL_DMA_Init+0xc4>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a8d      	ldr	r2, [pc, #564]	; (80035fc <HAL_DMA_Init+0x29c>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d02b      	beq.n	8003424 <HAL_DMA_Init+0xc4>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a8b      	ldr	r2, [pc, #556]	; (8003600 <HAL_DMA_Init+0x2a0>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d026      	beq.n	8003424 <HAL_DMA_Init+0xc4>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a8a      	ldr	r2, [pc, #552]	; (8003604 <HAL_DMA_Init+0x2a4>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d021      	beq.n	8003424 <HAL_DMA_Init+0xc4>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a88      	ldr	r2, [pc, #544]	; (8003608 <HAL_DMA_Init+0x2a8>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d01c      	beq.n	8003424 <HAL_DMA_Init+0xc4>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a87      	ldr	r2, [pc, #540]	; (800360c <HAL_DMA_Init+0x2ac>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d017      	beq.n	8003424 <HAL_DMA_Init+0xc4>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a85      	ldr	r2, [pc, #532]	; (8003610 <HAL_DMA_Init+0x2b0>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d012      	beq.n	8003424 <HAL_DMA_Init+0xc4>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a84      	ldr	r2, [pc, #528]	; (8003614 <HAL_DMA_Init+0x2b4>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d00d      	beq.n	8003424 <HAL_DMA_Init+0xc4>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a82      	ldr	r2, [pc, #520]	; (8003618 <HAL_DMA_Init+0x2b8>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d008      	beq.n	8003424 <HAL_DMA_Init+0xc4>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a81      	ldr	r2, [pc, #516]	; (800361c <HAL_DMA_Init+0x2bc>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d003      	beq.n	8003424 <HAL_DMA_Init+0xc4>
 800341c:	21b8      	movs	r1, #184	; 0xb8
 800341e:	4880      	ldr	r0, [pc, #512]	; (8003620 <HAL_DMA_Init+0x2c0>)
 8003420:	f7fe fab0 	bl	8001984 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d026      	beq.n	800347a <HAL_DMA_Init+0x11a>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003434:	d021      	beq.n	800347a <HAL_DMA_Init+0x11a>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800343e:	d01c      	beq.n	800347a <HAL_DMA_Init+0x11a>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003448:	d017      	beq.n	800347a <HAL_DMA_Init+0x11a>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003452:	d012      	beq.n	800347a <HAL_DMA_Init+0x11a>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 800345c:	d00d      	beq.n	800347a <HAL_DMA_Init+0x11a>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003466:	d008      	beq.n	800347a <HAL_DMA_Init+0x11a>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8003470:	d003      	beq.n	800347a <HAL_DMA_Init+0x11a>
 8003472:	21b9      	movs	r1, #185	; 0xb9
 8003474:	486a      	ldr	r0, [pc, #424]	; (8003620 <HAL_DMA_Init+0x2c0>)
 8003476:	f7fe fa85 	bl	8001984 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00b      	beq.n	800349a <HAL_DMA_Init+0x13a>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	2b40      	cmp	r3, #64	; 0x40
 8003488:	d007      	beq.n	800349a <HAL_DMA_Init+0x13a>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	2b80      	cmp	r3, #128	; 0x80
 8003490:	d003      	beq.n	800349a <HAL_DMA_Init+0x13a>
 8003492:	21ba      	movs	r1, #186	; 0xba
 8003494:	4862      	ldr	r0, [pc, #392]	; (8003620 <HAL_DMA_Init+0x2c0>)
 8003496:	f7fe fa75 	bl	8001984 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034a2:	d007      	beq.n	80034b4 <HAL_DMA_Init+0x154>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d003      	beq.n	80034b4 <HAL_DMA_Init+0x154>
 80034ac:	21bb      	movs	r1, #187	; 0xbb
 80034ae:	485c      	ldr	r0, [pc, #368]	; (8003620 <HAL_DMA_Init+0x2c0>)
 80034b0:	f7fe fa68 	bl	8001984 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034bc:	d007      	beq.n	80034ce <HAL_DMA_Init+0x16e>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <HAL_DMA_Init+0x16e>
 80034c6:	21bc      	movs	r1, #188	; 0xbc
 80034c8:	4855      	ldr	r0, [pc, #340]	; (8003620 <HAL_DMA_Init+0x2c0>)
 80034ca:	f7fe fa5b 	bl	8001984 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00d      	beq.n	80034f2 <HAL_DMA_Init+0x192>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034de:	d008      	beq.n	80034f2 <HAL_DMA_Init+0x192>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034e8:	d003      	beq.n	80034f2 <HAL_DMA_Init+0x192>
 80034ea:	21bd      	movs	r1, #189	; 0xbd
 80034ec:	484c      	ldr	r0, [pc, #304]	; (8003620 <HAL_DMA_Init+0x2c0>)
 80034ee:	f7fe fa49 	bl	8001984 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00d      	beq.n	8003516 <HAL_DMA_Init+0x1b6>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003502:	d008      	beq.n	8003516 <HAL_DMA_Init+0x1b6>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800350c:	d003      	beq.n	8003516 <HAL_DMA_Init+0x1b6>
 800350e:	21be      	movs	r1, #190	; 0xbe
 8003510:	4843      	ldr	r0, [pc, #268]	; (8003620 <HAL_DMA_Init+0x2c0>)
 8003512:	f7fe fa37 	bl	8001984 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00c      	beq.n	8003538 <HAL_DMA_Init+0x1d8>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	69db      	ldr	r3, [r3, #28]
 8003522:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003526:	d007      	beq.n	8003538 <HAL_DMA_Init+0x1d8>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	69db      	ldr	r3, [r3, #28]
 800352c:	2b20      	cmp	r3, #32
 800352e:	d003      	beq.n	8003538 <HAL_DMA_Init+0x1d8>
 8003530:	21bf      	movs	r1, #191	; 0xbf
 8003532:	483b      	ldr	r0, [pc, #236]	; (8003620 <HAL_DMA_Init+0x2c0>)
 8003534:	f7fe fa26 	bl	8001984 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d012      	beq.n	8003566 <HAL_DMA_Init+0x206>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003548:	d00d      	beq.n	8003566 <HAL_DMA_Init+0x206>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003552:	d008      	beq.n	8003566 <HAL_DMA_Init+0x206>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800355c:	d003      	beq.n	8003566 <HAL_DMA_Init+0x206>
 800355e:	21c0      	movs	r1, #192	; 0xc0
 8003560:	482f      	ldr	r0, [pc, #188]	; (8003620 <HAL_DMA_Init+0x2c0>)
 8003562:	f7fe fa0f 	bl	8001984 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356a:	2b00      	cmp	r3, #0
 800356c:	d007      	beq.n	800357e <HAL_DMA_Init+0x21e>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003572:	2b04      	cmp	r3, #4
 8003574:	d003      	beq.n	800357e <HAL_DMA_Init+0x21e>
 8003576:	21c1      	movs	r1, #193	; 0xc1
 8003578:	4829      	ldr	r0, [pc, #164]	; (8003620 <HAL_DMA_Init+0x2c0>)
 800357a:	f7fe fa03 	bl	8001984 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003582:	2b00      	cmp	r3, #0
 8003584:	d065      	beq.n	8003652 <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00f      	beq.n	80035ae <HAL_DMA_Init+0x24e>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003592:	2b01      	cmp	r3, #1
 8003594:	d00b      	beq.n	80035ae <HAL_DMA_Init+0x24e>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359a:	2b02      	cmp	r3, #2
 800359c:	d007      	beq.n	80035ae <HAL_DMA_Init+0x24e>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a2:	2b03      	cmp	r3, #3
 80035a4:	d003      	beq.n	80035ae <HAL_DMA_Init+0x24e>
 80035a6:	21c6      	movs	r1, #198	; 0xc6
 80035a8:	481d      	ldr	r0, [pc, #116]	; (8003620 <HAL_DMA_Init+0x2c0>)
 80035aa:	f7fe f9eb 	bl	8001984 <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d036      	beq.n	8003624 <HAL_DMA_Init+0x2c4>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035be:	d031      	beq.n	8003624 <HAL_DMA_Init+0x2c4>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035c8:	d02c      	beq.n	8003624 <HAL_DMA_Init+0x2c4>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035d2:	d027      	beq.n	8003624 <HAL_DMA_Init+0x2c4>
 80035d4:	21c7      	movs	r1, #199	; 0xc7
 80035d6:	4812      	ldr	r0, [pc, #72]	; (8003620 <HAL_DMA_Init+0x2c0>)
 80035d8:	f7fe f9d4 	bl	8001984 <assert_failed>
 80035dc:	e022      	b.n	8003624 <HAL_DMA_Init+0x2c4>
 80035de:	bf00      	nop
 80035e0:	40026010 	.word	0x40026010
 80035e4:	40026028 	.word	0x40026028
 80035e8:	40026040 	.word	0x40026040
 80035ec:	40026058 	.word	0x40026058
 80035f0:	40026070 	.word	0x40026070
 80035f4:	40026088 	.word	0x40026088
 80035f8:	400260a0 	.word	0x400260a0
 80035fc:	400260b8 	.word	0x400260b8
 8003600:	40026410 	.word	0x40026410
 8003604:	40026428 	.word	0x40026428
 8003608:	40026440 	.word	0x40026440
 800360c:	40026458 	.word	0x40026458
 8003610:	40026470 	.word	0x40026470
 8003614:	40026488 	.word	0x40026488
 8003618:	400264a0 	.word	0x400264a0
 800361c:	400264b8 	.word	0x400264b8
 8003620:	08011968 	.word	0x08011968
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003628:	2b00      	cmp	r3, #0
 800362a:	d012      	beq.n	8003652 <HAL_DMA_Init+0x2f2>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003630:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003634:	d00d      	beq.n	8003652 <HAL_DMA_Init+0x2f2>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800363e:	d008      	beq.n	8003652 <HAL_DMA_Init+0x2f2>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003644:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003648:	d003      	beq.n	8003652 <HAL_DMA_Init+0x2f2>
 800364a:	21c8      	movs	r1, #200	; 0xc8
 800364c:	4850      	ldr	r0, [pc, #320]	; (8003790 <HAL_DMA_Init+0x430>)
 800364e:	f7fe f999 	bl	8001984 <assert_failed>
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2202      	movs	r2, #2
 800365e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 0201 	bic.w	r2, r2, #1
 8003670:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003672:	e00f      	b.n	8003694 <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003674:	f7fe fdbe 	bl	80021f4 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b05      	cmp	r3, #5
 8003680:	d908      	bls.n	8003694 <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2220      	movs	r2, #32
 8003686:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2203      	movs	r2, #3
 800368c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e078      	b.n	8003786 <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1e8      	bne.n	8003674 <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	4b39      	ldr	r3, [pc, #228]	; (8003794 <HAL_DMA_Init+0x434>)
 80036ae:	4013      	ands	r3, r2
 80036b0:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685a      	ldr	r2, [r3, #4]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	d107      	bne.n	80036fe <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f6:	4313      	orrs	r3, r2
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	f023 0307 	bic.w	r3, r3, #7
 8003714:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	4313      	orrs	r3, r2
 800371e:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003724:	2b04      	cmp	r3, #4
 8003726:	d117      	bne.n	8003758 <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	4313      	orrs	r3, r2
 8003730:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00e      	beq.n	8003758 <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 fb12 	bl	8003d64 <DMA_CheckFifoParam>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d008      	beq.n	8003758 <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2240      	movs	r2, #64	; 0x40
 800374a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003754:	2301      	movs	r3, #1
 8003756:	e016      	b.n	8003786 <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	697a      	ldr	r2, [r7, #20]
 800375e:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 fac9 	bl	8003cf8 <DMA_CalcBaseAndBitshift>
 8003766:	4603      	mov	r3, r0
 8003768:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800376e:	223f      	movs	r2, #63	; 0x3f
 8003770:	409a      	lsls	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3718      	adds	r7, #24
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	08011968 	.word	0x08011968
 8003794:	f010803f 	.word	0xf010803f

08003798 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
 80037a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037a6:	2300      	movs	r3, #0
 80037a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <HAL_DMA_Start_IT+0x26>
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037bc:	d304      	bcc.n	80037c8 <HAL_DMA_Start_IT+0x30>
 80037be:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 80037c2:	4827      	ldr	r0, [pc, #156]	; (8003860 <HAL_DMA_Start_IT+0xc8>)
 80037c4:	f7fe f8de 	bl	8001984 <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d101      	bne.n	80037d6 <HAL_DMA_Start_IT+0x3e>
 80037d2:	2302      	movs	r3, #2
 80037d4:	e040      	b.n	8003858 <HAL_DMA_Start_IT+0xc0>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d12f      	bne.n	800384a <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2202      	movs	r2, #2
 80037ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	68b9      	ldr	r1, [r7, #8]
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f000 fa4c 	bl	8003c9c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003808:	223f      	movs	r2, #63	; 0x3f
 800380a:	409a      	lsls	r2, r3
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f042 0216 	orr.w	r2, r2, #22
 800381e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003824:	2b00      	cmp	r3, #0
 8003826:	d007      	beq.n	8003838 <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f042 0208 	orr.w	r2, r2, #8
 8003836:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 0201 	orr.w	r2, r2, #1
 8003846:	601a      	str	r2, [r3, #0]
 8003848:	e005      	b.n	8003856 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003852:	2302      	movs	r3, #2
 8003854:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003856:	7dfb      	ldrb	r3, [r7, #23]
}
 8003858:	4618      	mov	r0, r3
 800385a:	3718      	adds	r7, #24
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	08011968 	.word	0x08011968

08003864 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003870:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003872:	f7fe fcbf 	bl	80021f4 <HAL_GetTick>
 8003876:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d008      	beq.n	8003896 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2280      	movs	r2, #128	; 0x80
 8003888:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e052      	b.n	800393c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0216 	bic.w	r2, r2, #22
 80038a4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	695a      	ldr	r2, [r3, #20]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038b4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d103      	bne.n	80038c6 <HAL_DMA_Abort+0x62>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d007      	beq.n	80038d6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 0208 	bic.w	r2, r2, #8
 80038d4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 0201 	bic.w	r2, r2, #1
 80038e4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038e6:	e013      	b.n	8003910 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038e8:	f7fe fc84 	bl	80021f4 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b05      	cmp	r3, #5
 80038f4:	d90c      	bls.n	8003910 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2220      	movs	r2, #32
 80038fa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2203      	movs	r2, #3
 8003908:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e015      	b.n	800393c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1e4      	bne.n	80038e8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003922:	223f      	movs	r2, #63	; 0x3f
 8003924:	409a      	lsls	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d004      	beq.n	8003962 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2280      	movs	r2, #128	; 0x80
 800395c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e00c      	b.n	800397c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2205      	movs	r2, #5
 8003966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 0201 	bic.w	r2, r2, #1
 8003978:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003990:	2300      	movs	r3, #0
 8003992:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003994:	4b92      	ldr	r3, [pc, #584]	; (8003be0 <HAL_DMA_IRQHandler+0x258>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a92      	ldr	r2, [pc, #584]	; (8003be4 <HAL_DMA_IRQHandler+0x25c>)
 800399a:	fba2 2303 	umull	r2, r3, r2, r3
 800399e:	0a9b      	lsrs	r3, r3, #10
 80039a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b2:	2208      	movs	r2, #8
 80039b4:	409a      	lsls	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	4013      	ands	r3, r2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d01a      	beq.n	80039f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d013      	beq.n	80039f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0204 	bic.w	r2, r2, #4
 80039da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e0:	2208      	movs	r2, #8
 80039e2:	409a      	lsls	r2, r3
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ec:	f043 0201 	orr.w	r2, r3, #1
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f8:	2201      	movs	r2, #1
 80039fa:	409a      	lsls	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4013      	ands	r3, r2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d012      	beq.n	8003a2a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00b      	beq.n	8003a2a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a16:	2201      	movs	r2, #1
 8003a18:	409a      	lsls	r2, r3
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a22:	f043 0202 	orr.w	r2, r3, #2
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2e:	2204      	movs	r2, #4
 8003a30:	409a      	lsls	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	4013      	ands	r3, r2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d012      	beq.n	8003a60 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00b      	beq.n	8003a60 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a4c:	2204      	movs	r2, #4
 8003a4e:	409a      	lsls	r2, r3
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a58:	f043 0204 	orr.w	r2, r3, #4
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a64:	2210      	movs	r2, #16
 8003a66:	409a      	lsls	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d043      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0308 	and.w	r3, r3, #8
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d03c      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a82:	2210      	movs	r2, #16
 8003a84:	409a      	lsls	r2, r3
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d018      	beq.n	8003aca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d108      	bne.n	8003ab8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d024      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	4798      	blx	r3
 8003ab6:	e01f      	b.n	8003af8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d01b      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	4798      	blx	r3
 8003ac8:	e016      	b.n	8003af8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d107      	bne.n	8003ae8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 0208 	bic.w	r2, r2, #8
 8003ae6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d003      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003afc:	2220      	movs	r2, #32
 8003afe:	409a      	lsls	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4013      	ands	r3, r2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 808e 	beq.w	8003c26 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0310 	and.w	r3, r3, #16
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 8086 	beq.w	8003c26 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b1e:	2220      	movs	r2, #32
 8003b20:	409a      	lsls	r2, r3
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b05      	cmp	r3, #5
 8003b30:	d136      	bne.n	8003ba0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 0216 	bic.w	r2, r2, #22
 8003b40:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	695a      	ldr	r2, [r3, #20]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b50:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d103      	bne.n	8003b62 <HAL_DMA_IRQHandler+0x1da>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d007      	beq.n	8003b72 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 0208 	bic.w	r2, r2, #8
 8003b70:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b76:	223f      	movs	r2, #63	; 0x3f
 8003b78:	409a      	lsls	r2, r3
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d07d      	beq.n	8003c92 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	4798      	blx	r3
        }
        return;
 8003b9e:	e078      	b.n	8003c92 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d01c      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d108      	bne.n	8003bce <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d030      	beq.n	8003c26 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	4798      	blx	r3
 8003bcc:	e02b      	b.n	8003c26 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d027      	beq.n	8003c26 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	4798      	blx	r3
 8003bde:	e022      	b.n	8003c26 <HAL_DMA_IRQHandler+0x29e>
 8003be0:	20000000 	.word	0x20000000
 8003be4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10f      	bne.n	8003c16 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 0210 	bic.w	r2, r2, #16
 8003c04:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d032      	beq.n	8003c94 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d022      	beq.n	8003c80 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2205      	movs	r2, #5
 8003c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 0201 	bic.w	r2, r2, #1
 8003c50:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	3301      	adds	r3, #1
 8003c56:	60bb      	str	r3, [r7, #8]
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d307      	bcc.n	8003c6e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1f2      	bne.n	8003c52 <HAL_DMA_IRQHandler+0x2ca>
 8003c6c:	e000      	b.n	8003c70 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003c6e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d005      	beq.n	8003c94 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	4798      	blx	r3
 8003c90:	e000      	b.n	8003c94 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003c92:	bf00      	nop
    }
  }
}
 8003c94:	3718      	adds	r7, #24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop

08003c9c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
 8003ca8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003cb8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	2b40      	cmp	r3, #64	; 0x40
 8003cc8:	d108      	bne.n	8003cdc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003cda:	e007      	b.n	8003cec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68ba      	ldr	r2, [r7, #8]
 8003ce2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	60da      	str	r2, [r3, #12]
}
 8003cec:	bf00      	nop
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	3b10      	subs	r3, #16
 8003d08:	4a14      	ldr	r2, [pc, #80]	; (8003d5c <DMA_CalcBaseAndBitshift+0x64>)
 8003d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0e:	091b      	lsrs	r3, r3, #4
 8003d10:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d12:	4a13      	ldr	r2, [pc, #76]	; (8003d60 <DMA_CalcBaseAndBitshift+0x68>)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4413      	add	r3, r2
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2b03      	cmp	r3, #3
 8003d24:	d909      	bls.n	8003d3a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d2e:	f023 0303 	bic.w	r3, r3, #3
 8003d32:	1d1a      	adds	r2, r3, #4
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	659a      	str	r2, [r3, #88]	; 0x58
 8003d38:	e007      	b.n	8003d4a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d42:	f023 0303 	bic.w	r3, r3, #3
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3714      	adds	r7, #20
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	aaaaaaab 	.word	0xaaaaaaab
 8003d60:	08011d30 	.word	0x08011d30

08003d64 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d74:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d11f      	bne.n	8003dbe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	2b03      	cmp	r3, #3
 8003d82:	d855      	bhi.n	8003e30 <DMA_CheckFifoParam+0xcc>
 8003d84:	a201      	add	r2, pc, #4	; (adr r2, 8003d8c <DMA_CheckFifoParam+0x28>)
 8003d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8a:	bf00      	nop
 8003d8c:	08003d9d 	.word	0x08003d9d
 8003d90:	08003daf 	.word	0x08003daf
 8003d94:	08003d9d 	.word	0x08003d9d
 8003d98:	08003e31 	.word	0x08003e31
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d045      	beq.n	8003e34 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dac:	e042      	b.n	8003e34 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003db6:	d13f      	bne.n	8003e38 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dbc:	e03c      	b.n	8003e38 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dc6:	d121      	bne.n	8003e0c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	2b03      	cmp	r3, #3
 8003dcc:	d836      	bhi.n	8003e3c <DMA_CheckFifoParam+0xd8>
 8003dce:	a201      	add	r2, pc, #4	; (adr r2, 8003dd4 <DMA_CheckFifoParam+0x70>)
 8003dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd4:	08003de5 	.word	0x08003de5
 8003dd8:	08003deb 	.word	0x08003deb
 8003ddc:	08003de5 	.word	0x08003de5
 8003de0:	08003dfd 	.word	0x08003dfd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	73fb      	strb	r3, [r7, #15]
      break;
 8003de8:	e02f      	b.n	8003e4a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d024      	beq.n	8003e40 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dfa:	e021      	b.n	8003e40 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e00:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e04:	d11e      	bne.n	8003e44 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e0a:	e01b      	b.n	8003e44 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d902      	bls.n	8003e18 <DMA_CheckFifoParam+0xb4>
 8003e12:	2b03      	cmp	r3, #3
 8003e14:	d003      	beq.n	8003e1e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e16:	e018      	b.n	8003e4a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e1c:	e015      	b.n	8003e4a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00e      	beq.n	8003e48 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	73fb      	strb	r3, [r7, #15]
      break;
 8003e2e:	e00b      	b.n	8003e48 <DMA_CheckFifoParam+0xe4>
      break;
 8003e30:	bf00      	nop
 8003e32:	e00a      	b.n	8003e4a <DMA_CheckFifoParam+0xe6>
      break;
 8003e34:	bf00      	nop
 8003e36:	e008      	b.n	8003e4a <DMA_CheckFifoParam+0xe6>
      break;
 8003e38:	bf00      	nop
 8003e3a:	e006      	b.n	8003e4a <DMA_CheckFifoParam+0xe6>
      break;
 8003e3c:	bf00      	nop
 8003e3e:	e004      	b.n	8003e4a <DMA_CheckFifoParam+0xe6>
      break;
 8003e40:	bf00      	nop
 8003e42:	e002      	b.n	8003e4a <DMA_CheckFifoParam+0xe6>
      break;   
 8003e44:	bf00      	nop
 8003e46:	e000      	b.n	8003e4a <DMA_CheckFifoParam+0xe6>
      break;
 8003e48:	bf00      	nop
    }
  } 
  
  return status; 
 8003e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3714      	adds	r7, #20
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b088      	sub	sp, #32
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e62:	2300      	movs	r3, #0
 8003e64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e66:	2300      	movs	r3, #0
 8003e68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a3b      	ldr	r2, [pc, #236]	; (8003f60 <HAL_GPIO_Init+0x108>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d017      	beq.n	8003ea6 <HAL_GPIO_Init+0x4e>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a3a      	ldr	r2, [pc, #232]	; (8003f64 <HAL_GPIO_Init+0x10c>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d013      	beq.n	8003ea6 <HAL_GPIO_Init+0x4e>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a39      	ldr	r2, [pc, #228]	; (8003f68 <HAL_GPIO_Init+0x110>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d00f      	beq.n	8003ea6 <HAL_GPIO_Init+0x4e>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a38      	ldr	r2, [pc, #224]	; (8003f6c <HAL_GPIO_Init+0x114>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d00b      	beq.n	8003ea6 <HAL_GPIO_Init+0x4e>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a37      	ldr	r2, [pc, #220]	; (8003f70 <HAL_GPIO_Init+0x118>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d007      	beq.n	8003ea6 <HAL_GPIO_Init+0x4e>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a36      	ldr	r2, [pc, #216]	; (8003f74 <HAL_GPIO_Init+0x11c>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d003      	beq.n	8003ea6 <HAL_GPIO_Init+0x4e>
 8003e9e:	21b3      	movs	r1, #179	; 0xb3
 8003ea0:	4835      	ldr	r0, [pc, #212]	; (8003f78 <HAL_GPIO_Init+0x120>)
 8003ea2:	f7fd fd6f 	bl	8001984 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d005      	beq.n	8003ebc <HAL_GPIO_Init+0x64>
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	0c1b      	lsrs	r3, r3, #16
 8003eb6:	041b      	lsls	r3, r3, #16
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d003      	beq.n	8003ec4 <HAL_GPIO_Init+0x6c>
 8003ebc:	21b4      	movs	r1, #180	; 0xb4
 8003ebe:	482e      	ldr	r0, [pc, #184]	; (8003f78 <HAL_GPIO_Init+0x120>)
 8003ec0:	f7fd fd60 	bl	8001984 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d035      	beq.n	8003f38 <HAL_GPIO_Init+0xe0>
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d031      	beq.n	8003f38 <HAL_GPIO_Init+0xe0>
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	2b11      	cmp	r3, #17
 8003eda:	d02d      	beq.n	8003f38 <HAL_GPIO_Init+0xe0>
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d029      	beq.n	8003f38 <HAL_GPIO_Init+0xe0>
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	2b12      	cmp	r3, #18
 8003eea:	d025      	beq.n	8003f38 <HAL_GPIO_Init+0xe0>
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	4a22      	ldr	r2, [pc, #136]	; (8003f7c <HAL_GPIO_Init+0x124>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d020      	beq.n	8003f38 <HAL_GPIO_Init+0xe0>
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	4a21      	ldr	r2, [pc, #132]	; (8003f80 <HAL_GPIO_Init+0x128>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d01b      	beq.n	8003f38 <HAL_GPIO_Init+0xe0>
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	4a1f      	ldr	r2, [pc, #124]	; (8003f84 <HAL_GPIO_Init+0x12c>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d016      	beq.n	8003f38 <HAL_GPIO_Init+0xe0>
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	4a1e      	ldr	r2, [pc, #120]	; (8003f88 <HAL_GPIO_Init+0x130>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d011      	beq.n	8003f38 <HAL_GPIO_Init+0xe0>
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	4a1c      	ldr	r2, [pc, #112]	; (8003f8c <HAL_GPIO_Init+0x134>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d00c      	beq.n	8003f38 <HAL_GPIO_Init+0xe0>
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	4a1b      	ldr	r2, [pc, #108]	; (8003f90 <HAL_GPIO_Init+0x138>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d007      	beq.n	8003f38 <HAL_GPIO_Init+0xe0>
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	2b03      	cmp	r3, #3
 8003f2e:	d003      	beq.n	8003f38 <HAL_GPIO_Init+0xe0>
 8003f30:	21b5      	movs	r1, #181	; 0xb5
 8003f32:	4811      	ldr	r0, [pc, #68]	; (8003f78 <HAL_GPIO_Init+0x120>)
 8003f34:	f7fd fd26 	bl	8001984 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00b      	beq.n	8003f58 <HAL_GPIO_Init+0x100>
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d007      	beq.n	8003f58 <HAL_GPIO_Init+0x100>
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d003      	beq.n	8003f58 <HAL_GPIO_Init+0x100>
 8003f50:	21b6      	movs	r1, #182	; 0xb6
 8003f52:	4809      	ldr	r0, [pc, #36]	; (8003f78 <HAL_GPIO_Init+0x120>)
 8003f54:	f7fd fd16 	bl	8001984 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f58:	2300      	movs	r3, #0
 8003f5a:	61fb      	str	r3, [r7, #28]
 8003f5c:	e211      	b.n	8004382 <HAL_GPIO_Init+0x52a>
 8003f5e:	bf00      	nop
 8003f60:	40020000 	.word	0x40020000
 8003f64:	40020400 	.word	0x40020400
 8003f68:	40020800 	.word	0x40020800
 8003f6c:	40020c00 	.word	0x40020c00
 8003f70:	40021000 	.word	0x40021000
 8003f74:	40021c00 	.word	0x40021c00
 8003f78:	080119a0 	.word	0x080119a0
 8003f7c:	10110000 	.word	0x10110000
 8003f80:	10210000 	.word	0x10210000
 8003f84:	10310000 	.word	0x10310000
 8003f88:	10120000 	.word	0x10120000
 8003f8c:	10220000 	.word	0x10220000
 8003f90:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f94:	2201      	movs	r2, #1
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	f040 81e5 	bne.w	800437c <HAL_GPIO_Init+0x524>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d00b      	beq.n	8003fd2 <HAL_GPIO_Init+0x17a>
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d007      	beq.n	8003fd2 <HAL_GPIO_Init+0x17a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003fc6:	2b11      	cmp	r3, #17
 8003fc8:	d003      	beq.n	8003fd2 <HAL_GPIO_Init+0x17a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	2b12      	cmp	r3, #18
 8003fd0:	d144      	bne.n	800405c <HAL_GPIO_Init+0x204>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00f      	beq.n	8003ffa <HAL_GPIO_Init+0x1a2>
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d00b      	beq.n	8003ffa <HAL_GPIO_Init+0x1a2>
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d007      	beq.n	8003ffa <HAL_GPIO_Init+0x1a2>
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	2b03      	cmp	r3, #3
 8003ff0:	d003      	beq.n	8003ffa <HAL_GPIO_Init+0x1a2>
 8003ff2:	21c8      	movs	r1, #200	; 0xc8
 8003ff4:	489f      	ldr	r0, [pc, #636]	; (8004274 <HAL_GPIO_Init+0x41c>)
 8003ff6:	f7fd fcc5 	bl	8001984 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	005b      	lsls	r3, r3, #1
 8004004:	2203      	movs	r2, #3
 8004006:	fa02 f303 	lsl.w	r3, r2, r3
 800400a:	43db      	mvns	r3, r3
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	4013      	ands	r3, r2
 8004010:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	68da      	ldr	r2, [r3, #12]
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	005b      	lsls	r3, r3, #1
 800401a:	fa02 f303 	lsl.w	r3, r2, r3
 800401e:	69ba      	ldr	r2, [r7, #24]
 8004020:	4313      	orrs	r3, r2
 8004022:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004030:	2201      	movs	r2, #1
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	fa02 f303 	lsl.w	r3, r2, r3
 8004038:	43db      	mvns	r3, r3
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	4013      	ands	r3, r2
 800403e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	091b      	lsrs	r3, r3, #4
 8004046:	f003 0201 	and.w	r2, r3, #1
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	fa02 f303 	lsl.w	r3, r2, r3
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	4313      	orrs	r3, r2
 8004054:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	2203      	movs	r2, #3
 8004068:	fa02 f303 	lsl.w	r3, r2, r3
 800406c:	43db      	mvns	r3, r3
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	4013      	ands	r3, r2
 8004072:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	689a      	ldr	r2, [r3, #8]
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	fa02 f303 	lsl.w	r3, r2, r3
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	4313      	orrs	r3, r2
 8004084:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	2b02      	cmp	r3, #2
 8004092:	d004      	beq.n	800409e <HAL_GPIO_Init+0x246>
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	2b12      	cmp	r3, #18
 800409a:	f040 80a0 	bne.w	80041de <HAL_GPIO_Init+0x386>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d077      	beq.n	8004196 <HAL_GPIO_Init+0x33e>
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	2b09      	cmp	r3, #9
 80040ac:	d073      	beq.n	8004196 <HAL_GPIO_Init+0x33e>
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d06f      	beq.n	8004196 <HAL_GPIO_Init+0x33e>
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d06b      	beq.n	8004196 <HAL_GPIO_Init+0x33e>
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d067      	beq.n	8004196 <HAL_GPIO_Init+0x33e>
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d063      	beq.n	8004196 <HAL_GPIO_Init+0x33e>
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d05f      	beq.n	8004196 <HAL_GPIO_Init+0x33e>
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d05b      	beq.n	8004196 <HAL_GPIO_Init+0x33e>
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d057      	beq.n	8004196 <HAL_GPIO_Init+0x33e>
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d053      	beq.n	8004196 <HAL_GPIO_Init+0x33e>
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d04f      	beq.n	8004196 <HAL_GPIO_Init+0x33e>
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	2b04      	cmp	r3, #4
 80040fc:	d04b      	beq.n	8004196 <HAL_GPIO_Init+0x33e>
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	2b04      	cmp	r3, #4
 8004104:	d047      	beq.n	8004196 <HAL_GPIO_Init+0x33e>
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	2b04      	cmp	r3, #4
 800410c:	d043      	beq.n	8004196 <HAL_GPIO_Init+0x33e>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	2b05      	cmp	r3, #5
 8004114:	d03f      	beq.n	8004196 <HAL_GPIO_Init+0x33e>
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	2b05      	cmp	r3, #5
 800411c:	d03b      	beq.n	8004196 <HAL_GPIO_Init+0x33e>
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	2b05      	cmp	r3, #5
 8004124:	d037      	beq.n	8004196 <HAL_GPIO_Init+0x33e>
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	2b06      	cmp	r3, #6
 800412c:	d033      	beq.n	8004196 <HAL_GPIO_Init+0x33e>
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	2b06      	cmp	r3, #6
 8004134:	d02f      	beq.n	8004196 <HAL_GPIO_Init+0x33e>
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	2b05      	cmp	r3, #5
 800413c:	d02b      	beq.n	8004196 <HAL_GPIO_Init+0x33e>
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	2b06      	cmp	r3, #6
 8004144:	d027      	beq.n	8004196 <HAL_GPIO_Init+0x33e>
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	2b07      	cmp	r3, #7
 800414c:	d023      	beq.n	8004196 <HAL_GPIO_Init+0x33e>
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	2b07      	cmp	r3, #7
 8004154:	d01f      	beq.n	8004196 <HAL_GPIO_Init+0x33e>
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	2b07      	cmp	r3, #7
 800415c:	d01b      	beq.n	8004196 <HAL_GPIO_Init+0x33e>
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	2b08      	cmp	r3, #8
 8004164:	d017      	beq.n	8004196 <HAL_GPIO_Init+0x33e>
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	2b0a      	cmp	r3, #10
 800416c:	d013      	beq.n	8004196 <HAL_GPIO_Init+0x33e>
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	2b09      	cmp	r3, #9
 8004174:	d00f      	beq.n	8004196 <HAL_GPIO_Init+0x33e>
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	2b09      	cmp	r3, #9
 800417c:	d00b      	beq.n	8004196 <HAL_GPIO_Init+0x33e>
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	2b0c      	cmp	r3, #12
 8004184:	d007      	beq.n	8004196 <HAL_GPIO_Init+0x33e>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	2b0f      	cmp	r3, #15
 800418c:	d003      	beq.n	8004196 <HAL_GPIO_Init+0x33e>
 800418e:	21e0      	movs	r1, #224	; 0xe0
 8004190:	4838      	ldr	r0, [pc, #224]	; (8004274 <HAL_GPIO_Init+0x41c>)
 8004192:	f7fd fbf7 	bl	8001984 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	08da      	lsrs	r2, r3, #3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	3208      	adds	r2, #8
 800419e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	f003 0307 	and.w	r3, r3, #7
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	220f      	movs	r2, #15
 80041ae:	fa02 f303 	lsl.w	r3, r2, r3
 80041b2:	43db      	mvns	r3, r3
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	4013      	ands	r3, r2
 80041b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	691a      	ldr	r2, [r3, #16]
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	f003 0307 	and.w	r3, r3, #7
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	08da      	lsrs	r2, r3, #3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	3208      	adds	r2, #8
 80041d8:	69b9      	ldr	r1, [r7, #24]
 80041da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	005b      	lsls	r3, r3, #1
 80041e8:	2203      	movs	r2, #3
 80041ea:	fa02 f303 	lsl.w	r3, r2, r3
 80041ee:	43db      	mvns	r3, r3
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	4013      	ands	r3, r2
 80041f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f003 0203 	and.w	r2, r3, #3
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	005b      	lsls	r3, r3, #1
 8004202:	fa02 f303 	lsl.w	r3, r2, r3
 8004206:	69ba      	ldr	r2, [r7, #24]
 8004208:	4313      	orrs	r3, r2
 800420a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	69ba      	ldr	r2, [r7, #24]
 8004210:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800421a:	2b00      	cmp	r3, #0
 800421c:	f000 80ae 	beq.w	800437c <HAL_GPIO_Init+0x524>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004220:	2300      	movs	r3, #0
 8004222:	60fb      	str	r3, [r7, #12]
 8004224:	4b14      	ldr	r3, [pc, #80]	; (8004278 <HAL_GPIO_Init+0x420>)
 8004226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004228:	4a13      	ldr	r2, [pc, #76]	; (8004278 <HAL_GPIO_Init+0x420>)
 800422a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800422e:	6453      	str	r3, [r2, #68]	; 0x44
 8004230:	4b11      	ldr	r3, [pc, #68]	; (8004278 <HAL_GPIO_Init+0x420>)
 8004232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004234:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004238:	60fb      	str	r3, [r7, #12]
 800423a:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800423c:	4a0f      	ldr	r2, [pc, #60]	; (800427c <HAL_GPIO_Init+0x424>)
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	089b      	lsrs	r3, r3, #2
 8004242:	3302      	adds	r3, #2
 8004244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004248:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	f003 0303 	and.w	r3, r3, #3
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	220f      	movs	r2, #15
 8004254:	fa02 f303 	lsl.w	r3, r2, r3
 8004258:	43db      	mvns	r3, r3
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	4013      	ands	r3, r2
 800425e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a07      	ldr	r2, [pc, #28]	; (8004280 <HAL_GPIO_Init+0x428>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d025      	beq.n	80042b4 <HAL_GPIO_Init+0x45c>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a06      	ldr	r2, [pc, #24]	; (8004284 <HAL_GPIO_Init+0x42c>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d01f      	beq.n	80042b0 <HAL_GPIO_Init+0x458>
 8004270:	e00a      	b.n	8004288 <HAL_GPIO_Init+0x430>
 8004272:	bf00      	nop
 8004274:	080119a0 	.word	0x080119a0
 8004278:	40023800 	.word	0x40023800
 800427c:	40013800 	.word	0x40013800
 8004280:	40020000 	.word	0x40020000
 8004284:	40020400 	.word	0x40020400
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a42      	ldr	r2, [pc, #264]	; (8004394 <HAL_GPIO_Init+0x53c>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d00d      	beq.n	80042ac <HAL_GPIO_Init+0x454>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a41      	ldr	r2, [pc, #260]	; (8004398 <HAL_GPIO_Init+0x540>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d007      	beq.n	80042a8 <HAL_GPIO_Init+0x450>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a40      	ldr	r2, [pc, #256]	; (800439c <HAL_GPIO_Init+0x544>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d101      	bne.n	80042a4 <HAL_GPIO_Init+0x44c>
 80042a0:	2304      	movs	r3, #4
 80042a2:	e008      	b.n	80042b6 <HAL_GPIO_Init+0x45e>
 80042a4:	2307      	movs	r3, #7
 80042a6:	e006      	b.n	80042b6 <HAL_GPIO_Init+0x45e>
 80042a8:	2303      	movs	r3, #3
 80042aa:	e004      	b.n	80042b6 <HAL_GPIO_Init+0x45e>
 80042ac:	2302      	movs	r3, #2
 80042ae:	e002      	b.n	80042b6 <HAL_GPIO_Init+0x45e>
 80042b0:	2301      	movs	r3, #1
 80042b2:	e000      	b.n	80042b6 <HAL_GPIO_Init+0x45e>
 80042b4:	2300      	movs	r3, #0
 80042b6:	69fa      	ldr	r2, [r7, #28]
 80042b8:	f002 0203 	and.w	r2, r2, #3
 80042bc:	0092      	lsls	r2, r2, #2
 80042be:	4093      	lsls	r3, r2
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042c6:	4936      	ldr	r1, [pc, #216]	; (80043a0 <HAL_GPIO_Init+0x548>)
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	089b      	lsrs	r3, r3, #2
 80042cc:	3302      	adds	r3, #2
 80042ce:	69ba      	ldr	r2, [r7, #24]
 80042d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042d4:	4b33      	ldr	r3, [pc, #204]	; (80043a4 <HAL_GPIO_Init+0x54c>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	43db      	mvns	r3, r3
 80042de:	69ba      	ldr	r2, [r7, #24]
 80042e0:	4013      	ands	r3, r2
 80042e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d003      	beq.n	80042f8 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 80042f0:	69ba      	ldr	r2, [r7, #24]
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042f8:	4a2a      	ldr	r2, [pc, #168]	; (80043a4 <HAL_GPIO_Init+0x54c>)
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80042fe:	4b29      	ldr	r3, [pc, #164]	; (80043a4 <HAL_GPIO_Init+0x54c>)
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	43db      	mvns	r3, r3
 8004308:	69ba      	ldr	r2, [r7, #24]
 800430a:	4013      	ands	r3, r2
 800430c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d003      	beq.n	8004322 <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 800431a:	69ba      	ldr	r2, [r7, #24]
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	4313      	orrs	r3, r2
 8004320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004322:	4a20      	ldr	r2, [pc, #128]	; (80043a4 <HAL_GPIO_Init+0x54c>)
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004328:	4b1e      	ldr	r3, [pc, #120]	; (80043a4 <HAL_GPIO_Init+0x54c>)
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	43db      	mvns	r3, r3
 8004332:	69ba      	ldr	r2, [r7, #24]
 8004334:	4013      	ands	r3, r2
 8004336:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d003      	beq.n	800434c <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 8004344:	69ba      	ldr	r2, [r7, #24]
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	4313      	orrs	r3, r2
 800434a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800434c:	4a15      	ldr	r2, [pc, #84]	; (80043a4 <HAL_GPIO_Init+0x54c>)
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004352:	4b14      	ldr	r3, [pc, #80]	; (80043a4 <HAL_GPIO_Init+0x54c>)
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	43db      	mvns	r3, r3
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	4013      	ands	r3, r2
 8004360:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d003      	beq.n	8004376 <HAL_GPIO_Init+0x51e>
        {
          temp |= iocurrent;
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	4313      	orrs	r3, r2
 8004374:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004376:	4a0b      	ldr	r2, [pc, #44]	; (80043a4 <HAL_GPIO_Init+0x54c>)
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	3301      	adds	r3, #1
 8004380:	61fb      	str	r3, [r7, #28]
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	2b0f      	cmp	r3, #15
 8004386:	f67f ae05 	bls.w	8003f94 <HAL_GPIO_Init+0x13c>
      }
    }
  }
}
 800438a:	bf00      	nop
 800438c:	3720      	adds	r7, #32
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	40020800 	.word	0x40020800
 8004398:	40020c00 	.word	0x40020c00
 800439c:	40021000 	.word	0x40021000
 80043a0:	40013800 	.word	0x40013800
 80043a4:	40013c00 	.word	0x40013c00

080043a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	460b      	mov	r3, r1
 80043b2:	807b      	strh	r3, [r7, #2]
 80043b4:	4613      	mov	r3, r2
 80043b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80043b8:	887b      	ldrh	r3, [r7, #2]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d004      	beq.n	80043c8 <HAL_GPIO_WritePin+0x20>
 80043be:	887b      	ldrh	r3, [r7, #2]
 80043c0:	0c1b      	lsrs	r3, r3, #16
 80043c2:	041b      	lsls	r3, r3, #16
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d004      	beq.n	80043d2 <HAL_GPIO_WritePin+0x2a>
 80043c8:	f240 119f 	movw	r1, #415	; 0x19f
 80043cc:	480e      	ldr	r0, [pc, #56]	; (8004408 <HAL_GPIO_WritePin+0x60>)
 80043ce:	f7fd fad9 	bl	8001984 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80043d2:	787b      	ldrb	r3, [r7, #1]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d007      	beq.n	80043e8 <HAL_GPIO_WritePin+0x40>
 80043d8:	787b      	ldrb	r3, [r7, #1]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d004      	beq.n	80043e8 <HAL_GPIO_WritePin+0x40>
 80043de:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 80043e2:	4809      	ldr	r0, [pc, #36]	; (8004408 <HAL_GPIO_WritePin+0x60>)
 80043e4:	f7fd face 	bl	8001984 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80043e8:	787b      	ldrb	r3, [r7, #1]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043ee:	887a      	ldrh	r2, [r7, #2]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80043f4:	e003      	b.n	80043fe <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80043f6:	887b      	ldrh	r3, [r7, #2]
 80043f8:	041a      	lsls	r2, r3, #16
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	619a      	str	r2, [r3, #24]
}
 80043fe:	bf00      	nop
 8004400:	3708      	adds	r7, #8
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	080119a0 	.word	0x080119a0

0800440c <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	460b      	mov	r3, r1
 8004416:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004418:	887b      	ldrh	r3, [r7, #2]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d004      	beq.n	8004428 <HAL_GPIO_TogglePin+0x1c>
 800441e:	887b      	ldrh	r3, [r7, #2]
 8004420:	0c1b      	lsrs	r3, r3, #16
 8004422:	041b      	lsls	r3, r3, #16
 8004424:	2b00      	cmp	r3, #0
 8004426:	d004      	beq.n	8004432 <HAL_GPIO_TogglePin+0x26>
 8004428:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 800442c:	480a      	ldr	r0, [pc, #40]	; (8004458 <HAL_GPIO_TogglePin+0x4c>)
 800442e:	f7fd faa9 	bl	8001984 <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	695a      	ldr	r2, [r3, #20]
 8004436:	887b      	ldrh	r3, [r7, #2]
 8004438:	401a      	ands	r2, r3
 800443a:	887b      	ldrh	r3, [r7, #2]
 800443c:	429a      	cmp	r2, r3
 800443e:	d104      	bne.n	800444a <HAL_GPIO_TogglePin+0x3e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004440:	887b      	ldrh	r3, [r7, #2]
 8004442:	041a      	lsls	r2, r3, #16
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004448:	e002      	b.n	8004450 <HAL_GPIO_TogglePin+0x44>
    GPIOx->BSRR = GPIO_Pin;
 800444a:	887a      	ldrh	r2, [r7, #2]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	619a      	str	r2, [r3, #24]
}
 8004450:	bf00      	nop
 8004452:	3708      	adds	r7, #8
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	080119a0 	.word	0x080119a0

0800445c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	4603      	mov	r3, r0
 8004464:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004466:	4b08      	ldr	r3, [pc, #32]	; (8004488 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004468:	695a      	ldr	r2, [r3, #20]
 800446a:	88fb      	ldrh	r3, [r7, #6]
 800446c:	4013      	ands	r3, r2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d006      	beq.n	8004480 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004472:	4a05      	ldr	r2, [pc, #20]	; (8004488 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004474:	88fb      	ldrh	r3, [r7, #6]
 8004476:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004478:	88fb      	ldrh	r3, [r7, #6]
 800447a:	4618      	mov	r0, r3
 800447c:	f7fd f862 	bl	8001544 <HAL_GPIO_EXTI_Callback>
  }
}
 8004480:	bf00      	nop
 8004482:	3708      	adds	r7, #8
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	40013c00 	.word	0x40013c00

0800448c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800448c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800448e:	b08f      	sub	sp, #60	; 0x3c
 8004490:	af0a      	add	r7, sp, #40	; 0x28
 8004492:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e05d      	b.n	800455a <HAL_HCD_Init+0xce>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044a6:	d003      	beq.n	80044b0 <HAL_HCD_Init+0x24>
 80044a8:	217a      	movs	r1, #122	; 0x7a
 80044aa:	482e      	ldr	r0, [pc, #184]	; (8004564 <HAL_HCD_Init+0xd8>)
 80044ac:	f7fd fa6a 	bl	8001984 <assert_failed>

  USBx = hhcd->Instance;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d106      	bne.n	80044d0 <HAL_HCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f00c fdc6 	bl	801105c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2203      	movs	r2, #3
 80044d4:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d102      	bne.n	80044ea <HAL_HCD_Init+0x5e>
  {
    hhcd->Init.dma_enable = 0U;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f004 fd60 	bl	8008fb4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	603b      	str	r3, [r7, #0]
 80044fa:	687e      	ldr	r6, [r7, #4]
 80044fc:	466d      	mov	r5, sp
 80044fe:	f106 0410 	add.w	r4, r6, #16
 8004502:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004504:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004506:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004508:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800450a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800450e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004512:	1d33      	adds	r3, r6, #4
 8004514:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004516:	6838      	ldr	r0, [r7, #0]
 8004518:	f004 fcda 	bl	8008ed0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2101      	movs	r1, #1
 8004522:	4618      	mov	r0, r3
 8004524:	f004 fd57 	bl	8008fd6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	603b      	str	r3, [r7, #0]
 800452e:	687e      	ldr	r6, [r7, #4]
 8004530:	466d      	mov	r5, sp
 8004532:	f106 0410 	add.w	r4, r6, #16
 8004536:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004538:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800453a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800453c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800453e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004542:	e885 0003 	stmia.w	r5, {r0, r1}
 8004546:	1d33      	adds	r3, r6, #4
 8004548:	cb0e      	ldmia	r3, {r1, r2, r3}
 800454a:	6838      	ldr	r0, [r7, #0]
 800454c:	f004 fe6a 	bl	8009224 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004562:	bf00      	nop
 8004564:	080119dc 	.word	0x080119dc

08004568 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8004568:	b590      	push	{r4, r7, lr}
 800456a:	b089      	sub	sp, #36	; 0x24
 800456c:	af04      	add	r7, sp, #16
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	4608      	mov	r0, r1
 8004572:	4611      	mov	r1, r2
 8004574:	461a      	mov	r2, r3
 8004576:	4603      	mov	r3, r0
 8004578:	70fb      	strb	r3, [r7, #3]
 800457a:	460b      	mov	r3, r1
 800457c:	70bb      	strb	r3, [r7, #2]
 800457e:	4613      	mov	r3, r2
 8004580:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004588:	2b01      	cmp	r3, #1
 800458a:	d101      	bne.n	8004590 <HAL_HCD_HC_Init+0x28>
 800458c:	2302      	movs	r3, #2
 800458e:	e07f      	b.n	8004690 <HAL_HCD_HC_Init+0x128>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8004598:	78fa      	ldrb	r2, [r7, #3]
 800459a:	6879      	ldr	r1, [r7, #4]
 800459c:	4613      	mov	r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	4413      	add	r3, r2
 80045a2:	00db      	lsls	r3, r3, #3
 80045a4:	440b      	add	r3, r1
 80045a6:	333d      	adds	r3, #61	; 0x3d
 80045a8:	2200      	movs	r2, #0
 80045aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80045ac:	78fa      	ldrb	r2, [r7, #3]
 80045ae:	6879      	ldr	r1, [r7, #4]
 80045b0:	4613      	mov	r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	4413      	add	r3, r2
 80045b6:	00db      	lsls	r3, r3, #3
 80045b8:	440b      	add	r3, r1
 80045ba:	3338      	adds	r3, #56	; 0x38
 80045bc:	787a      	ldrb	r2, [r7, #1]
 80045be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80045c0:	78fa      	ldrb	r2, [r7, #3]
 80045c2:	6879      	ldr	r1, [r7, #4]
 80045c4:	4613      	mov	r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	4413      	add	r3, r2
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	440b      	add	r3, r1
 80045ce:	3340      	adds	r3, #64	; 0x40
 80045d0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80045d2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80045d4:	78fa      	ldrb	r2, [r7, #3]
 80045d6:	6879      	ldr	r1, [r7, #4]
 80045d8:	4613      	mov	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4413      	add	r3, r2
 80045de:	00db      	lsls	r3, r3, #3
 80045e0:	440b      	add	r3, r1
 80045e2:	3339      	adds	r3, #57	; 0x39
 80045e4:	78fa      	ldrb	r2, [r7, #3]
 80045e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80045e8:	78fa      	ldrb	r2, [r7, #3]
 80045ea:	6879      	ldr	r1, [r7, #4]
 80045ec:	4613      	mov	r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4413      	add	r3, r2
 80045f2:	00db      	lsls	r3, r3, #3
 80045f4:	440b      	add	r3, r1
 80045f6:	333f      	adds	r3, #63	; 0x3f
 80045f8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80045fc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80045fe:	78fa      	ldrb	r2, [r7, #3]
 8004600:	78bb      	ldrb	r3, [r7, #2]
 8004602:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004606:	b2d8      	uxtb	r0, r3
 8004608:	6879      	ldr	r1, [r7, #4]
 800460a:	4613      	mov	r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	4413      	add	r3, r2
 8004610:	00db      	lsls	r3, r3, #3
 8004612:	440b      	add	r3, r1
 8004614:	333a      	adds	r3, #58	; 0x3a
 8004616:	4602      	mov	r2, r0
 8004618:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800461a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800461e:	2b00      	cmp	r3, #0
 8004620:	da0a      	bge.n	8004638 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004622:	78fa      	ldrb	r2, [r7, #3]
 8004624:	6879      	ldr	r1, [r7, #4]
 8004626:	4613      	mov	r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	4413      	add	r3, r2
 800462c:	00db      	lsls	r3, r3, #3
 800462e:	440b      	add	r3, r1
 8004630:	333b      	adds	r3, #59	; 0x3b
 8004632:	2201      	movs	r2, #1
 8004634:	701a      	strb	r2, [r3, #0]
 8004636:	e009      	b.n	800464c <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004638:	78fa      	ldrb	r2, [r7, #3]
 800463a:	6879      	ldr	r1, [r7, #4]
 800463c:	4613      	mov	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	4413      	add	r3, r2
 8004642:	00db      	lsls	r3, r3, #3
 8004644:	440b      	add	r3, r1
 8004646:	333b      	adds	r3, #59	; 0x3b
 8004648:	2200      	movs	r2, #0
 800464a:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800464c:	78fa      	ldrb	r2, [r7, #3]
 800464e:	6879      	ldr	r1, [r7, #4]
 8004650:	4613      	mov	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4413      	add	r3, r2
 8004656:	00db      	lsls	r3, r3, #3
 8004658:	440b      	add	r3, r1
 800465a:	333c      	adds	r3, #60	; 0x3c
 800465c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004660:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6818      	ldr	r0, [r3, #0]
 8004666:	787c      	ldrb	r4, [r7, #1]
 8004668:	78ba      	ldrb	r2, [r7, #2]
 800466a:	78f9      	ldrb	r1, [r7, #3]
 800466c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800466e:	9302      	str	r3, [sp, #8]
 8004670:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004674:	9301      	str	r3, [sp, #4]
 8004676:	f897 3020 	ldrb.w	r3, [r7, #32]
 800467a:	9300      	str	r3, [sp, #0]
 800467c:	4623      	mov	r3, r4
 800467e:	f004 ff53 	bl	8009528 <USB_HC_Init>
 8004682:	4603      	mov	r3, r0
 8004684:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800468e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004690:	4618      	mov	r0, r3
 8004692:	3714      	adds	r7, #20
 8004694:	46bd      	mov	sp, r7
 8004696:	bd90      	pop	{r4, r7, pc}

08004698 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	460b      	mov	r3, r1
 80046a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80046a4:	2300      	movs	r3, #0
 80046a6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d101      	bne.n	80046b6 <HAL_HCD_HC_Halt+0x1e>
 80046b2:	2302      	movs	r3, #2
 80046b4:	e00f      	b.n	80046d6 <HAL_HCD_HC_Halt+0x3e>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	78fa      	ldrb	r2, [r7, #3]
 80046c4:	4611      	mov	r1, r2
 80046c6:	4618      	mov	r0, r3
 80046c8:	f005 f98d 	bl	80099e6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80046d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
	...

080046e0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	4608      	mov	r0, r1
 80046ea:	4611      	mov	r1, r2
 80046ec:	461a      	mov	r2, r3
 80046ee:	4603      	mov	r3, r0
 80046f0:	70fb      	strb	r3, [r7, #3]
 80046f2:	460b      	mov	r3, r1
 80046f4:	70bb      	strb	r3, [r7, #2]
 80046f6:	4613      	mov	r3, r2
 80046f8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80046fa:	78fa      	ldrb	r2, [r7, #3]
 80046fc:	6879      	ldr	r1, [r7, #4]
 80046fe:	4613      	mov	r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	4413      	add	r3, r2
 8004704:	00db      	lsls	r3, r3, #3
 8004706:	440b      	add	r3, r1
 8004708:	333b      	adds	r3, #59	; 0x3b
 800470a:	78ba      	ldrb	r2, [r7, #2]
 800470c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800470e:	78fa      	ldrb	r2, [r7, #3]
 8004710:	6879      	ldr	r1, [r7, #4]
 8004712:	4613      	mov	r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4413      	add	r3, r2
 8004718:	00db      	lsls	r3, r3, #3
 800471a:	440b      	add	r3, r1
 800471c:	333f      	adds	r3, #63	; 0x3f
 800471e:	787a      	ldrb	r2, [r7, #1]
 8004720:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004722:	7c3b      	ldrb	r3, [r7, #16]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d114      	bne.n	8004752 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004728:	78fa      	ldrb	r2, [r7, #3]
 800472a:	6879      	ldr	r1, [r7, #4]
 800472c:	4613      	mov	r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	4413      	add	r3, r2
 8004732:	00db      	lsls	r3, r3, #3
 8004734:	440b      	add	r3, r1
 8004736:	3342      	adds	r3, #66	; 0x42
 8004738:	2203      	movs	r2, #3
 800473a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800473c:	78fa      	ldrb	r2, [r7, #3]
 800473e:	6879      	ldr	r1, [r7, #4]
 8004740:	4613      	mov	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	440b      	add	r3, r1
 800474a:	333d      	adds	r3, #61	; 0x3d
 800474c:	7f3a      	ldrb	r2, [r7, #28]
 800474e:	701a      	strb	r2, [r3, #0]
 8004750:	e009      	b.n	8004766 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004752:	78fa      	ldrb	r2, [r7, #3]
 8004754:	6879      	ldr	r1, [r7, #4]
 8004756:	4613      	mov	r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	4413      	add	r3, r2
 800475c:	00db      	lsls	r3, r3, #3
 800475e:	440b      	add	r3, r1
 8004760:	3342      	adds	r3, #66	; 0x42
 8004762:	2202      	movs	r2, #2
 8004764:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004766:	787b      	ldrb	r3, [r7, #1]
 8004768:	2b03      	cmp	r3, #3
 800476a:	f200 80d6 	bhi.w	800491a <HAL_HCD_HC_SubmitRequest+0x23a>
 800476e:	a201      	add	r2, pc, #4	; (adr r2, 8004774 <HAL_HCD_HC_SubmitRequest+0x94>)
 8004770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004774:	08004785 	.word	0x08004785
 8004778:	08004905 	.word	0x08004905
 800477c:	080047f1 	.word	0x080047f1
 8004780:	0800487b 	.word	0x0800487b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004784:	7c3b      	ldrb	r3, [r7, #16]
 8004786:	2b01      	cmp	r3, #1
 8004788:	f040 80c9 	bne.w	800491e <HAL_HCD_HC_SubmitRequest+0x23e>
 800478c:	78bb      	ldrb	r3, [r7, #2]
 800478e:	2b00      	cmp	r3, #0
 8004790:	f040 80c5 	bne.w	800491e <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8004794:	8b3b      	ldrh	r3, [r7, #24]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d109      	bne.n	80047ae <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800479a:	78fa      	ldrb	r2, [r7, #3]
 800479c:	6879      	ldr	r1, [r7, #4]
 800479e:	4613      	mov	r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	4413      	add	r3, r2
 80047a4:	00db      	lsls	r3, r3, #3
 80047a6:	440b      	add	r3, r1
 80047a8:	3351      	adds	r3, #81	; 0x51
 80047aa:	2201      	movs	r2, #1
 80047ac:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80047ae:	78fa      	ldrb	r2, [r7, #3]
 80047b0:	6879      	ldr	r1, [r7, #4]
 80047b2:	4613      	mov	r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	4413      	add	r3, r2
 80047b8:	00db      	lsls	r3, r3, #3
 80047ba:	440b      	add	r3, r1
 80047bc:	3351      	adds	r3, #81	; 0x51
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d10a      	bne.n	80047da <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80047c4:	78fa      	ldrb	r2, [r7, #3]
 80047c6:	6879      	ldr	r1, [r7, #4]
 80047c8:	4613      	mov	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4413      	add	r3, r2
 80047ce:	00db      	lsls	r3, r3, #3
 80047d0:	440b      	add	r3, r1
 80047d2:	3342      	adds	r3, #66	; 0x42
 80047d4:	2200      	movs	r2, #0
 80047d6:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80047d8:	e0a1      	b.n	800491e <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80047da:	78fa      	ldrb	r2, [r7, #3]
 80047dc:	6879      	ldr	r1, [r7, #4]
 80047de:	4613      	mov	r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	4413      	add	r3, r2
 80047e4:	00db      	lsls	r3, r3, #3
 80047e6:	440b      	add	r3, r1
 80047e8:	3342      	adds	r3, #66	; 0x42
 80047ea:	2202      	movs	r2, #2
 80047ec:	701a      	strb	r2, [r3, #0]
      break;
 80047ee:	e096      	b.n	800491e <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80047f0:	78bb      	ldrb	r3, [r7, #2]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d120      	bne.n	8004838 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80047f6:	78fa      	ldrb	r2, [r7, #3]
 80047f8:	6879      	ldr	r1, [r7, #4]
 80047fa:	4613      	mov	r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	4413      	add	r3, r2
 8004800:	00db      	lsls	r3, r3, #3
 8004802:	440b      	add	r3, r1
 8004804:	3351      	adds	r3, #81	; 0x51
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d10a      	bne.n	8004822 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800480c:	78fa      	ldrb	r2, [r7, #3]
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	4613      	mov	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4413      	add	r3, r2
 8004816:	00db      	lsls	r3, r3, #3
 8004818:	440b      	add	r3, r1
 800481a:	3342      	adds	r3, #66	; 0x42
 800481c:	2200      	movs	r2, #0
 800481e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004820:	e07e      	b.n	8004920 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004822:	78fa      	ldrb	r2, [r7, #3]
 8004824:	6879      	ldr	r1, [r7, #4]
 8004826:	4613      	mov	r3, r2
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	4413      	add	r3, r2
 800482c:	00db      	lsls	r3, r3, #3
 800482e:	440b      	add	r3, r1
 8004830:	3342      	adds	r3, #66	; 0x42
 8004832:	2202      	movs	r2, #2
 8004834:	701a      	strb	r2, [r3, #0]
      break;
 8004836:	e073      	b.n	8004920 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004838:	78fa      	ldrb	r2, [r7, #3]
 800483a:	6879      	ldr	r1, [r7, #4]
 800483c:	4613      	mov	r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	4413      	add	r3, r2
 8004842:	00db      	lsls	r3, r3, #3
 8004844:	440b      	add	r3, r1
 8004846:	3350      	adds	r3, #80	; 0x50
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10a      	bne.n	8004864 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800484e:	78fa      	ldrb	r2, [r7, #3]
 8004850:	6879      	ldr	r1, [r7, #4]
 8004852:	4613      	mov	r3, r2
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	4413      	add	r3, r2
 8004858:	00db      	lsls	r3, r3, #3
 800485a:	440b      	add	r3, r1
 800485c:	3342      	adds	r3, #66	; 0x42
 800485e:	2200      	movs	r2, #0
 8004860:	701a      	strb	r2, [r3, #0]
      break;
 8004862:	e05d      	b.n	8004920 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004864:	78fa      	ldrb	r2, [r7, #3]
 8004866:	6879      	ldr	r1, [r7, #4]
 8004868:	4613      	mov	r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4413      	add	r3, r2
 800486e:	00db      	lsls	r3, r3, #3
 8004870:	440b      	add	r3, r1
 8004872:	3342      	adds	r3, #66	; 0x42
 8004874:	2202      	movs	r2, #2
 8004876:	701a      	strb	r2, [r3, #0]
      break;
 8004878:	e052      	b.n	8004920 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800487a:	78bb      	ldrb	r3, [r7, #2]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d120      	bne.n	80048c2 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004880:	78fa      	ldrb	r2, [r7, #3]
 8004882:	6879      	ldr	r1, [r7, #4]
 8004884:	4613      	mov	r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4413      	add	r3, r2
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	440b      	add	r3, r1
 800488e:	3351      	adds	r3, #81	; 0x51
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10a      	bne.n	80048ac <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004896:	78fa      	ldrb	r2, [r7, #3]
 8004898:	6879      	ldr	r1, [r7, #4]
 800489a:	4613      	mov	r3, r2
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	4413      	add	r3, r2
 80048a0:	00db      	lsls	r3, r3, #3
 80048a2:	440b      	add	r3, r1
 80048a4:	3342      	adds	r3, #66	; 0x42
 80048a6:	2200      	movs	r2, #0
 80048a8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80048aa:	e039      	b.n	8004920 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80048ac:	78fa      	ldrb	r2, [r7, #3]
 80048ae:	6879      	ldr	r1, [r7, #4]
 80048b0:	4613      	mov	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4413      	add	r3, r2
 80048b6:	00db      	lsls	r3, r3, #3
 80048b8:	440b      	add	r3, r1
 80048ba:	3342      	adds	r3, #66	; 0x42
 80048bc:	2202      	movs	r2, #2
 80048be:	701a      	strb	r2, [r3, #0]
      break;
 80048c0:	e02e      	b.n	8004920 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80048c2:	78fa      	ldrb	r2, [r7, #3]
 80048c4:	6879      	ldr	r1, [r7, #4]
 80048c6:	4613      	mov	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	4413      	add	r3, r2
 80048cc:	00db      	lsls	r3, r3, #3
 80048ce:	440b      	add	r3, r1
 80048d0:	3350      	adds	r3, #80	; 0x50
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10a      	bne.n	80048ee <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80048d8:	78fa      	ldrb	r2, [r7, #3]
 80048da:	6879      	ldr	r1, [r7, #4]
 80048dc:	4613      	mov	r3, r2
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	4413      	add	r3, r2
 80048e2:	00db      	lsls	r3, r3, #3
 80048e4:	440b      	add	r3, r1
 80048e6:	3342      	adds	r3, #66	; 0x42
 80048e8:	2200      	movs	r2, #0
 80048ea:	701a      	strb	r2, [r3, #0]
      break;
 80048ec:	e018      	b.n	8004920 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80048ee:	78fa      	ldrb	r2, [r7, #3]
 80048f0:	6879      	ldr	r1, [r7, #4]
 80048f2:	4613      	mov	r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	4413      	add	r3, r2
 80048f8:	00db      	lsls	r3, r3, #3
 80048fa:	440b      	add	r3, r1
 80048fc:	3342      	adds	r3, #66	; 0x42
 80048fe:	2202      	movs	r2, #2
 8004900:	701a      	strb	r2, [r3, #0]
      break;
 8004902:	e00d      	b.n	8004920 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004904:	78fa      	ldrb	r2, [r7, #3]
 8004906:	6879      	ldr	r1, [r7, #4]
 8004908:	4613      	mov	r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	4413      	add	r3, r2
 800490e:	00db      	lsls	r3, r3, #3
 8004910:	440b      	add	r3, r1
 8004912:	3342      	adds	r3, #66	; 0x42
 8004914:	2200      	movs	r2, #0
 8004916:	701a      	strb	r2, [r3, #0]
      break;
 8004918:	e002      	b.n	8004920 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 800491a:	bf00      	nop
 800491c:	e000      	b.n	8004920 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 800491e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004920:	78fa      	ldrb	r2, [r7, #3]
 8004922:	6879      	ldr	r1, [r7, #4]
 8004924:	4613      	mov	r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4413      	add	r3, r2
 800492a:	00db      	lsls	r3, r3, #3
 800492c:	440b      	add	r3, r1
 800492e:	3344      	adds	r3, #68	; 0x44
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004934:	78fa      	ldrb	r2, [r7, #3]
 8004936:	8b39      	ldrh	r1, [r7, #24]
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	4613      	mov	r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	4413      	add	r3, r2
 8004940:	00db      	lsls	r3, r3, #3
 8004942:	4403      	add	r3, r0
 8004944:	3348      	adds	r3, #72	; 0x48
 8004946:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004948:	78fa      	ldrb	r2, [r7, #3]
 800494a:	6879      	ldr	r1, [r7, #4]
 800494c:	4613      	mov	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	00db      	lsls	r3, r3, #3
 8004954:	440b      	add	r3, r1
 8004956:	335c      	adds	r3, #92	; 0x5c
 8004958:	2200      	movs	r2, #0
 800495a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800495c:	78fa      	ldrb	r2, [r7, #3]
 800495e:	6879      	ldr	r1, [r7, #4]
 8004960:	4613      	mov	r3, r2
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	4413      	add	r3, r2
 8004966:	00db      	lsls	r3, r3, #3
 8004968:	440b      	add	r3, r1
 800496a:	334c      	adds	r3, #76	; 0x4c
 800496c:	2200      	movs	r2, #0
 800496e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004970:	78fa      	ldrb	r2, [r7, #3]
 8004972:	6879      	ldr	r1, [r7, #4]
 8004974:	4613      	mov	r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	4413      	add	r3, r2
 800497a:	00db      	lsls	r3, r3, #3
 800497c:	440b      	add	r3, r1
 800497e:	3339      	adds	r3, #57	; 0x39
 8004980:	78fa      	ldrb	r2, [r7, #3]
 8004982:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004984:	78fa      	ldrb	r2, [r7, #3]
 8004986:	6879      	ldr	r1, [r7, #4]
 8004988:	4613      	mov	r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	440b      	add	r3, r1
 8004992:	335d      	adds	r3, #93	; 0x5d
 8004994:	2200      	movs	r2, #0
 8004996:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6818      	ldr	r0, [r3, #0]
 800499c:	78fa      	ldrb	r2, [r7, #3]
 800499e:	4613      	mov	r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4413      	add	r3, r2
 80049a4:	00db      	lsls	r3, r3, #3
 80049a6:	3338      	adds	r3, #56	; 0x38
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	18d1      	adds	r1, r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	461a      	mov	r2, r3
 80049b4:	f004 fec2 	bl	800973c <USB_HC_StartXfer>
 80049b8:	4603      	mov	r3, r0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3708      	adds	r7, #8
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop

080049c4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b086      	sub	sp, #24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4618      	mov	r0, r3
 80049dc:	f004 fbdf 	bl	800919e <USB_GetMode>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	f040 80ef 	bne.w	8004bc6 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4618      	mov	r0, r3
 80049ee:	f004 fbc3 	bl	8009178 <USB_ReadInterrupts>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 80e5 	beq.w	8004bc4 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f004 fbba 	bl	8009178 <USB_ReadInterrupts>
 8004a04:	4603      	mov	r3, r0
 8004a06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a0e:	d104      	bne.n	8004a1a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004a18:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f004 fbaa 	bl	8009178 <USB_ReadInterrupts>
 8004a24:	4603      	mov	r3, r0
 8004a26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a2e:	d104      	bne.n	8004a3a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004a38:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f004 fb9a 	bl	8009178 <USB_ReadInterrupts>
 8004a44:	4603      	mov	r3, r0
 8004a46:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a4e:	d104      	bne.n	8004a5a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004a58:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f004 fb8a 	bl	8009178 <USB_ReadInterrupts>
 8004a64:	4603      	mov	r3, r0
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d103      	bne.n	8004a76 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2202      	movs	r2, #2
 8004a74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f004 fb7c 	bl	8009178 <USB_ReadInterrupts>
 8004a80:	4603      	mov	r3, r0
 8004a82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a8a:	d115      	bne.n	8004ab8 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004a94:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d108      	bne.n	8004ab8 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f00c fb56 	bl	8011158 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2101      	movs	r1, #1
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f004 fc72 	bl	800939c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f004 fb5b 	bl	8009178 <USB_ReadInterrupts>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ac8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004acc:	d102      	bne.n	8004ad4 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f001 f966 	bl	8005da0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f004 fb4d 	bl	8009178 <USB_ReadInterrupts>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	f003 0308 	and.w	r3, r3, #8
 8004ae4:	2b08      	cmp	r3, #8
 8004ae6:	d106      	bne.n	8004af6 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f00c fb19 	bl	8011120 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2208      	movs	r2, #8
 8004af4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f004 fb3c 	bl	8009178 <USB_ReadInterrupts>
 8004b00:	4603      	mov	r3, r0
 8004b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b0a:	d138      	bne.n	8004b7e <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f004 ff57 	bl	80099c4 <USB_HC_ReadInterrupt>
 8004b16:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004b18:	2300      	movs	r3, #0
 8004b1a:	617b      	str	r3, [r7, #20]
 8004b1c:	e025      	b.n	8004b6a <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f003 030f 	and.w	r3, r3, #15
 8004b24:	68ba      	ldr	r2, [r7, #8]
 8004b26:	fa22 f303 	lsr.w	r3, r2, r3
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d018      	beq.n	8004b64 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	015a      	lsls	r2, r3, #5
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	4413      	add	r3, r2
 8004b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b48:	d106      	bne.n	8004b58 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	4619      	mov	r1, r3
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 f8cf 	bl	8004cf4 <HCD_HC_IN_IRQHandler>
 8004b56:	e005      	b.n	8004b64 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 fcfd 	bl	800555e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	3301      	adds	r3, #1
 8004b68:	617b      	str	r3, [r7, #20]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	697a      	ldr	r2, [r7, #20]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d3d4      	bcc.n	8004b1e <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4618      	mov	r0, r3
 8004b84:	f004 faf8 	bl	8009178 <USB_ReadInterrupts>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	f003 0310 	and.w	r3, r3, #16
 8004b8e:	2b10      	cmp	r3, #16
 8004b90:	d101      	bne.n	8004b96 <HAL_HCD_IRQHandler+0x1d2>
 8004b92:	2301      	movs	r3, #1
 8004b94:	e000      	b.n	8004b98 <HAL_HCD_IRQHandler+0x1d4>
 8004b96:	2300      	movs	r3, #0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d014      	beq.n	8004bc6 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	699a      	ldr	r2, [r3, #24]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f022 0210 	bic.w	r2, r2, #16
 8004baa:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f001 f84b 	bl	8005c48 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	699a      	ldr	r2, [r3, #24]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f042 0210 	orr.w	r2, r2, #16
 8004bc0:	619a      	str	r2, [r3, #24]
 8004bc2:	e000      	b.n	8004bc6 <HAL_HCD_IRQHandler+0x202>
      return;
 8004bc4:	bf00      	nop
    }
  }
}
 8004bc6:	3718      	adds	r7, #24
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d101      	bne.n	8004be2 <HAL_HCD_Start+0x16>
 8004bde:	2302      	movs	r3, #2
 8004be0:	e013      	b.n	8004c0a <HAL_HCD_Start+0x3e>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f004 f9cf 	bl	8008f92 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f004 fc32 	bl	8009464 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3708      	adds	r7, #8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b082      	sub	sp, #8
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d101      	bne.n	8004c28 <HAL_HCD_Stop+0x16>
 8004c24:	2302      	movs	r3, #2
 8004c26:	e00d      	b.n	8004c44 <HAL_HCD_Stop+0x32>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f005 f811 	bl	8009c5c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3708      	adds	r7, #8
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f004 fbd9 	bl	8009410 <USB_ResetPort>
 8004c5e:	4603      	mov	r3, r0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3708      	adds	r7, #8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	460b      	mov	r3, r1
 8004c72:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004c74:	78fa      	ldrb	r2, [r7, #3]
 8004c76:	6879      	ldr	r1, [r7, #4]
 8004c78:	4613      	mov	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4413      	add	r3, r2
 8004c7e:	00db      	lsls	r3, r3, #3
 8004c80:	440b      	add	r3, r1
 8004c82:	335c      	adds	r3, #92	; 0x5c
 8004c84:	781b      	ldrb	r3, [r3, #0]
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	370c      	adds	r7, #12
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr

08004c92 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b083      	sub	sp, #12
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004c9e:	78fa      	ldrb	r2, [r7, #3]
 8004ca0:	6879      	ldr	r1, [r7, #4]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	4413      	add	r3, r2
 8004ca8:	00db      	lsls	r3, r3, #3
 8004caa:	440b      	add	r3, r1
 8004cac:	334c      	adds	r3, #76	; 0x4c
 8004cae:	681b      	ldr	r3, [r3, #0]
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f004 fc1b 	bl	8009504 <USB_GetCurrentFrame>
 8004cce:	4603      	mov	r3, r0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3708      	adds	r7, #8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f004 fbf6 	bl	80094d6 <USB_GetHostSpeed>
 8004cea:	4603      	mov	r3, r0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3708      	adds	r7, #8
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b086      	sub	sp, #24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004d0a:	78fb      	ldrb	r3, [r7, #3]
 8004d0c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	015a      	lsls	r2, r3, #5
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	4413      	add	r3, r2
 8004d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f003 0304 	and.w	r3, r3, #4
 8004d20:	2b04      	cmp	r3, #4
 8004d22:	d119      	bne.n	8004d58 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	015a      	lsls	r2, r3, #5
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d30:	461a      	mov	r2, r3
 8004d32:	2304      	movs	r3, #4
 8004d34:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	015a      	lsls	r2, r3, #5
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	0151      	lsls	r1, r2, #5
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	440a      	add	r2, r1
 8004d4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d50:	f043 0302 	orr.w	r3, r3, #2
 8004d54:	60d3      	str	r3, [r2, #12]
 8004d56:	e0ce      	b.n	8004ef6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	015a      	lsls	r2, r3, #5
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d6e:	d12c      	bne.n	8004dca <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	015a      	lsls	r2, r3, #5
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	4413      	add	r3, r2
 8004d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d82:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004d84:	6879      	ldr	r1, [r7, #4]
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4413      	add	r3, r2
 8004d8e:	00db      	lsls	r3, r3, #3
 8004d90:	440b      	add	r3, r1
 8004d92:	335d      	adds	r3, #93	; 0x5d
 8004d94:	2207      	movs	r2, #7
 8004d96:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	015a      	lsls	r2, r3, #5
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	4413      	add	r3, r2
 8004da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	0151      	lsls	r1, r2, #5
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	440a      	add	r2, r1
 8004dae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004db2:	f043 0302 	orr.w	r3, r3, #2
 8004db6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	b2d2      	uxtb	r2, r2
 8004dc0:	4611      	mov	r1, r2
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f004 fe0f 	bl	80099e6 <USB_HC_Halt>
 8004dc8:	e095      	b.n	8004ef6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	015a      	lsls	r2, r3, #5
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f003 0320 	and.w	r3, r3, #32
 8004ddc:	2b20      	cmp	r3, #32
 8004dde:	d109      	bne.n	8004df4 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	015a      	lsls	r2, r3, #5
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	4413      	add	r3, r2
 8004de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dec:	461a      	mov	r2, r3
 8004dee:	2320      	movs	r3, #32
 8004df0:	6093      	str	r3, [r2, #8]
 8004df2:	e080      	b.n	8004ef6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	015a      	lsls	r2, r3, #5
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f003 0308 	and.w	r3, r3, #8
 8004e06:	2b08      	cmp	r3, #8
 8004e08:	d134      	bne.n	8004e74 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	015a      	lsls	r2, r3, #5
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	4413      	add	r3, r2
 8004e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	0151      	lsls	r1, r2, #5
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	440a      	add	r2, r1
 8004e20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e24:	f043 0302 	orr.w	r3, r3, #2
 8004e28:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8004e2a:	6879      	ldr	r1, [r7, #4]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4413      	add	r3, r2
 8004e34:	00db      	lsls	r3, r3, #3
 8004e36:	440b      	add	r3, r1
 8004e38:	335d      	adds	r3, #93	; 0x5d
 8004e3a:	2205      	movs	r2, #5
 8004e3c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	015a      	lsls	r2, r3, #5
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	4413      	add	r3, r2
 8004e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	2310      	movs	r3, #16
 8004e4e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	015a      	lsls	r2, r3, #5
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	4413      	add	r3, r2
 8004e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	2308      	movs	r3, #8
 8004e60:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	b2d2      	uxtb	r2, r2
 8004e6a:	4611      	mov	r1, r2
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f004 fdba 	bl	80099e6 <USB_HC_Halt>
 8004e72:	e040      	b.n	8004ef6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	015a      	lsls	r2, r3, #5
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e8a:	d134      	bne.n	8004ef6 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	015a      	lsls	r2, r3, #5
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	4413      	add	r3, r2
 8004e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	0151      	lsls	r1, r2, #5
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	440a      	add	r2, r1
 8004ea2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ea6:	f043 0302 	orr.w	r3, r3, #2
 8004eaa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	b2d2      	uxtb	r2, r2
 8004eb4:	4611      	mov	r1, r2
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f004 fd95 	bl	80099e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	015a      	lsls	r2, r3, #5
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ec8:	461a      	mov	r2, r3
 8004eca:	2310      	movs	r3, #16
 8004ecc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004ece:	6879      	ldr	r1, [r7, #4]
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	4413      	add	r3, r2
 8004ed8:	00db      	lsls	r3, r3, #3
 8004eda:	440b      	add	r3, r1
 8004edc:	335d      	adds	r3, #93	; 0x5d
 8004ede:	2208      	movs	r2, #8
 8004ee0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	015a      	lsls	r2, r3, #5
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	4413      	add	r3, r2
 8004eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eee:	461a      	mov	r2, r3
 8004ef0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ef4:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	015a      	lsls	r2, r3, #5
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	4413      	add	r3, r2
 8004efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f0c:	d122      	bne.n	8004f54 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	015a      	lsls	r2, r3, #5
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	4413      	add	r3, r2
 8004f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	0151      	lsls	r1, r2, #5
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	440a      	add	r2, r1
 8004f24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f28:	f043 0302 	orr.w	r3, r3, #2
 8004f2c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	b2d2      	uxtb	r2, r2
 8004f36:	4611      	mov	r1, r2
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f004 fd54 	bl	80099e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	015a      	lsls	r2, r3, #5
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	4413      	add	r3, r2
 8004f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f50:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004f52:	e300      	b.n	8005556 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	015a      	lsls	r2, r3, #5
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	f040 80fd 	bne.w	8005166 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d01b      	beq.n	8004fac <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8004f74:	6879      	ldr	r1, [r7, #4]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	4613      	mov	r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	4413      	add	r3, r2
 8004f7e:	00db      	lsls	r3, r3, #3
 8004f80:	440b      	add	r3, r1
 8004f82:	3348      	adds	r3, #72	; 0x48
 8004f84:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	0159      	lsls	r1, r3, #5
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	440b      	add	r3, r1
 8004f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8004f98:	1ad1      	subs	r1, r2, r3
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	4413      	add	r3, r2
 8004fa4:	00db      	lsls	r3, r3, #3
 8004fa6:	4403      	add	r3, r0
 8004fa8:	334c      	adds	r3, #76	; 0x4c
 8004faa:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004fac:	6879      	ldr	r1, [r7, #4]
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	4413      	add	r3, r2
 8004fb6:	00db      	lsls	r3, r3, #3
 8004fb8:	440b      	add	r3, r1
 8004fba:	335d      	adds	r3, #93	; 0x5d
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004fc0:	6879      	ldr	r1, [r7, #4]
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	4413      	add	r3, r2
 8004fca:	00db      	lsls	r3, r3, #3
 8004fcc:	440b      	add	r3, r1
 8004fce:	3358      	adds	r3, #88	; 0x58
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	015a      	lsls	r2, r3, #5
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	4413      	add	r3, r2
 8004fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004fe6:	6879      	ldr	r1, [r7, #4]
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	4613      	mov	r3, r2
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	4413      	add	r3, r2
 8004ff0:	00db      	lsls	r3, r3, #3
 8004ff2:	440b      	add	r3, r1
 8004ff4:	333f      	adds	r3, #63	; 0x3f
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00a      	beq.n	8005012 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004ffc:	6879      	ldr	r1, [r7, #4]
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	4613      	mov	r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	4413      	add	r3, r2
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	440b      	add	r3, r1
 800500a:	333f      	adds	r3, #63	; 0x3f
 800500c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800500e:	2b02      	cmp	r3, #2
 8005010:	d121      	bne.n	8005056 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	015a      	lsls	r2, r3, #5
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	4413      	add	r3, r2
 800501a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	0151      	lsls	r1, r2, #5
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	440a      	add	r2, r1
 8005028:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800502c:	f043 0302 	orr.w	r3, r3, #2
 8005030:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	b2d2      	uxtb	r2, r2
 800503a:	4611      	mov	r1, r2
 800503c:	4618      	mov	r0, r3
 800503e:	f004 fcd2 	bl	80099e6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	015a      	lsls	r2, r3, #5
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	4413      	add	r3, r2
 800504a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800504e:	461a      	mov	r2, r3
 8005050:	2310      	movs	r3, #16
 8005052:	6093      	str	r3, [r2, #8]
 8005054:	e070      	b.n	8005138 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005056:	6879      	ldr	r1, [r7, #4]
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	4613      	mov	r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4413      	add	r3, r2
 8005060:	00db      	lsls	r3, r3, #3
 8005062:	440b      	add	r3, r1
 8005064:	333f      	adds	r3, #63	; 0x3f
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	2b03      	cmp	r3, #3
 800506a:	d12a      	bne.n	80050c2 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	015a      	lsls	r2, r3, #5
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	4413      	add	r3, r2
 8005074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	0151      	lsls	r1, r2, #5
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	440a      	add	r2, r1
 8005082:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005086:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800508a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800508c:	6879      	ldr	r1, [r7, #4]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	4613      	mov	r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	00db      	lsls	r3, r3, #3
 8005098:	440b      	add	r3, r1
 800509a:	335c      	adds	r3, #92	; 0x5c
 800509c:	2201      	movs	r2, #1
 800509e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	b2d8      	uxtb	r0, r3
 80050a4:	6879      	ldr	r1, [r7, #4]
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	4613      	mov	r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	4413      	add	r3, r2
 80050ae:	00db      	lsls	r3, r3, #3
 80050b0:	440b      	add	r3, r1
 80050b2:	335c      	adds	r3, #92	; 0x5c
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	461a      	mov	r2, r3
 80050b8:	4601      	mov	r1, r0
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f00c f85a 	bl	8011174 <HAL_HCD_HC_NotifyURBChange_Callback>
 80050c0:	e03a      	b.n	8005138 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80050c2:	6879      	ldr	r1, [r7, #4]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	4613      	mov	r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	4413      	add	r3, r2
 80050cc:	00db      	lsls	r3, r3, #3
 80050ce:	440b      	add	r3, r1
 80050d0:	333f      	adds	r3, #63	; 0x3f
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d12f      	bne.n	8005138 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80050d8:	6879      	ldr	r1, [r7, #4]
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	4613      	mov	r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	4413      	add	r3, r2
 80050e2:	00db      	lsls	r3, r3, #3
 80050e4:	440b      	add	r3, r1
 80050e6:	335c      	adds	r3, #92	; 0x5c
 80050e8:	2201      	movs	r2, #1
 80050ea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80050ec:	6879      	ldr	r1, [r7, #4]
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	4613      	mov	r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	4413      	add	r3, r2
 80050f6:	00db      	lsls	r3, r3, #3
 80050f8:	440b      	add	r3, r1
 80050fa:	3350      	adds	r3, #80	; 0x50
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	f083 0301 	eor.w	r3, r3, #1
 8005102:	b2d8      	uxtb	r0, r3
 8005104:	6879      	ldr	r1, [r7, #4]
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	4613      	mov	r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	4413      	add	r3, r2
 800510e:	00db      	lsls	r3, r3, #3
 8005110:	440b      	add	r3, r1
 8005112:	3350      	adds	r3, #80	; 0x50
 8005114:	4602      	mov	r2, r0
 8005116:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	b2d8      	uxtb	r0, r3
 800511c:	6879      	ldr	r1, [r7, #4]
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	4613      	mov	r3, r2
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	4413      	add	r3, r2
 8005126:	00db      	lsls	r3, r3, #3
 8005128:	440b      	add	r3, r1
 800512a:	335c      	adds	r3, #92	; 0x5c
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	461a      	mov	r2, r3
 8005130:	4601      	mov	r1, r0
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f00c f81e 	bl	8011174 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8005138:	6879      	ldr	r1, [r7, #4]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	4613      	mov	r3, r2
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4413      	add	r3, r2
 8005142:	00db      	lsls	r3, r3, #3
 8005144:	440b      	add	r3, r1
 8005146:	3350      	adds	r3, #80	; 0x50
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	f083 0301 	eor.w	r3, r3, #1
 800514e:	b2d8      	uxtb	r0, r3
 8005150:	6879      	ldr	r1, [r7, #4]
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	4613      	mov	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4413      	add	r3, r2
 800515a:	00db      	lsls	r3, r3, #3
 800515c:	440b      	add	r3, r1
 800515e:	3350      	adds	r3, #80	; 0x50
 8005160:	4602      	mov	r2, r0
 8005162:	701a      	strb	r2, [r3, #0]
}
 8005164:	e1f7      	b.n	8005556 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	015a      	lsls	r2, r3, #5
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	4413      	add	r3, r2
 800516e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f003 0302 	and.w	r3, r3, #2
 8005178:	2b02      	cmp	r3, #2
 800517a:	f040 811a 	bne.w	80053b2 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	015a      	lsls	r2, r3, #5
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	4413      	add	r3, r2
 8005186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	0151      	lsls	r1, r2, #5
 8005190:	693a      	ldr	r2, [r7, #16]
 8005192:	440a      	add	r2, r1
 8005194:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005198:	f023 0302 	bic.w	r3, r3, #2
 800519c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800519e:	6879      	ldr	r1, [r7, #4]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	4613      	mov	r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	4413      	add	r3, r2
 80051a8:	00db      	lsls	r3, r3, #3
 80051aa:	440b      	add	r3, r1
 80051ac:	335d      	adds	r3, #93	; 0x5d
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d10a      	bne.n	80051ca <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80051b4:	6879      	ldr	r1, [r7, #4]
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	4613      	mov	r3, r2
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	4413      	add	r3, r2
 80051be:	00db      	lsls	r3, r3, #3
 80051c0:	440b      	add	r3, r1
 80051c2:	335c      	adds	r3, #92	; 0x5c
 80051c4:	2201      	movs	r2, #1
 80051c6:	701a      	strb	r2, [r3, #0]
 80051c8:	e0d9      	b.n	800537e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80051ca:	6879      	ldr	r1, [r7, #4]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	4613      	mov	r3, r2
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	4413      	add	r3, r2
 80051d4:	00db      	lsls	r3, r3, #3
 80051d6:	440b      	add	r3, r1
 80051d8:	335d      	adds	r3, #93	; 0x5d
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	2b05      	cmp	r3, #5
 80051de:	d10a      	bne.n	80051f6 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80051e0:	6879      	ldr	r1, [r7, #4]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	4613      	mov	r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4413      	add	r3, r2
 80051ea:	00db      	lsls	r3, r3, #3
 80051ec:	440b      	add	r3, r1
 80051ee:	335c      	adds	r3, #92	; 0x5c
 80051f0:	2205      	movs	r2, #5
 80051f2:	701a      	strb	r2, [r3, #0]
 80051f4:	e0c3      	b.n	800537e <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80051f6:	6879      	ldr	r1, [r7, #4]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	4613      	mov	r3, r2
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	4413      	add	r3, r2
 8005200:	00db      	lsls	r3, r3, #3
 8005202:	440b      	add	r3, r1
 8005204:	335d      	adds	r3, #93	; 0x5d
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	2b06      	cmp	r3, #6
 800520a:	d00a      	beq.n	8005222 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800520c:	6879      	ldr	r1, [r7, #4]
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	4613      	mov	r3, r2
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	4413      	add	r3, r2
 8005216:	00db      	lsls	r3, r3, #3
 8005218:	440b      	add	r3, r1
 800521a:	335d      	adds	r3, #93	; 0x5d
 800521c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800521e:	2b08      	cmp	r3, #8
 8005220:	d156      	bne.n	80052d0 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8005222:	6879      	ldr	r1, [r7, #4]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	4613      	mov	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	00db      	lsls	r3, r3, #3
 800522e:	440b      	add	r3, r1
 8005230:	3358      	adds	r3, #88	; 0x58
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	1c59      	adds	r1, r3, #1
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	4613      	mov	r3, r2
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	4413      	add	r3, r2
 8005240:	00db      	lsls	r3, r3, #3
 8005242:	4403      	add	r3, r0
 8005244:	3358      	adds	r3, #88	; 0x58
 8005246:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8005248:	6879      	ldr	r1, [r7, #4]
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	4613      	mov	r3, r2
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	4413      	add	r3, r2
 8005252:	00db      	lsls	r3, r3, #3
 8005254:	440b      	add	r3, r1
 8005256:	3358      	adds	r3, #88	; 0x58
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2b03      	cmp	r3, #3
 800525c:	d914      	bls.n	8005288 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800525e:	6879      	ldr	r1, [r7, #4]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	4613      	mov	r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	4413      	add	r3, r2
 8005268:	00db      	lsls	r3, r3, #3
 800526a:	440b      	add	r3, r1
 800526c:	3358      	adds	r3, #88	; 0x58
 800526e:	2200      	movs	r2, #0
 8005270:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005272:	6879      	ldr	r1, [r7, #4]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	4613      	mov	r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	4413      	add	r3, r2
 800527c:	00db      	lsls	r3, r3, #3
 800527e:	440b      	add	r3, r1
 8005280:	335c      	adds	r3, #92	; 0x5c
 8005282:	2204      	movs	r2, #4
 8005284:	701a      	strb	r2, [r3, #0]
 8005286:	e009      	b.n	800529c <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005288:	6879      	ldr	r1, [r7, #4]
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	4613      	mov	r3, r2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	4413      	add	r3, r2
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	440b      	add	r3, r1
 8005296:	335c      	adds	r3, #92	; 0x5c
 8005298:	2202      	movs	r2, #2
 800529a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	015a      	lsls	r2, r3, #5
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	4413      	add	r3, r2
 80052a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052b2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052ba:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	015a      	lsls	r2, r3, #5
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	4413      	add	r3, r2
 80052c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052c8:	461a      	mov	r2, r3
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	6013      	str	r3, [r2, #0]
 80052ce:	e056      	b.n	800537e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80052d0:	6879      	ldr	r1, [r7, #4]
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	4613      	mov	r3, r2
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	4413      	add	r3, r2
 80052da:	00db      	lsls	r3, r3, #3
 80052dc:	440b      	add	r3, r1
 80052de:	335d      	adds	r3, #93	; 0x5d
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	2b03      	cmp	r3, #3
 80052e4:	d123      	bne.n	800532e <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80052e6:	6879      	ldr	r1, [r7, #4]
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	4613      	mov	r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4413      	add	r3, r2
 80052f0:	00db      	lsls	r3, r3, #3
 80052f2:	440b      	add	r3, r1
 80052f4:	335c      	adds	r3, #92	; 0x5c
 80052f6:	2202      	movs	r2, #2
 80052f8:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	015a      	lsls	r2, r3, #5
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	4413      	add	r3, r2
 8005302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005310:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005318:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	015a      	lsls	r2, r3, #5
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	4413      	add	r3, r2
 8005322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005326:	461a      	mov	r2, r3
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	6013      	str	r3, [r2, #0]
 800532c:	e027      	b.n	800537e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800532e:	6879      	ldr	r1, [r7, #4]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	4613      	mov	r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	4413      	add	r3, r2
 8005338:	00db      	lsls	r3, r3, #3
 800533a:	440b      	add	r3, r1
 800533c:	335d      	adds	r3, #93	; 0x5d
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	2b07      	cmp	r3, #7
 8005342:	d11c      	bne.n	800537e <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8005344:	6879      	ldr	r1, [r7, #4]
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	4613      	mov	r3, r2
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	4413      	add	r3, r2
 800534e:	00db      	lsls	r3, r3, #3
 8005350:	440b      	add	r3, r1
 8005352:	3358      	adds	r3, #88	; 0x58
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	1c59      	adds	r1, r3, #1
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	4613      	mov	r3, r2
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	4413      	add	r3, r2
 8005362:	00db      	lsls	r3, r3, #3
 8005364:	4403      	add	r3, r0
 8005366:	3358      	adds	r3, #88	; 0x58
 8005368:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800536a:	6879      	ldr	r1, [r7, #4]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	4613      	mov	r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	00db      	lsls	r3, r3, #3
 8005376:	440b      	add	r3, r1
 8005378:	335c      	adds	r3, #92	; 0x5c
 800537a:	2204      	movs	r2, #4
 800537c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	015a      	lsls	r2, r3, #5
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	4413      	add	r3, r2
 8005386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800538a:	461a      	mov	r2, r3
 800538c:	2302      	movs	r3, #2
 800538e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	b2d8      	uxtb	r0, r3
 8005394:	6879      	ldr	r1, [r7, #4]
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	4613      	mov	r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	4413      	add	r3, r2
 800539e:	00db      	lsls	r3, r3, #3
 80053a0:	440b      	add	r3, r1
 80053a2:	335c      	adds	r3, #92	; 0x5c
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	461a      	mov	r2, r3
 80053a8:	4601      	mov	r1, r0
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f00b fee2 	bl	8011174 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80053b0:	e0d1      	b.n	8005556 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	015a      	lsls	r2, r3, #5
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	4413      	add	r3, r2
 80053ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053c4:	2b80      	cmp	r3, #128	; 0x80
 80053c6:	d13e      	bne.n	8005446 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	015a      	lsls	r2, r3, #5
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	4413      	add	r3, r2
 80053d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	0151      	lsls	r1, r2, #5
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	440a      	add	r2, r1
 80053de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053e2:	f043 0302 	orr.w	r3, r3, #2
 80053e6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80053e8:	6879      	ldr	r1, [r7, #4]
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	4613      	mov	r3, r2
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	4413      	add	r3, r2
 80053f2:	00db      	lsls	r3, r3, #3
 80053f4:	440b      	add	r3, r1
 80053f6:	3358      	adds	r3, #88	; 0x58
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	1c59      	adds	r1, r3, #1
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	4613      	mov	r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	4413      	add	r3, r2
 8005406:	00db      	lsls	r3, r3, #3
 8005408:	4403      	add	r3, r0
 800540a:	3358      	adds	r3, #88	; 0x58
 800540c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800540e:	6879      	ldr	r1, [r7, #4]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	4613      	mov	r3, r2
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	4413      	add	r3, r2
 8005418:	00db      	lsls	r3, r3, #3
 800541a:	440b      	add	r3, r1
 800541c:	335d      	adds	r3, #93	; 0x5d
 800541e:	2206      	movs	r2, #6
 8005420:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	b2d2      	uxtb	r2, r2
 800542a:	4611      	mov	r1, r2
 800542c:	4618      	mov	r0, r3
 800542e:	f004 fada 	bl	80099e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	015a      	lsls	r2, r3, #5
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	4413      	add	r3, r2
 800543a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800543e:	461a      	mov	r2, r3
 8005440:	2380      	movs	r3, #128	; 0x80
 8005442:	6093      	str	r3, [r2, #8]
}
 8005444:	e087      	b.n	8005556 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	015a      	lsls	r2, r3, #5
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	4413      	add	r3, r2
 800544e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	f003 0310 	and.w	r3, r3, #16
 8005458:	2b10      	cmp	r3, #16
 800545a:	d17c      	bne.n	8005556 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800545c:	6879      	ldr	r1, [r7, #4]
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	4613      	mov	r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	4413      	add	r3, r2
 8005466:	00db      	lsls	r3, r3, #3
 8005468:	440b      	add	r3, r1
 800546a:	333f      	adds	r3, #63	; 0x3f
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	2b03      	cmp	r3, #3
 8005470:	d122      	bne.n	80054b8 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005472:	6879      	ldr	r1, [r7, #4]
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	4613      	mov	r3, r2
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	4413      	add	r3, r2
 800547c:	00db      	lsls	r3, r3, #3
 800547e:	440b      	add	r3, r1
 8005480:	3358      	adds	r3, #88	; 0x58
 8005482:	2200      	movs	r2, #0
 8005484:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	015a      	lsls	r2, r3, #5
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	4413      	add	r3, r2
 800548e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	0151      	lsls	r1, r2, #5
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	440a      	add	r2, r1
 800549c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054a0:	f043 0302 	orr.w	r3, r3, #2
 80054a4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	b2d2      	uxtb	r2, r2
 80054ae:	4611      	mov	r1, r2
 80054b0:	4618      	mov	r0, r3
 80054b2:	f004 fa98 	bl	80099e6 <USB_HC_Halt>
 80054b6:	e045      	b.n	8005544 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80054b8:	6879      	ldr	r1, [r7, #4]
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	4613      	mov	r3, r2
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	4413      	add	r3, r2
 80054c2:	00db      	lsls	r3, r3, #3
 80054c4:	440b      	add	r3, r1
 80054c6:	333f      	adds	r3, #63	; 0x3f
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00a      	beq.n	80054e4 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80054ce:	6879      	ldr	r1, [r7, #4]
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	4613      	mov	r3, r2
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	4413      	add	r3, r2
 80054d8:	00db      	lsls	r3, r3, #3
 80054da:	440b      	add	r3, r1
 80054dc:	333f      	adds	r3, #63	; 0x3f
 80054de:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d12f      	bne.n	8005544 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80054e4:	6879      	ldr	r1, [r7, #4]
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	4613      	mov	r3, r2
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	4413      	add	r3, r2
 80054ee:	00db      	lsls	r3, r3, #3
 80054f0:	440b      	add	r3, r1
 80054f2:	3358      	adds	r3, #88	; 0x58
 80054f4:	2200      	movs	r2, #0
 80054f6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d121      	bne.n	8005544 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8005500:	6879      	ldr	r1, [r7, #4]
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	4613      	mov	r3, r2
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	4413      	add	r3, r2
 800550a:	00db      	lsls	r3, r3, #3
 800550c:	440b      	add	r3, r1
 800550e:	335d      	adds	r3, #93	; 0x5d
 8005510:	2203      	movs	r2, #3
 8005512:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	4413      	add	r3, r2
 800551c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	0151      	lsls	r1, r2, #5
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	440a      	add	r2, r1
 800552a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800552e:	f043 0302 	orr.w	r3, r3, #2
 8005532:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	b2d2      	uxtb	r2, r2
 800553c:	4611      	mov	r1, r2
 800553e:	4618      	mov	r0, r3
 8005540:	f004 fa51 	bl	80099e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	015a      	lsls	r2, r3, #5
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	4413      	add	r3, r2
 800554c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005550:	461a      	mov	r2, r3
 8005552:	2310      	movs	r3, #16
 8005554:	6093      	str	r3, [r2, #8]
}
 8005556:	bf00      	nop
 8005558:	3718      	adds	r7, #24
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800555e:	b580      	push	{r7, lr}
 8005560:	b086      	sub	sp, #24
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
 8005566:	460b      	mov	r3, r1
 8005568:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005574:	78fb      	ldrb	r3, [r7, #3]
 8005576:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	015a      	lsls	r2, r3, #5
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	4413      	add	r3, r2
 8005580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f003 0304 	and.w	r3, r3, #4
 800558a:	2b04      	cmp	r3, #4
 800558c:	d119      	bne.n	80055c2 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	015a      	lsls	r2, r3, #5
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	4413      	add	r3, r2
 8005596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800559a:	461a      	mov	r2, r3
 800559c:	2304      	movs	r3, #4
 800559e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	015a      	lsls	r2, r3, #5
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	4413      	add	r3, r2
 80055a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	0151      	lsls	r1, r2, #5
 80055b2:	693a      	ldr	r2, [r7, #16]
 80055b4:	440a      	add	r2, r1
 80055b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055ba:	f043 0302 	orr.w	r3, r3, #2
 80055be:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80055c0:	e33e      	b.n	8005c40 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	015a      	lsls	r2, r3, #5
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	4413      	add	r3, r2
 80055ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f003 0320 	and.w	r3, r3, #32
 80055d4:	2b20      	cmp	r3, #32
 80055d6:	d141      	bne.n	800565c <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	015a      	lsls	r2, r3, #5
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	4413      	add	r3, r2
 80055e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055e4:	461a      	mov	r2, r3
 80055e6:	2320      	movs	r3, #32
 80055e8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80055ea:	6879      	ldr	r1, [r7, #4]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	4613      	mov	r3, r2
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	4413      	add	r3, r2
 80055f4:	00db      	lsls	r3, r3, #3
 80055f6:	440b      	add	r3, r1
 80055f8:	333d      	adds	r3, #61	; 0x3d
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	f040 831f 	bne.w	8005c40 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8005602:	6879      	ldr	r1, [r7, #4]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	4613      	mov	r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	4413      	add	r3, r2
 800560c:	00db      	lsls	r3, r3, #3
 800560e:	440b      	add	r3, r1
 8005610:	333d      	adds	r3, #61	; 0x3d
 8005612:	2200      	movs	r2, #0
 8005614:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005616:	6879      	ldr	r1, [r7, #4]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	4613      	mov	r3, r2
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	4413      	add	r3, r2
 8005620:	00db      	lsls	r3, r3, #3
 8005622:	440b      	add	r3, r1
 8005624:	335c      	adds	r3, #92	; 0x5c
 8005626:	2202      	movs	r2, #2
 8005628:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	015a      	lsls	r2, r3, #5
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	4413      	add	r3, r2
 8005632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	0151      	lsls	r1, r2, #5
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	440a      	add	r2, r1
 8005640:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005644:	f043 0302 	orr.w	r3, r3, #2
 8005648:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	b2d2      	uxtb	r2, r2
 8005652:	4611      	mov	r1, r2
 8005654:	4618      	mov	r0, r3
 8005656:	f004 f9c6 	bl	80099e6 <USB_HC_Halt>
}
 800565a:	e2f1      	b.n	8005c40 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	015a      	lsls	r2, r3, #5
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	4413      	add	r3, r2
 8005664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800566e:	2b40      	cmp	r3, #64	; 0x40
 8005670:	d13f      	bne.n	80056f2 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8005672:	6879      	ldr	r1, [r7, #4]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	4613      	mov	r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	4413      	add	r3, r2
 800567c:	00db      	lsls	r3, r3, #3
 800567e:	440b      	add	r3, r1
 8005680:	335d      	adds	r3, #93	; 0x5d
 8005682:	2204      	movs	r2, #4
 8005684:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005686:	6879      	ldr	r1, [r7, #4]
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	4613      	mov	r3, r2
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	4413      	add	r3, r2
 8005690:	00db      	lsls	r3, r3, #3
 8005692:	440b      	add	r3, r1
 8005694:	333d      	adds	r3, #61	; 0x3d
 8005696:	2201      	movs	r2, #1
 8005698:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800569a:	6879      	ldr	r1, [r7, #4]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	4613      	mov	r3, r2
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4413      	add	r3, r2
 80056a4:	00db      	lsls	r3, r3, #3
 80056a6:	440b      	add	r3, r1
 80056a8:	3358      	adds	r3, #88	; 0x58
 80056aa:	2200      	movs	r2, #0
 80056ac:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	015a      	lsls	r2, r3, #5
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	0151      	lsls	r1, r2, #5
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	440a      	add	r2, r1
 80056c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056c8:	f043 0302 	orr.w	r3, r3, #2
 80056cc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	b2d2      	uxtb	r2, r2
 80056d6:	4611      	mov	r1, r2
 80056d8:	4618      	mov	r0, r3
 80056da:	f004 f984 	bl	80099e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	015a      	lsls	r2, r3, #5
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	4413      	add	r3, r2
 80056e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ea:	461a      	mov	r2, r3
 80056ec:	2340      	movs	r3, #64	; 0x40
 80056ee:	6093      	str	r3, [r2, #8]
}
 80056f0:	e2a6      	b.n	8005c40 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	015a      	lsls	r2, r3, #5
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	4413      	add	r3, r2
 80056fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005708:	d122      	bne.n	8005750 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	015a      	lsls	r2, r3, #5
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	4413      	add	r3, r2
 8005712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	0151      	lsls	r1, r2, #5
 800571c:	693a      	ldr	r2, [r7, #16]
 800571e:	440a      	add	r2, r1
 8005720:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005724:	f043 0302 	orr.w	r3, r3, #2
 8005728:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	b2d2      	uxtb	r2, r2
 8005732:	4611      	mov	r1, r2
 8005734:	4618      	mov	r0, r3
 8005736:	f004 f956 	bl	80099e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	015a      	lsls	r2, r3, #5
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	4413      	add	r3, r2
 8005742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005746:	461a      	mov	r2, r3
 8005748:	f44f 7300 	mov.w	r3, #512	; 0x200
 800574c:	6093      	str	r3, [r2, #8]
}
 800574e:	e277      	b.n	8005c40 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	015a      	lsls	r2, r3, #5
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	4413      	add	r3, r2
 8005758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	2b01      	cmp	r3, #1
 8005764:	d135      	bne.n	80057d2 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005766:	6879      	ldr	r1, [r7, #4]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	4613      	mov	r3, r2
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	4413      	add	r3, r2
 8005770:	00db      	lsls	r3, r3, #3
 8005772:	440b      	add	r3, r1
 8005774:	3358      	adds	r3, #88	; 0x58
 8005776:	2200      	movs	r2, #0
 8005778:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	015a      	lsls	r2, r3, #5
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	4413      	add	r3, r2
 8005782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	0151      	lsls	r1, r2, #5
 800578c:	693a      	ldr	r2, [r7, #16]
 800578e:	440a      	add	r2, r1
 8005790:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005794:	f043 0302 	orr.w	r3, r3, #2
 8005798:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	b2d2      	uxtb	r2, r2
 80057a2:	4611      	mov	r1, r2
 80057a4:	4618      	mov	r0, r3
 80057a6:	f004 f91e 	bl	80099e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	015a      	lsls	r2, r3, #5
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	4413      	add	r3, r2
 80057b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057b6:	461a      	mov	r2, r3
 80057b8:	2301      	movs	r3, #1
 80057ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80057bc:	6879      	ldr	r1, [r7, #4]
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	4613      	mov	r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4413      	add	r3, r2
 80057c6:	00db      	lsls	r3, r3, #3
 80057c8:	440b      	add	r3, r1
 80057ca:	335d      	adds	r3, #93	; 0x5d
 80057cc:	2201      	movs	r2, #1
 80057ce:	701a      	strb	r2, [r3, #0]
}
 80057d0:	e236      	b.n	8005c40 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	015a      	lsls	r2, r3, #5
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	4413      	add	r3, r2
 80057da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f003 0308 	and.w	r3, r3, #8
 80057e4:	2b08      	cmp	r3, #8
 80057e6:	d12b      	bne.n	8005840 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	015a      	lsls	r2, r3, #5
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	4413      	add	r3, r2
 80057f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057f4:	461a      	mov	r2, r3
 80057f6:	2308      	movs	r3, #8
 80057f8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	015a      	lsls	r2, r3, #5
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	4413      	add	r3, r2
 8005802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	0151      	lsls	r1, r2, #5
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	440a      	add	r2, r1
 8005810:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005814:	f043 0302 	orr.w	r3, r3, #2
 8005818:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	b2d2      	uxtb	r2, r2
 8005822:	4611      	mov	r1, r2
 8005824:	4618      	mov	r0, r3
 8005826:	f004 f8de 	bl	80099e6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800582a:	6879      	ldr	r1, [r7, #4]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	4613      	mov	r3, r2
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	4413      	add	r3, r2
 8005834:	00db      	lsls	r3, r3, #3
 8005836:	440b      	add	r3, r1
 8005838:	335d      	adds	r3, #93	; 0x5d
 800583a:	2205      	movs	r2, #5
 800583c:	701a      	strb	r2, [r3, #0]
}
 800583e:	e1ff      	b.n	8005c40 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	015a      	lsls	r2, r3, #5
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	4413      	add	r3, r2
 8005848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	f003 0310 	and.w	r3, r3, #16
 8005852:	2b10      	cmp	r3, #16
 8005854:	d155      	bne.n	8005902 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005856:	6879      	ldr	r1, [r7, #4]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	4613      	mov	r3, r2
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	4413      	add	r3, r2
 8005860:	00db      	lsls	r3, r3, #3
 8005862:	440b      	add	r3, r1
 8005864:	3358      	adds	r3, #88	; 0x58
 8005866:	2200      	movs	r2, #0
 8005868:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800586a:	6879      	ldr	r1, [r7, #4]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	4613      	mov	r3, r2
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	4413      	add	r3, r2
 8005874:	00db      	lsls	r3, r3, #3
 8005876:	440b      	add	r3, r1
 8005878:	335d      	adds	r3, #93	; 0x5d
 800587a:	2203      	movs	r2, #3
 800587c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800587e:	6879      	ldr	r1, [r7, #4]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	4613      	mov	r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	4413      	add	r3, r2
 8005888:	00db      	lsls	r3, r3, #3
 800588a:	440b      	add	r3, r1
 800588c:	333d      	adds	r3, #61	; 0x3d
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d114      	bne.n	80058be <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8005894:	6879      	ldr	r1, [r7, #4]
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	4613      	mov	r3, r2
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	4413      	add	r3, r2
 800589e:	00db      	lsls	r3, r3, #3
 80058a0:	440b      	add	r3, r1
 80058a2:	333c      	adds	r3, #60	; 0x3c
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d109      	bne.n	80058be <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80058aa:	6879      	ldr	r1, [r7, #4]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	4613      	mov	r3, r2
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	4413      	add	r3, r2
 80058b4:	00db      	lsls	r3, r3, #3
 80058b6:	440b      	add	r3, r1
 80058b8:	333d      	adds	r3, #61	; 0x3d
 80058ba:	2201      	movs	r2, #1
 80058bc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	015a      	lsls	r2, r3, #5
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	4413      	add	r3, r2
 80058c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	0151      	lsls	r1, r2, #5
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	440a      	add	r2, r1
 80058d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058d8:	f043 0302 	orr.w	r3, r3, #2
 80058dc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	b2d2      	uxtb	r2, r2
 80058e6:	4611      	mov	r1, r2
 80058e8:	4618      	mov	r0, r3
 80058ea:	f004 f87c 	bl	80099e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	015a      	lsls	r2, r3, #5
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	4413      	add	r3, r2
 80058f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058fa:	461a      	mov	r2, r3
 80058fc:	2310      	movs	r3, #16
 80058fe:	6093      	str	r3, [r2, #8]
}
 8005900:	e19e      	b.n	8005c40 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	015a      	lsls	r2, r3, #5
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	4413      	add	r3, r2
 800590a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005914:	2b80      	cmp	r3, #128	; 0x80
 8005916:	d12b      	bne.n	8005970 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	015a      	lsls	r2, r3, #5
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	4413      	add	r3, r2
 8005920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	0151      	lsls	r1, r2, #5
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	440a      	add	r2, r1
 800592e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005932:	f043 0302 	orr.w	r3, r3, #2
 8005936:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	b2d2      	uxtb	r2, r2
 8005940:	4611      	mov	r1, r2
 8005942:	4618      	mov	r0, r3
 8005944:	f004 f84f 	bl	80099e6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005948:	6879      	ldr	r1, [r7, #4]
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	4613      	mov	r3, r2
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	4413      	add	r3, r2
 8005952:	00db      	lsls	r3, r3, #3
 8005954:	440b      	add	r3, r1
 8005956:	335d      	adds	r3, #93	; 0x5d
 8005958:	2206      	movs	r2, #6
 800595a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	015a      	lsls	r2, r3, #5
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	4413      	add	r3, r2
 8005964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005968:	461a      	mov	r2, r3
 800596a:	2380      	movs	r3, #128	; 0x80
 800596c:	6093      	str	r3, [r2, #8]
}
 800596e:	e167      	b.n	8005c40 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	015a      	lsls	r2, r3, #5
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	4413      	add	r3, r2
 8005978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005986:	d135      	bne.n	80059f4 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	015a      	lsls	r2, r3, #5
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	4413      	add	r3, r2
 8005990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	0151      	lsls	r1, r2, #5
 800599a:	693a      	ldr	r2, [r7, #16]
 800599c:	440a      	add	r2, r1
 800599e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059a2:	f043 0302 	orr.w	r3, r3, #2
 80059a6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	b2d2      	uxtb	r2, r2
 80059b0:	4611      	mov	r1, r2
 80059b2:	4618      	mov	r0, r3
 80059b4:	f004 f817 	bl	80099e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	015a      	lsls	r2, r3, #5
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	4413      	add	r3, r2
 80059c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059c4:	461a      	mov	r2, r3
 80059c6:	2310      	movs	r3, #16
 80059c8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	015a      	lsls	r2, r3, #5
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	4413      	add	r3, r2
 80059d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059d6:	461a      	mov	r2, r3
 80059d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80059de:	6879      	ldr	r1, [r7, #4]
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	4613      	mov	r3, r2
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	4413      	add	r3, r2
 80059e8:	00db      	lsls	r3, r3, #3
 80059ea:	440b      	add	r3, r1
 80059ec:	335d      	adds	r3, #93	; 0x5d
 80059ee:	2208      	movs	r2, #8
 80059f0:	701a      	strb	r2, [r3, #0]
}
 80059f2:	e125      	b.n	8005c40 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	015a      	lsls	r2, r3, #5
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	4413      	add	r3, r2
 80059fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f003 0302 	and.w	r3, r3, #2
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	f040 811a 	bne.w	8005c40 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	015a      	lsls	r2, r3, #5
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	4413      	add	r3, r2
 8005a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	0151      	lsls	r1, r2, #5
 8005a1e:	693a      	ldr	r2, [r7, #16]
 8005a20:	440a      	add	r2, r1
 8005a22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a26:	f023 0302 	bic.w	r3, r3, #2
 8005a2a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005a2c:	6879      	ldr	r1, [r7, #4]
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	4613      	mov	r3, r2
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	4413      	add	r3, r2
 8005a36:	00db      	lsls	r3, r3, #3
 8005a38:	440b      	add	r3, r1
 8005a3a:	335d      	adds	r3, #93	; 0x5d
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d137      	bne.n	8005ab2 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005a42:	6879      	ldr	r1, [r7, #4]
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	4613      	mov	r3, r2
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	4413      	add	r3, r2
 8005a4c:	00db      	lsls	r3, r3, #3
 8005a4e:	440b      	add	r3, r1
 8005a50:	335c      	adds	r3, #92	; 0x5c
 8005a52:	2201      	movs	r2, #1
 8005a54:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005a56:	6879      	ldr	r1, [r7, #4]
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	4413      	add	r3, r2
 8005a60:	00db      	lsls	r3, r3, #3
 8005a62:	440b      	add	r3, r1
 8005a64:	333f      	adds	r3, #63	; 0x3f
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d00b      	beq.n	8005a84 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005a6c:	6879      	ldr	r1, [r7, #4]
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	4613      	mov	r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	4413      	add	r3, r2
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	440b      	add	r3, r1
 8005a7a:	333f      	adds	r3, #63	; 0x3f
 8005a7c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005a7e:	2b03      	cmp	r3, #3
 8005a80:	f040 80c5 	bne.w	8005c0e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8005a84:	6879      	ldr	r1, [r7, #4]
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	4613      	mov	r3, r2
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	4413      	add	r3, r2
 8005a8e:	00db      	lsls	r3, r3, #3
 8005a90:	440b      	add	r3, r1
 8005a92:	3351      	adds	r3, #81	; 0x51
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	f083 0301 	eor.w	r3, r3, #1
 8005a9a:	b2d8      	uxtb	r0, r3
 8005a9c:	6879      	ldr	r1, [r7, #4]
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	4413      	add	r3, r2
 8005aa6:	00db      	lsls	r3, r3, #3
 8005aa8:	440b      	add	r3, r1
 8005aaa:	3351      	adds	r3, #81	; 0x51
 8005aac:	4602      	mov	r2, r0
 8005aae:	701a      	strb	r2, [r3, #0]
 8005ab0:	e0ad      	b.n	8005c0e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005ab2:	6879      	ldr	r1, [r7, #4]
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	4413      	add	r3, r2
 8005abc:	00db      	lsls	r3, r3, #3
 8005abe:	440b      	add	r3, r1
 8005ac0:	335d      	adds	r3, #93	; 0x5d
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	2b03      	cmp	r3, #3
 8005ac6:	d10a      	bne.n	8005ade <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005ac8:	6879      	ldr	r1, [r7, #4]
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	4613      	mov	r3, r2
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	4413      	add	r3, r2
 8005ad2:	00db      	lsls	r3, r3, #3
 8005ad4:	440b      	add	r3, r1
 8005ad6:	335c      	adds	r3, #92	; 0x5c
 8005ad8:	2202      	movs	r2, #2
 8005ada:	701a      	strb	r2, [r3, #0]
 8005adc:	e097      	b.n	8005c0e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005ade:	6879      	ldr	r1, [r7, #4]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	4413      	add	r3, r2
 8005ae8:	00db      	lsls	r3, r3, #3
 8005aea:	440b      	add	r3, r1
 8005aec:	335d      	adds	r3, #93	; 0x5d
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	2b04      	cmp	r3, #4
 8005af2:	d10a      	bne.n	8005b0a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005af4:	6879      	ldr	r1, [r7, #4]
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	4613      	mov	r3, r2
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	4413      	add	r3, r2
 8005afe:	00db      	lsls	r3, r3, #3
 8005b00:	440b      	add	r3, r1
 8005b02:	335c      	adds	r3, #92	; 0x5c
 8005b04:	2202      	movs	r2, #2
 8005b06:	701a      	strb	r2, [r3, #0]
 8005b08:	e081      	b.n	8005c0e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005b0a:	6879      	ldr	r1, [r7, #4]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	4613      	mov	r3, r2
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	4413      	add	r3, r2
 8005b14:	00db      	lsls	r3, r3, #3
 8005b16:	440b      	add	r3, r1
 8005b18:	335d      	adds	r3, #93	; 0x5d
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	2b05      	cmp	r3, #5
 8005b1e:	d10a      	bne.n	8005b36 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005b20:	6879      	ldr	r1, [r7, #4]
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	4613      	mov	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	4413      	add	r3, r2
 8005b2a:	00db      	lsls	r3, r3, #3
 8005b2c:	440b      	add	r3, r1
 8005b2e:	335c      	adds	r3, #92	; 0x5c
 8005b30:	2205      	movs	r2, #5
 8005b32:	701a      	strb	r2, [r3, #0]
 8005b34:	e06b      	b.n	8005c0e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005b36:	6879      	ldr	r1, [r7, #4]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	4413      	add	r3, r2
 8005b40:	00db      	lsls	r3, r3, #3
 8005b42:	440b      	add	r3, r1
 8005b44:	335d      	adds	r3, #93	; 0x5d
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	2b06      	cmp	r3, #6
 8005b4a:	d00a      	beq.n	8005b62 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005b4c:	6879      	ldr	r1, [r7, #4]
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	4613      	mov	r3, r2
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	4413      	add	r3, r2
 8005b56:	00db      	lsls	r3, r3, #3
 8005b58:	440b      	add	r3, r1
 8005b5a:	335d      	adds	r3, #93	; 0x5d
 8005b5c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005b5e:	2b08      	cmp	r3, #8
 8005b60:	d155      	bne.n	8005c0e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8005b62:	6879      	ldr	r1, [r7, #4]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	4613      	mov	r3, r2
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	4413      	add	r3, r2
 8005b6c:	00db      	lsls	r3, r3, #3
 8005b6e:	440b      	add	r3, r1
 8005b70:	3358      	adds	r3, #88	; 0x58
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	1c59      	adds	r1, r3, #1
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	4413      	add	r3, r2
 8005b80:	00db      	lsls	r3, r3, #3
 8005b82:	4403      	add	r3, r0
 8005b84:	3358      	adds	r3, #88	; 0x58
 8005b86:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8005b88:	6879      	ldr	r1, [r7, #4]
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	00db      	lsls	r3, r3, #3
 8005b94:	440b      	add	r3, r1
 8005b96:	3358      	adds	r3, #88	; 0x58
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2b03      	cmp	r3, #3
 8005b9c:	d914      	bls.n	8005bc8 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005b9e:	6879      	ldr	r1, [r7, #4]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	4413      	add	r3, r2
 8005ba8:	00db      	lsls	r3, r3, #3
 8005baa:	440b      	add	r3, r1
 8005bac:	3358      	adds	r3, #88	; 0x58
 8005bae:	2200      	movs	r2, #0
 8005bb0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005bb2:	6879      	ldr	r1, [r7, #4]
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	4413      	add	r3, r2
 8005bbc:	00db      	lsls	r3, r3, #3
 8005bbe:	440b      	add	r3, r1
 8005bc0:	335c      	adds	r3, #92	; 0x5c
 8005bc2:	2204      	movs	r2, #4
 8005bc4:	701a      	strb	r2, [r3, #0]
 8005bc6:	e009      	b.n	8005bdc <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005bc8:	6879      	ldr	r1, [r7, #4]
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	4613      	mov	r3, r2
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	4413      	add	r3, r2
 8005bd2:	00db      	lsls	r3, r3, #3
 8005bd4:	440b      	add	r3, r1
 8005bd6:	335c      	adds	r3, #92	; 0x5c
 8005bd8:	2202      	movs	r2, #2
 8005bda:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	015a      	lsls	r2, r3, #5
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	4413      	add	r3, r2
 8005be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005bf2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bfa:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	015a      	lsls	r2, r3, #5
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	4413      	add	r3, r2
 8005c04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c08:	461a      	mov	r2, r3
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	015a      	lsls	r2, r3, #5
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	4413      	add	r3, r2
 8005c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	b2d8      	uxtb	r0, r3
 8005c24:	6879      	ldr	r1, [r7, #4]
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	4613      	mov	r3, r2
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	4413      	add	r3, r2
 8005c2e:	00db      	lsls	r3, r3, #3
 8005c30:	440b      	add	r3, r1
 8005c32:	335c      	adds	r3, #92	; 0x5c
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	461a      	mov	r2, r3
 8005c38:	4601      	mov	r1, r0
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f00b fa9a 	bl	8011174 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005c40:	bf00      	nop
 8005c42:	3718      	adds	r7, #24
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b08a      	sub	sp, #40	; 0x28
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c58:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	6a1b      	ldr	r3, [r3, #32]
 8005c60:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	f003 030f 	and.w	r3, r3, #15
 8005c68:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	0c5b      	lsrs	r3, r3, #17
 8005c6e:	f003 030f 	and.w	r3, r3, #15
 8005c72:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	091b      	lsrs	r3, r3, #4
 8005c78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c7c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d003      	beq.n	8005c8c <HCD_RXQLVL_IRQHandler+0x44>
 8005c84:	2b05      	cmp	r3, #5
 8005c86:	f000 8082 	beq.w	8005d8e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005c8a:	e083      	b.n	8005d94 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d07f      	beq.n	8005d92 <HCD_RXQLVL_IRQHandler+0x14a>
 8005c92:	6879      	ldr	r1, [r7, #4]
 8005c94:	69ba      	ldr	r2, [r7, #24]
 8005c96:	4613      	mov	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	4413      	add	r3, r2
 8005c9c:	00db      	lsls	r3, r3, #3
 8005c9e:	440b      	add	r3, r1
 8005ca0:	3344      	adds	r3, #68	; 0x44
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d074      	beq.n	8005d92 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6818      	ldr	r0, [r3, #0]
 8005cac:	6879      	ldr	r1, [r7, #4]
 8005cae:	69ba      	ldr	r2, [r7, #24]
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	4413      	add	r3, r2
 8005cb6:	00db      	lsls	r3, r3, #3
 8005cb8:	440b      	add	r3, r1
 8005cba:	3344      	adds	r3, #68	; 0x44
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	b292      	uxth	r2, r2
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	f003 fa2f 	bl	8009126 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005cc8:	6879      	ldr	r1, [r7, #4]
 8005cca:	69ba      	ldr	r2, [r7, #24]
 8005ccc:	4613      	mov	r3, r2
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	4413      	add	r3, r2
 8005cd2:	00db      	lsls	r3, r3, #3
 8005cd4:	440b      	add	r3, r1
 8005cd6:	3344      	adds	r3, #68	; 0x44
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	18d1      	adds	r1, r2, r3
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	69ba      	ldr	r2, [r7, #24]
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	4413      	add	r3, r2
 8005ce8:	00db      	lsls	r3, r3, #3
 8005cea:	4403      	add	r3, r0
 8005cec:	3344      	adds	r3, #68	; 0x44
 8005cee:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8005cf0:	6879      	ldr	r1, [r7, #4]
 8005cf2:	69ba      	ldr	r2, [r7, #24]
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	4413      	add	r3, r2
 8005cfa:	00db      	lsls	r3, r3, #3
 8005cfc:	440b      	add	r3, r1
 8005cfe:	334c      	adds	r3, #76	; 0x4c
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	18d1      	adds	r1, r2, r3
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	69ba      	ldr	r2, [r7, #24]
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	4413      	add	r3, r2
 8005d10:	00db      	lsls	r3, r3, #3
 8005d12:	4403      	add	r3, r0
 8005d14:	334c      	adds	r3, #76	; 0x4c
 8005d16:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	015a      	lsls	r2, r3, #5
 8005d1c:	6a3b      	ldr	r3, [r7, #32]
 8005d1e:	4413      	add	r3, r2
 8005d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d24:	691a      	ldr	r2, [r3, #16]
 8005d26:	4b1d      	ldr	r3, [pc, #116]	; (8005d9c <HCD_RXQLVL_IRQHandler+0x154>)
 8005d28:	4013      	ands	r3, r2
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d031      	beq.n	8005d92 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	015a      	lsls	r2, r3, #5
 8005d32:	6a3b      	ldr	r3, [r7, #32]
 8005d34:	4413      	add	r3, r2
 8005d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d44:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d4c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	6a3b      	ldr	r3, [r7, #32]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8005d60:	6879      	ldr	r1, [r7, #4]
 8005d62:	69ba      	ldr	r2, [r7, #24]
 8005d64:	4613      	mov	r3, r2
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	4413      	add	r3, r2
 8005d6a:	00db      	lsls	r3, r3, #3
 8005d6c:	440b      	add	r3, r1
 8005d6e:	3350      	adds	r3, #80	; 0x50
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	f083 0301 	eor.w	r3, r3, #1
 8005d76:	b2d8      	uxtb	r0, r3
 8005d78:	6879      	ldr	r1, [r7, #4]
 8005d7a:	69ba      	ldr	r2, [r7, #24]
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	4413      	add	r3, r2
 8005d82:	00db      	lsls	r3, r3, #3
 8005d84:	440b      	add	r3, r1
 8005d86:	3350      	adds	r3, #80	; 0x50
 8005d88:	4602      	mov	r2, r0
 8005d8a:	701a      	strb	r2, [r3, #0]
      break;
 8005d8c:	e001      	b.n	8005d92 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8005d8e:	bf00      	nop
 8005d90:	e000      	b.n	8005d94 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8005d92:	bf00      	nop
  }
}
 8005d94:	bf00      	nop
 8005d96:	3728      	adds	r7, #40	; 0x28
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	1ff80000 	.word	0x1ff80000

08005da0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005dcc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f003 0302 	and.w	r3, r3, #2
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d10b      	bne.n	8005df0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f003 0301 	and.w	r3, r3, #1
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d102      	bne.n	8005de8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f00b f9aa 	bl	801113c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	f043 0302 	orr.w	r3, r3, #2
 8005dee:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f003 0308 	and.w	r3, r3, #8
 8005df6:	2b08      	cmp	r3, #8
 8005df8:	d132      	bne.n	8005e60 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	f043 0308 	orr.w	r3, r3, #8
 8005e00:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f003 0304 	and.w	r3, r3, #4
 8005e08:	2b04      	cmp	r3, #4
 8005e0a:	d126      	bne.n	8005e5a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	d113      	bne.n	8005e3c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005e1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e1e:	d106      	bne.n	8005e2e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2102      	movs	r1, #2
 8005e26:	4618      	mov	r0, r3
 8005e28:	f003 fab8 	bl	800939c <USB_InitFSLSPClkSel>
 8005e2c:	e011      	b.n	8005e52 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2101      	movs	r1, #1
 8005e34:	4618      	mov	r0, r3
 8005e36:	f003 fab1 	bl	800939c <USB_InitFSLSPClkSel>
 8005e3a:	e00a      	b.n	8005e52 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d106      	bne.n	8005e52 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005e50:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f00b f9a0 	bl	8011198 <HAL_HCD_PortEnabled_Callback>
 8005e58:	e002      	b.n	8005e60 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f00b f9aa 	bl	80111b4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f003 0320 	and.w	r3, r3, #32
 8005e66:	2b20      	cmp	r3, #32
 8005e68:	d103      	bne.n	8005e72 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	f043 0320 	orr.w	r3, r3, #32
 8005e70:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e78:	461a      	mov	r2, r3
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	6013      	str	r3, [r2, #0]
}
 8005e7e:	bf00      	nop
 8005e80:	3718      	adds	r7, #24
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
	...

08005e88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d101      	bne.n	8005e9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e1b1      	b.n	80061fe <HAL_I2C_Init+0x376>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4aa2      	ldr	r2, [pc, #648]	; (8006128 <HAL_I2C_Init+0x2a0>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d00e      	beq.n	8005ec2 <HAL_I2C_Init+0x3a>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4aa0      	ldr	r2, [pc, #640]	; (800612c <HAL_I2C_Init+0x2a4>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d009      	beq.n	8005ec2 <HAL_I2C_Init+0x3a>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a9f      	ldr	r2, [pc, #636]	; (8006130 <HAL_I2C_Init+0x2a8>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d004      	beq.n	8005ec2 <HAL_I2C_Init+0x3a>
 8005eb8:	f240 11bd 	movw	r1, #445	; 0x1bd
 8005ebc:	489d      	ldr	r0, [pc, #628]	; (8006134 <HAL_I2C_Init+0x2ac>)
 8005ebe:	f7fb fd61 	bl	8001984 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d004      	beq.n	8005ed4 <HAL_I2C_Init+0x4c>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	4a9a      	ldr	r2, [pc, #616]	; (8006138 <HAL_I2C_Init+0x2b0>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d904      	bls.n	8005ede <HAL_I2C_Init+0x56>
 8005ed4:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8005ed8:	4896      	ldr	r0, [pc, #600]	; (8006134 <HAL_I2C_Init+0x2ac>)
 8005eda:	f7fb fd53 	bl	8001984 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d009      	beq.n	8005efa <HAL_I2C_Init+0x72>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005eee:	d004      	beq.n	8005efa <HAL_I2C_Init+0x72>
 8005ef0:	f240 11bf 	movw	r1, #447	; 0x1bf
 8005ef4:	488f      	ldr	r0, [pc, #572]	; (8006134 <HAL_I2C_Init+0x2ac>)
 8005ef6:	f7fb fd45 	bl	8001984 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005f02:	f023 0303 	bic.w	r3, r3, #3
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d004      	beq.n	8005f14 <HAL_I2C_Init+0x8c>
 8005f0a:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8005f0e:	4889      	ldr	r0, [pc, #548]	; (8006134 <HAL_I2C_Init+0x2ac>)
 8005f10:	f7fb fd38 	bl	8001984 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f1c:	d009      	beq.n	8005f32 <HAL_I2C_Init+0xaa>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005f26:	d004      	beq.n	8005f32 <HAL_I2C_Init+0xaa>
 8005f28:	f240 11c1 	movw	r1, #449	; 0x1c1
 8005f2c:	4881      	ldr	r0, [pc, #516]	; (8006134 <HAL_I2C_Init+0x2ac>)
 8005f2e:	f7fb fd29 	bl	8001984 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d008      	beq.n	8005f4c <HAL_I2C_Init+0xc4>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d004      	beq.n	8005f4c <HAL_I2C_Init+0xc4>
 8005f42:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8005f46:	487b      	ldr	r0, [pc, #492]	; (8006134 <HAL_I2C_Init+0x2ac>)
 8005f48:	f7fb fd1c 	bl	8001984 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	699b      	ldr	r3, [r3, #24]
 8005f50:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d004      	beq.n	8005f62 <HAL_I2C_Init+0xda>
 8005f58:	f240 11c3 	movw	r1, #451	; 0x1c3
 8005f5c:	4875      	ldr	r0, [pc, #468]	; (8006134 <HAL_I2C_Init+0x2ac>)
 8005f5e:	f7fb fd11 	bl	8001984 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	69db      	ldr	r3, [r3, #28]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d008      	beq.n	8005f7c <HAL_I2C_Init+0xf4>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	69db      	ldr	r3, [r3, #28]
 8005f6e:	2b40      	cmp	r3, #64	; 0x40
 8005f70:	d004      	beq.n	8005f7c <HAL_I2C_Init+0xf4>
 8005f72:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8005f76:	486f      	ldr	r0, [pc, #444]	; (8006134 <HAL_I2C_Init+0x2ac>)
 8005f78:	f7fb fd04 	bl	8001984 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6a1b      	ldr	r3, [r3, #32]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d008      	beq.n	8005f96 <HAL_I2C_Init+0x10e>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a1b      	ldr	r3, [r3, #32]
 8005f88:	2b80      	cmp	r3, #128	; 0x80
 8005f8a:	d004      	beq.n	8005f96 <HAL_I2C_Init+0x10e>
 8005f8c:	f240 11c5 	movw	r1, #453	; 0x1c5
 8005f90:	4868      	ldr	r0, [pc, #416]	; (8006134 <HAL_I2C_Init+0x2ac>)
 8005f92:	f7fb fcf7 	bl	8001984 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d106      	bne.n	8005fb0 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f7fb fbe6 	bl	800177c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2224      	movs	r2, #36	; 0x24
 8005fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f022 0201 	bic.w	r2, r2, #1
 8005fc6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005fd6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005fe6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005fe8:	f000 fe7a 	bl	8006ce0 <HAL_RCC_GetPCLK1Freq>
 8005fec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	4a52      	ldr	r2, [pc, #328]	; (800613c <HAL_I2C_Init+0x2b4>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d807      	bhi.n	8006008 <HAL_I2C_Init+0x180>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	4a51      	ldr	r2, [pc, #324]	; (8006140 <HAL_I2C_Init+0x2b8>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	bf94      	ite	ls
 8006000:	2301      	movls	r3, #1
 8006002:	2300      	movhi	r3, #0
 8006004:	b2db      	uxtb	r3, r3
 8006006:	e006      	b.n	8006016 <HAL_I2C_Init+0x18e>
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	4a4e      	ldr	r2, [pc, #312]	; (8006144 <HAL_I2C_Init+0x2bc>)
 800600c:	4293      	cmp	r3, r2
 800600e:	bf94      	ite	ls
 8006010:	2301      	movls	r3, #1
 8006012:	2300      	movhi	r3, #0
 8006014:	b2db      	uxtb	r3, r3
 8006016:	2b00      	cmp	r3, #0
 8006018:	d001      	beq.n	800601e <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e0ef      	b.n	80061fe <HAL_I2C_Init+0x376>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	4a49      	ldr	r2, [pc, #292]	; (8006148 <HAL_I2C_Init+0x2c0>)
 8006022:	fba2 2303 	umull	r2, r3, r2, r3
 8006026:	0c9b      	lsrs	r3, r3, #18
 8006028:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68ba      	ldr	r2, [r7, #8]
 800603a:	430a      	orrs	r2, r1
 800603c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	6a1b      	ldr	r3, [r3, #32]
 8006044:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	4a3b      	ldr	r2, [pc, #236]	; (800613c <HAL_I2C_Init+0x2b4>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d802      	bhi.n	8006058 <HAL_I2C_Init+0x1d0>
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	3301      	adds	r3, #1
 8006056:	e009      	b.n	800606c <HAL_I2C_Init+0x1e4>
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800605e:	fb02 f303 	mul.w	r3, r2, r3
 8006062:	4a3a      	ldr	r2, [pc, #232]	; (800614c <HAL_I2C_Init+0x2c4>)
 8006064:	fba2 2303 	umull	r2, r3, r2, r3
 8006068:	099b      	lsrs	r3, r3, #6
 800606a:	3301      	adds	r3, #1
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	6812      	ldr	r2, [r2, #0]
 8006070:	430b      	orrs	r3, r1
 8006072:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	69db      	ldr	r3, [r3, #28]
 800607a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800607e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	492d      	ldr	r1, [pc, #180]	; (800613c <HAL_I2C_Init+0x2b4>)
 8006088:	428b      	cmp	r3, r1
 800608a:	d80d      	bhi.n	80060a8 <HAL_I2C_Init+0x220>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	1e59      	subs	r1, r3, #1
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	005b      	lsls	r3, r3, #1
 8006096:	fbb1 f3f3 	udiv	r3, r1, r3
 800609a:	3301      	adds	r3, #1
 800609c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060a0:	2b04      	cmp	r3, #4
 80060a2:	bf38      	it	cc
 80060a4:	2304      	movcc	r3, #4
 80060a6:	e063      	b.n	8006170 <HAL_I2C_Init+0x2e8>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d111      	bne.n	80060d4 <HAL_I2C_Init+0x24c>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	1e58      	subs	r0, r3, #1
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6859      	ldr	r1, [r3, #4]
 80060b8:	460b      	mov	r3, r1
 80060ba:	005b      	lsls	r3, r3, #1
 80060bc:	440b      	add	r3, r1
 80060be:	fbb0 f3f3 	udiv	r3, r0, r3
 80060c2:	3301      	adds	r3, #1
 80060c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	bf0c      	ite	eq
 80060cc:	2301      	moveq	r3, #1
 80060ce:	2300      	movne	r3, #0
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	e012      	b.n	80060fa <HAL_I2C_Init+0x272>
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	1e58      	subs	r0, r3, #1
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6859      	ldr	r1, [r3, #4]
 80060dc:	460b      	mov	r3, r1
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	440b      	add	r3, r1
 80060e2:	0099      	lsls	r1, r3, #2
 80060e4:	440b      	add	r3, r1
 80060e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80060ea:	3301      	adds	r3, #1
 80060ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	bf0c      	ite	eq
 80060f4:	2301      	moveq	r3, #1
 80060f6:	2300      	movne	r3, #0
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d001      	beq.n	8006102 <HAL_I2C_Init+0x27a>
 80060fe:	2301      	movs	r3, #1
 8006100:	e036      	b.n	8006170 <HAL_I2C_Init+0x2e8>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d122      	bne.n	8006150 <HAL_I2C_Init+0x2c8>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	1e58      	subs	r0, r3, #1
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6859      	ldr	r1, [r3, #4]
 8006112:	460b      	mov	r3, r1
 8006114:	005b      	lsls	r3, r3, #1
 8006116:	440b      	add	r3, r1
 8006118:	fbb0 f3f3 	udiv	r3, r0, r3
 800611c:	3301      	adds	r3, #1
 800611e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006126:	e023      	b.n	8006170 <HAL_I2C_Init+0x2e8>
 8006128:	40005400 	.word	0x40005400
 800612c:	40005800 	.word	0x40005800
 8006130:	40005c00 	.word	0x40005c00
 8006134:	08011a14 	.word	0x08011a14
 8006138:	00061a80 	.word	0x00061a80
 800613c:	000186a0 	.word	0x000186a0
 8006140:	001e847f 	.word	0x001e847f
 8006144:	003d08ff 	.word	0x003d08ff
 8006148:	431bde83 	.word	0x431bde83
 800614c:	10624dd3 	.word	0x10624dd3
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	1e58      	subs	r0, r3, #1
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6859      	ldr	r1, [r3, #4]
 8006158:	460b      	mov	r3, r1
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	440b      	add	r3, r1
 800615e:	0099      	lsls	r1, r3, #2
 8006160:	440b      	add	r3, r1
 8006162:	fbb0 f3f3 	udiv	r3, r0, r3
 8006166:	3301      	adds	r3, #1
 8006168:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800616c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006170:	6879      	ldr	r1, [r7, #4]
 8006172:	6809      	ldr	r1, [r1, #0]
 8006174:	4313      	orrs	r3, r2
 8006176:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	69da      	ldr	r2, [r3, #28]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a1b      	ldr	r3, [r3, #32]
 800618a:	431a      	orrs	r2, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	430a      	orrs	r2, r1
 8006192:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800619e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	6911      	ldr	r1, [r2, #16]
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	68d2      	ldr	r2, [r2, #12]
 80061aa:	4311      	orrs	r1, r2
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	6812      	ldr	r2, [r2, #0]
 80061b0:	430b      	orrs	r3, r1
 80061b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	695a      	ldr	r2, [r3, #20]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	431a      	orrs	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	430a      	orrs	r2, r1
 80061ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f042 0201 	orr.w	r2, r2, #1
 80061de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2220      	movs	r2, #32
 80061ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3710      	adds	r7, #16
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop

08006208 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b086      	sub	sp, #24
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d101      	bne.n	800621a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e30d      	b.n	8006836 <HAL_RCC_OscConfig+0x62e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2b0f      	cmp	r3, #15
 8006220:	d903      	bls.n	800622a <HAL_RCC_OscConfig+0x22>
 8006222:	21e8      	movs	r1, #232	; 0xe8
 8006224:	48a3      	ldr	r0, [pc, #652]	; (80064b4 <HAL_RCC_OscConfig+0x2ac>)
 8006226:	f7fb fbad 	bl	8001984 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	2b00      	cmp	r3, #0
 8006234:	f000 8088 	beq.w	8006348 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d00d      	beq.n	800625c <HAL_RCC_OscConfig+0x54>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006248:	d008      	beq.n	800625c <HAL_RCC_OscConfig+0x54>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006252:	d003      	beq.n	800625c <HAL_RCC_OscConfig+0x54>
 8006254:	21ed      	movs	r1, #237	; 0xed
 8006256:	4897      	ldr	r0, [pc, #604]	; (80064b4 <HAL_RCC_OscConfig+0x2ac>)
 8006258:	f7fb fb94 	bl	8001984 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800625c:	4b96      	ldr	r3, [pc, #600]	; (80064b8 <HAL_RCC_OscConfig+0x2b0>)
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	f003 030c 	and.w	r3, r3, #12
 8006264:	2b04      	cmp	r3, #4
 8006266:	d00c      	beq.n	8006282 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006268:	4b93      	ldr	r3, [pc, #588]	; (80064b8 <HAL_RCC_OscConfig+0x2b0>)
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006270:	2b08      	cmp	r3, #8
 8006272:	d112      	bne.n	800629a <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006274:	4b90      	ldr	r3, [pc, #576]	; (80064b8 <HAL_RCC_OscConfig+0x2b0>)
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800627c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006280:	d10b      	bne.n	800629a <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006282:	4b8d      	ldr	r3, [pc, #564]	; (80064b8 <HAL_RCC_OscConfig+0x2b0>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800628a:	2b00      	cmp	r3, #0
 800628c:	d05b      	beq.n	8006346 <HAL_RCC_OscConfig+0x13e>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d157      	bne.n	8006346 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e2cd      	b.n	8006836 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062a2:	d106      	bne.n	80062b2 <HAL_RCC_OscConfig+0xaa>
 80062a4:	4b84      	ldr	r3, [pc, #528]	; (80064b8 <HAL_RCC_OscConfig+0x2b0>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a83      	ldr	r2, [pc, #524]	; (80064b8 <HAL_RCC_OscConfig+0x2b0>)
 80062aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062ae:	6013      	str	r3, [r2, #0]
 80062b0:	e01d      	b.n	80062ee <HAL_RCC_OscConfig+0xe6>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062ba:	d10c      	bne.n	80062d6 <HAL_RCC_OscConfig+0xce>
 80062bc:	4b7e      	ldr	r3, [pc, #504]	; (80064b8 <HAL_RCC_OscConfig+0x2b0>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a7d      	ldr	r2, [pc, #500]	; (80064b8 <HAL_RCC_OscConfig+0x2b0>)
 80062c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062c6:	6013      	str	r3, [r2, #0]
 80062c8:	4b7b      	ldr	r3, [pc, #492]	; (80064b8 <HAL_RCC_OscConfig+0x2b0>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a7a      	ldr	r2, [pc, #488]	; (80064b8 <HAL_RCC_OscConfig+0x2b0>)
 80062ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062d2:	6013      	str	r3, [r2, #0]
 80062d4:	e00b      	b.n	80062ee <HAL_RCC_OscConfig+0xe6>
 80062d6:	4b78      	ldr	r3, [pc, #480]	; (80064b8 <HAL_RCC_OscConfig+0x2b0>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a77      	ldr	r2, [pc, #476]	; (80064b8 <HAL_RCC_OscConfig+0x2b0>)
 80062dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062e0:	6013      	str	r3, [r2, #0]
 80062e2:	4b75      	ldr	r3, [pc, #468]	; (80064b8 <HAL_RCC_OscConfig+0x2b0>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a74      	ldr	r2, [pc, #464]	; (80064b8 <HAL_RCC_OscConfig+0x2b0>)
 80062e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062ec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d013      	beq.n	800631e <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062f6:	f7fb ff7d 	bl	80021f4 <HAL_GetTick>
 80062fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062fc:	e008      	b.n	8006310 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062fe:	f7fb ff79 	bl	80021f4 <HAL_GetTick>
 8006302:	4602      	mov	r2, r0
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	2b64      	cmp	r3, #100	; 0x64
 800630a:	d901      	bls.n	8006310 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800630c:	2303      	movs	r3, #3
 800630e:	e292      	b.n	8006836 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006310:	4b69      	ldr	r3, [pc, #420]	; (80064b8 <HAL_RCC_OscConfig+0x2b0>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d0f0      	beq.n	80062fe <HAL_RCC_OscConfig+0xf6>
 800631c:	e014      	b.n	8006348 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800631e:	f7fb ff69 	bl	80021f4 <HAL_GetTick>
 8006322:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006324:	e008      	b.n	8006338 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006326:	f7fb ff65 	bl	80021f4 <HAL_GetTick>
 800632a:	4602      	mov	r2, r0
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	2b64      	cmp	r3, #100	; 0x64
 8006332:	d901      	bls.n	8006338 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8006334:	2303      	movs	r3, #3
 8006336:	e27e      	b.n	8006836 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006338:	4b5f      	ldr	r3, [pc, #380]	; (80064b8 <HAL_RCC_OscConfig+0x2b0>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006340:	2b00      	cmp	r3, #0
 8006342:	d1f0      	bne.n	8006326 <HAL_RCC_OscConfig+0x11e>
 8006344:	e000      	b.n	8006348 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006346:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 0302 	and.w	r3, r3, #2
 8006350:	2b00      	cmp	r3, #0
 8006352:	d079      	beq.n	8006448 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d008      	beq.n	800636e <HAL_RCC_OscConfig+0x166>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	2b01      	cmp	r3, #1
 8006362:	d004      	beq.n	800636e <HAL_RCC_OscConfig+0x166>
 8006364:	f240 111f 	movw	r1, #287	; 0x11f
 8006368:	4852      	ldr	r0, [pc, #328]	; (80064b4 <HAL_RCC_OscConfig+0x2ac>)
 800636a:	f7fb fb0b 	bl	8001984 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	2b1f      	cmp	r3, #31
 8006374:	d904      	bls.n	8006380 <HAL_RCC_OscConfig+0x178>
 8006376:	f44f 7190 	mov.w	r1, #288	; 0x120
 800637a:	484e      	ldr	r0, [pc, #312]	; (80064b4 <HAL_RCC_OscConfig+0x2ac>)
 800637c:	f7fb fb02 	bl	8001984 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006380:	4b4d      	ldr	r3, [pc, #308]	; (80064b8 <HAL_RCC_OscConfig+0x2b0>)
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	f003 030c 	and.w	r3, r3, #12
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00b      	beq.n	80063a4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800638c:	4b4a      	ldr	r3, [pc, #296]	; (80064b8 <HAL_RCC_OscConfig+0x2b0>)
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006394:	2b08      	cmp	r3, #8
 8006396:	d11c      	bne.n	80063d2 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006398:	4b47      	ldr	r3, [pc, #284]	; (80064b8 <HAL_RCC_OscConfig+0x2b0>)
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d116      	bne.n	80063d2 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063a4:	4b44      	ldr	r3, [pc, #272]	; (80064b8 <HAL_RCC_OscConfig+0x2b0>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 0302 	and.w	r3, r3, #2
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d005      	beq.n	80063bc <HAL_RCC_OscConfig+0x1b4>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d001      	beq.n	80063bc <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e23c      	b.n	8006836 <HAL_RCC_OscConfig+0x62e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063bc:	4b3e      	ldr	r3, [pc, #248]	; (80064b8 <HAL_RCC_OscConfig+0x2b0>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	00db      	lsls	r3, r3, #3
 80063ca:	493b      	ldr	r1, [pc, #236]	; (80064b8 <HAL_RCC_OscConfig+0x2b0>)
 80063cc:	4313      	orrs	r3, r2
 80063ce:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063d0:	e03a      	b.n	8006448 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d020      	beq.n	800641c <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063da:	4b38      	ldr	r3, [pc, #224]	; (80064bc <HAL_RCC_OscConfig+0x2b4>)
 80063dc:	2201      	movs	r2, #1
 80063de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063e0:	f7fb ff08 	bl	80021f4 <HAL_GetTick>
 80063e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063e6:	e008      	b.n	80063fa <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063e8:	f7fb ff04 	bl	80021f4 <HAL_GetTick>
 80063ec:	4602      	mov	r2, r0
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d901      	bls.n	80063fa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80063f6:	2303      	movs	r3, #3
 80063f8:	e21d      	b.n	8006836 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063fa:	4b2f      	ldr	r3, [pc, #188]	; (80064b8 <HAL_RCC_OscConfig+0x2b0>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 0302 	and.w	r3, r3, #2
 8006402:	2b00      	cmp	r3, #0
 8006404:	d0f0      	beq.n	80063e8 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006406:	4b2c      	ldr	r3, [pc, #176]	; (80064b8 <HAL_RCC_OscConfig+0x2b0>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	00db      	lsls	r3, r3, #3
 8006414:	4928      	ldr	r1, [pc, #160]	; (80064b8 <HAL_RCC_OscConfig+0x2b0>)
 8006416:	4313      	orrs	r3, r2
 8006418:	600b      	str	r3, [r1, #0]
 800641a:	e015      	b.n	8006448 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800641c:	4b27      	ldr	r3, [pc, #156]	; (80064bc <HAL_RCC_OscConfig+0x2b4>)
 800641e:	2200      	movs	r2, #0
 8006420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006422:	f7fb fee7 	bl	80021f4 <HAL_GetTick>
 8006426:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006428:	e008      	b.n	800643c <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800642a:	f7fb fee3 	bl	80021f4 <HAL_GetTick>
 800642e:	4602      	mov	r2, r0
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	2b02      	cmp	r3, #2
 8006436:	d901      	bls.n	800643c <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8006438:	2303      	movs	r3, #3
 800643a:	e1fc      	b.n	8006836 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800643c:	4b1e      	ldr	r3, [pc, #120]	; (80064b8 <HAL_RCC_OscConfig+0x2b0>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 0302 	and.w	r3, r3, #2
 8006444:	2b00      	cmp	r3, #0
 8006446:	d1f0      	bne.n	800642a <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 0308 	and.w	r3, r3, #8
 8006450:	2b00      	cmp	r3, #0
 8006452:	d046      	beq.n	80064e2 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	695b      	ldr	r3, [r3, #20]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d008      	beq.n	800646e <HAL_RCC_OscConfig+0x266>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	695b      	ldr	r3, [r3, #20]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d004      	beq.n	800646e <HAL_RCC_OscConfig+0x266>
 8006464:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8006468:	4812      	ldr	r0, [pc, #72]	; (80064b4 <HAL_RCC_OscConfig+0x2ac>)
 800646a:	f7fb fa8b 	bl	8001984 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	695b      	ldr	r3, [r3, #20]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d016      	beq.n	80064a4 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006476:	4b12      	ldr	r3, [pc, #72]	; (80064c0 <HAL_RCC_OscConfig+0x2b8>)
 8006478:	2201      	movs	r2, #1
 800647a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800647c:	f7fb feba 	bl	80021f4 <HAL_GetTick>
 8006480:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006482:	e008      	b.n	8006496 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006484:	f7fb feb6 	bl	80021f4 <HAL_GetTick>
 8006488:	4602      	mov	r2, r0
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	2b02      	cmp	r3, #2
 8006490:	d901      	bls.n	8006496 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e1cf      	b.n	8006836 <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006496:	4b08      	ldr	r3, [pc, #32]	; (80064b8 <HAL_RCC_OscConfig+0x2b0>)
 8006498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800649a:	f003 0302 	and.w	r3, r3, #2
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d0f0      	beq.n	8006484 <HAL_RCC_OscConfig+0x27c>
 80064a2:	e01e      	b.n	80064e2 <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064a4:	4b06      	ldr	r3, [pc, #24]	; (80064c0 <HAL_RCC_OscConfig+0x2b8>)
 80064a6:	2200      	movs	r2, #0
 80064a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064aa:	f7fb fea3 	bl	80021f4 <HAL_GetTick>
 80064ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064b0:	e011      	b.n	80064d6 <HAL_RCC_OscConfig+0x2ce>
 80064b2:	bf00      	nop
 80064b4:	08011a4c 	.word	0x08011a4c
 80064b8:	40023800 	.word	0x40023800
 80064bc:	42470000 	.word	0x42470000
 80064c0:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064c4:	f7fb fe96 	bl	80021f4 <HAL_GetTick>
 80064c8:	4602      	mov	r2, r0
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d901      	bls.n	80064d6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e1af      	b.n	8006836 <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064d6:	4b97      	ldr	r3, [pc, #604]	; (8006734 <HAL_RCC_OscConfig+0x52c>)
 80064d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064da:	f003 0302 	and.w	r3, r3, #2
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1f0      	bne.n	80064c4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0304 	and.w	r3, r3, #4
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f000 80a8 	beq.w	8006640 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064f0:	2300      	movs	r3, #0
 80064f2:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00c      	beq.n	8006516 <HAL_RCC_OscConfig+0x30e>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	2b01      	cmp	r3, #1
 8006502:	d008      	beq.n	8006516 <HAL_RCC_OscConfig+0x30e>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	2b05      	cmp	r3, #5
 800650a:	d004      	beq.n	8006516 <HAL_RCC_OscConfig+0x30e>
 800650c:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8006510:	4889      	ldr	r0, [pc, #548]	; (8006738 <HAL_RCC_OscConfig+0x530>)
 8006512:	f7fb fa37 	bl	8001984 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006516:	4b87      	ldr	r3, [pc, #540]	; (8006734 <HAL_RCC_OscConfig+0x52c>)
 8006518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d10f      	bne.n	8006542 <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006522:	2300      	movs	r3, #0
 8006524:	60bb      	str	r3, [r7, #8]
 8006526:	4b83      	ldr	r3, [pc, #524]	; (8006734 <HAL_RCC_OscConfig+0x52c>)
 8006528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652a:	4a82      	ldr	r2, [pc, #520]	; (8006734 <HAL_RCC_OscConfig+0x52c>)
 800652c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006530:	6413      	str	r3, [r2, #64]	; 0x40
 8006532:	4b80      	ldr	r3, [pc, #512]	; (8006734 <HAL_RCC_OscConfig+0x52c>)
 8006534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800653a:	60bb      	str	r3, [r7, #8]
 800653c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800653e:	2301      	movs	r3, #1
 8006540:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006542:	4b7e      	ldr	r3, [pc, #504]	; (800673c <HAL_RCC_OscConfig+0x534>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800654a:	2b00      	cmp	r3, #0
 800654c:	d118      	bne.n	8006580 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800654e:	4b7b      	ldr	r3, [pc, #492]	; (800673c <HAL_RCC_OscConfig+0x534>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a7a      	ldr	r2, [pc, #488]	; (800673c <HAL_RCC_OscConfig+0x534>)
 8006554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800655a:	f7fb fe4b 	bl	80021f4 <HAL_GetTick>
 800655e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006560:	e008      	b.n	8006574 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006562:	f7fb fe47 	bl	80021f4 <HAL_GetTick>
 8006566:	4602      	mov	r2, r0
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	1ad3      	subs	r3, r2, r3
 800656c:	2b02      	cmp	r3, #2
 800656e:	d901      	bls.n	8006574 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 8006570:	2303      	movs	r3, #3
 8006572:	e160      	b.n	8006836 <HAL_RCC_OscConfig+0x62e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006574:	4b71      	ldr	r3, [pc, #452]	; (800673c <HAL_RCC_OscConfig+0x534>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800657c:	2b00      	cmp	r3, #0
 800657e:	d0f0      	beq.n	8006562 <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	2b01      	cmp	r3, #1
 8006586:	d106      	bne.n	8006596 <HAL_RCC_OscConfig+0x38e>
 8006588:	4b6a      	ldr	r3, [pc, #424]	; (8006734 <HAL_RCC_OscConfig+0x52c>)
 800658a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800658c:	4a69      	ldr	r2, [pc, #420]	; (8006734 <HAL_RCC_OscConfig+0x52c>)
 800658e:	f043 0301 	orr.w	r3, r3, #1
 8006592:	6713      	str	r3, [r2, #112]	; 0x70
 8006594:	e01c      	b.n	80065d0 <HAL_RCC_OscConfig+0x3c8>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	2b05      	cmp	r3, #5
 800659c:	d10c      	bne.n	80065b8 <HAL_RCC_OscConfig+0x3b0>
 800659e:	4b65      	ldr	r3, [pc, #404]	; (8006734 <HAL_RCC_OscConfig+0x52c>)
 80065a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065a2:	4a64      	ldr	r2, [pc, #400]	; (8006734 <HAL_RCC_OscConfig+0x52c>)
 80065a4:	f043 0304 	orr.w	r3, r3, #4
 80065a8:	6713      	str	r3, [r2, #112]	; 0x70
 80065aa:	4b62      	ldr	r3, [pc, #392]	; (8006734 <HAL_RCC_OscConfig+0x52c>)
 80065ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ae:	4a61      	ldr	r2, [pc, #388]	; (8006734 <HAL_RCC_OscConfig+0x52c>)
 80065b0:	f043 0301 	orr.w	r3, r3, #1
 80065b4:	6713      	str	r3, [r2, #112]	; 0x70
 80065b6:	e00b      	b.n	80065d0 <HAL_RCC_OscConfig+0x3c8>
 80065b8:	4b5e      	ldr	r3, [pc, #376]	; (8006734 <HAL_RCC_OscConfig+0x52c>)
 80065ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065bc:	4a5d      	ldr	r2, [pc, #372]	; (8006734 <HAL_RCC_OscConfig+0x52c>)
 80065be:	f023 0301 	bic.w	r3, r3, #1
 80065c2:	6713      	str	r3, [r2, #112]	; 0x70
 80065c4:	4b5b      	ldr	r3, [pc, #364]	; (8006734 <HAL_RCC_OscConfig+0x52c>)
 80065c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065c8:	4a5a      	ldr	r2, [pc, #360]	; (8006734 <HAL_RCC_OscConfig+0x52c>)
 80065ca:	f023 0304 	bic.w	r3, r3, #4
 80065ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d015      	beq.n	8006604 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065d8:	f7fb fe0c 	bl	80021f4 <HAL_GetTick>
 80065dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065de:	e00a      	b.n	80065f6 <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065e0:	f7fb fe08 	bl	80021f4 <HAL_GetTick>
 80065e4:	4602      	mov	r2, r0
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d901      	bls.n	80065f6 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e11f      	b.n	8006836 <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065f6:	4b4f      	ldr	r3, [pc, #316]	; (8006734 <HAL_RCC_OscConfig+0x52c>)
 80065f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065fa:	f003 0302 	and.w	r3, r3, #2
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d0ee      	beq.n	80065e0 <HAL_RCC_OscConfig+0x3d8>
 8006602:	e014      	b.n	800662e <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006604:	f7fb fdf6 	bl	80021f4 <HAL_GetTick>
 8006608:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800660a:	e00a      	b.n	8006622 <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800660c:	f7fb fdf2 	bl	80021f4 <HAL_GetTick>
 8006610:	4602      	mov	r2, r0
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	f241 3288 	movw	r2, #5000	; 0x1388
 800661a:	4293      	cmp	r3, r2
 800661c:	d901      	bls.n	8006622 <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e109      	b.n	8006836 <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006622:	4b44      	ldr	r3, [pc, #272]	; (8006734 <HAL_RCC_OscConfig+0x52c>)
 8006624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006626:	f003 0302 	and.w	r3, r3, #2
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1ee      	bne.n	800660c <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800662e:	7dfb      	ldrb	r3, [r7, #23]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d105      	bne.n	8006640 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006634:	4b3f      	ldr	r3, [pc, #252]	; (8006734 <HAL_RCC_OscConfig+0x52c>)
 8006636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006638:	4a3e      	ldr	r2, [pc, #248]	; (8006734 <HAL_RCC_OscConfig+0x52c>)
 800663a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800663e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00c      	beq.n	8006662 <HAL_RCC_OscConfig+0x45a>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	699b      	ldr	r3, [r3, #24]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d008      	beq.n	8006662 <HAL_RCC_OscConfig+0x45a>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	2b02      	cmp	r3, #2
 8006656:	d004      	beq.n	8006662 <HAL_RCC_OscConfig+0x45a>
 8006658:	f240 11cf 	movw	r1, #463	; 0x1cf
 800665c:	4836      	ldr	r0, [pc, #216]	; (8006738 <HAL_RCC_OscConfig+0x530>)
 800665e:	f7fb f991 	bl	8001984 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	2b00      	cmp	r3, #0
 8006668:	f000 80e4 	beq.w	8006834 <HAL_RCC_OscConfig+0x62c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800666c:	4b31      	ldr	r3, [pc, #196]	; (8006734 <HAL_RCC_OscConfig+0x52c>)
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	f003 030c 	and.w	r3, r3, #12
 8006674:	2b08      	cmp	r3, #8
 8006676:	f000 80ae 	beq.w	80067d6 <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	699b      	ldr	r3, [r3, #24]
 800667e:	2b02      	cmp	r3, #2
 8006680:	f040 8092 	bne.w	80067a8 <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	69db      	ldr	r3, [r3, #28]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d009      	beq.n	80066a0 <HAL_RCC_OscConfig+0x498>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	69db      	ldr	r3, [r3, #28]
 8006690:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006694:	d004      	beq.n	80066a0 <HAL_RCC_OscConfig+0x498>
 8006696:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800669a:	4827      	ldr	r0, [pc, #156]	; (8006738 <HAL_RCC_OscConfig+0x530>)
 800669c:	f7fb f972 	bl	8001984 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6a1b      	ldr	r3, [r3, #32]
 80066a4:	2b3f      	cmp	r3, #63	; 0x3f
 80066a6:	d904      	bls.n	80066b2 <HAL_RCC_OscConfig+0x4aa>
 80066a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80066ac:	4822      	ldr	r0, [pc, #136]	; (8006738 <HAL_RCC_OscConfig+0x530>)
 80066ae:	f7fb f969 	bl	8001984 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b6:	2bbf      	cmp	r3, #191	; 0xbf
 80066b8:	d904      	bls.n	80066c4 <HAL_RCC_OscConfig+0x4bc>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066be:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80066c2:	d904      	bls.n	80066ce <HAL_RCC_OscConfig+0x4c6>
 80066c4:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80066c8:	481b      	ldr	r0, [pc, #108]	; (8006738 <HAL_RCC_OscConfig+0x530>)
 80066ca:	f7fb f95b 	bl	8001984 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d2:	2b02      	cmp	r3, #2
 80066d4:	d010      	beq.n	80066f8 <HAL_RCC_OscConfig+0x4f0>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066da:	2b04      	cmp	r3, #4
 80066dc:	d00c      	beq.n	80066f8 <HAL_RCC_OscConfig+0x4f0>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e2:	2b06      	cmp	r3, #6
 80066e4:	d008      	beq.n	80066f8 <HAL_RCC_OscConfig+0x4f0>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ea:	2b08      	cmp	r3, #8
 80066ec:	d004      	beq.n	80066f8 <HAL_RCC_OscConfig+0x4f0>
 80066ee:	f240 11db 	movw	r1, #475	; 0x1db
 80066f2:	4811      	ldr	r0, [pc, #68]	; (8006738 <HAL_RCC_OscConfig+0x530>)
 80066f4:	f7fb f946 	bl	8001984 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d903      	bls.n	8006708 <HAL_RCC_OscConfig+0x500>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006704:	2b0f      	cmp	r3, #15
 8006706:	d904      	bls.n	8006712 <HAL_RCC_OscConfig+0x50a>
 8006708:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 800670c:	480a      	ldr	r0, [pc, #40]	; (8006738 <HAL_RCC_OscConfig+0x530>)
 800670e:	f7fb f939 	bl	8001984 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006712:	4b0b      	ldr	r3, [pc, #44]	; (8006740 <HAL_RCC_OscConfig+0x538>)
 8006714:	2200      	movs	r2, #0
 8006716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006718:	f7fb fd6c 	bl	80021f4 <HAL_GetTick>
 800671c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800671e:	e011      	b.n	8006744 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006720:	f7fb fd68 	bl	80021f4 <HAL_GetTick>
 8006724:	4602      	mov	r2, r0
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	2b02      	cmp	r3, #2
 800672c:	d90a      	bls.n	8006744 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 800672e:	2303      	movs	r3, #3
 8006730:	e081      	b.n	8006836 <HAL_RCC_OscConfig+0x62e>
 8006732:	bf00      	nop
 8006734:	40023800 	.word	0x40023800
 8006738:	08011a4c 	.word	0x08011a4c
 800673c:	40007000 	.word	0x40007000
 8006740:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006744:	4b3e      	ldr	r3, [pc, #248]	; (8006840 <HAL_RCC_OscConfig+0x638>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800674c:	2b00      	cmp	r3, #0
 800674e:	d1e7      	bne.n	8006720 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	69da      	ldr	r2, [r3, #28]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a1b      	ldr	r3, [r3, #32]
 8006758:	431a      	orrs	r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675e:	019b      	lsls	r3, r3, #6
 8006760:	431a      	orrs	r2, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006766:	085b      	lsrs	r3, r3, #1
 8006768:	3b01      	subs	r3, #1
 800676a:	041b      	lsls	r3, r3, #16
 800676c:	431a      	orrs	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006772:	061b      	lsls	r3, r3, #24
 8006774:	4932      	ldr	r1, [pc, #200]	; (8006840 <HAL_RCC_OscConfig+0x638>)
 8006776:	4313      	orrs	r3, r2
 8006778:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800677a:	4b32      	ldr	r3, [pc, #200]	; (8006844 <HAL_RCC_OscConfig+0x63c>)
 800677c:	2201      	movs	r2, #1
 800677e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006780:	f7fb fd38 	bl	80021f4 <HAL_GetTick>
 8006784:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006786:	e008      	b.n	800679a <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006788:	f7fb fd34 	bl	80021f4 <HAL_GetTick>
 800678c:	4602      	mov	r2, r0
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	2b02      	cmp	r3, #2
 8006794:	d901      	bls.n	800679a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	e04d      	b.n	8006836 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800679a:	4b29      	ldr	r3, [pc, #164]	; (8006840 <HAL_RCC_OscConfig+0x638>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d0f0      	beq.n	8006788 <HAL_RCC_OscConfig+0x580>
 80067a6:	e045      	b.n	8006834 <HAL_RCC_OscConfig+0x62c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067a8:	4b26      	ldr	r3, [pc, #152]	; (8006844 <HAL_RCC_OscConfig+0x63c>)
 80067aa:	2200      	movs	r2, #0
 80067ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067ae:	f7fb fd21 	bl	80021f4 <HAL_GetTick>
 80067b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067b4:	e008      	b.n	80067c8 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067b6:	f7fb fd1d 	bl	80021f4 <HAL_GetTick>
 80067ba:	4602      	mov	r2, r0
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d901      	bls.n	80067c8 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e036      	b.n	8006836 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067c8:	4b1d      	ldr	r3, [pc, #116]	; (8006840 <HAL_RCC_OscConfig+0x638>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d1f0      	bne.n	80067b6 <HAL_RCC_OscConfig+0x5ae>
 80067d4:	e02e      	b.n	8006834 <HAL_RCC_OscConfig+0x62c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d101      	bne.n	80067e2 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e029      	b.n	8006836 <HAL_RCC_OscConfig+0x62e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80067e2:	4b17      	ldr	r3, [pc, #92]	; (8006840 <HAL_RCC_OscConfig+0x638>)
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	69db      	ldr	r3, [r3, #28]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d11c      	bne.n	8006830 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006800:	429a      	cmp	r2, r3
 8006802:	d115      	bne.n	8006830 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800680a:	4013      	ands	r3, r2
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006810:	4293      	cmp	r3, r2
 8006812:	d10d      	bne.n	8006830 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800681e:	429a      	cmp	r2, r3
 8006820:	d106      	bne.n	8006830 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800682c:	429a      	cmp	r2, r3
 800682e:	d001      	beq.n	8006834 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e000      	b.n	8006836 <HAL_RCC_OscConfig+0x62e>
        }
      }
    }
  }
  return HAL_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3718      	adds	r7, #24
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	40023800 	.word	0x40023800
 8006844:	42470060 	.word	0x42470060

08006848 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d101      	bne.n	800685c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	e174      	b.n	8006b46 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d003      	beq.n	800686c <HAL_RCC_ClockConfig+0x24>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2b0f      	cmp	r3, #15
 800686a:	d904      	bls.n	8006876 <HAL_RCC_ClockConfig+0x2e>
 800686c:	f240 2151 	movw	r1, #593	; 0x251
 8006870:	487b      	ldr	r0, [pc, #492]	; (8006a60 <HAL_RCC_ClockConfig+0x218>)
 8006872:	f7fb f887 	bl	8001984 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d019      	beq.n	80068b0 <HAL_RCC_ClockConfig+0x68>
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	2b01      	cmp	r3, #1
 8006880:	d016      	beq.n	80068b0 <HAL_RCC_ClockConfig+0x68>
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	2b02      	cmp	r3, #2
 8006886:	d013      	beq.n	80068b0 <HAL_RCC_ClockConfig+0x68>
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	2b03      	cmp	r3, #3
 800688c:	d010      	beq.n	80068b0 <HAL_RCC_ClockConfig+0x68>
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	2b04      	cmp	r3, #4
 8006892:	d00d      	beq.n	80068b0 <HAL_RCC_ClockConfig+0x68>
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	2b05      	cmp	r3, #5
 8006898:	d00a      	beq.n	80068b0 <HAL_RCC_ClockConfig+0x68>
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	2b06      	cmp	r3, #6
 800689e:	d007      	beq.n	80068b0 <HAL_RCC_ClockConfig+0x68>
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	2b07      	cmp	r3, #7
 80068a4:	d004      	beq.n	80068b0 <HAL_RCC_ClockConfig+0x68>
 80068a6:	f240 2152 	movw	r1, #594	; 0x252
 80068aa:	486d      	ldr	r0, [pc, #436]	; (8006a60 <HAL_RCC_ClockConfig+0x218>)
 80068ac:	f7fb f86a 	bl	8001984 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80068b0:	4b6c      	ldr	r3, [pc, #432]	; (8006a64 <HAL_RCC_ClockConfig+0x21c>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 030f 	and.w	r3, r3, #15
 80068b8:	683a      	ldr	r2, [r7, #0]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d90c      	bls.n	80068d8 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068be:	4b69      	ldr	r3, [pc, #420]	; (8006a64 <HAL_RCC_ClockConfig+0x21c>)
 80068c0:	683a      	ldr	r2, [r7, #0]
 80068c2:	b2d2      	uxtb	r2, r2
 80068c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068c6:	4b67      	ldr	r3, [pc, #412]	; (8006a64 <HAL_RCC_ClockConfig+0x21c>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 030f 	and.w	r3, r3, #15
 80068ce:	683a      	ldr	r2, [r7, #0]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d001      	beq.n	80068d8 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e136      	b.n	8006b46 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 0302 	and.w	r3, r3, #2
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d049      	beq.n	8006978 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 0304 	and.w	r3, r3, #4
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d005      	beq.n	80068fc <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068f0:	4b5d      	ldr	r3, [pc, #372]	; (8006a68 <HAL_RCC_ClockConfig+0x220>)
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	4a5c      	ldr	r2, [pc, #368]	; (8006a68 <HAL_RCC_ClockConfig+0x220>)
 80068f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80068fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0308 	and.w	r3, r3, #8
 8006904:	2b00      	cmp	r3, #0
 8006906:	d005      	beq.n	8006914 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006908:	4b57      	ldr	r3, [pc, #348]	; (8006a68 <HAL_RCC_ClockConfig+0x220>)
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	4a56      	ldr	r2, [pc, #344]	; (8006a68 <HAL_RCC_ClockConfig+0x220>)
 800690e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006912:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d024      	beq.n	8006966 <HAL_RCC_ClockConfig+0x11e>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	2b80      	cmp	r3, #128	; 0x80
 8006922:	d020      	beq.n	8006966 <HAL_RCC_ClockConfig+0x11e>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	2b90      	cmp	r3, #144	; 0x90
 800692a:	d01c      	beq.n	8006966 <HAL_RCC_ClockConfig+0x11e>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	2ba0      	cmp	r3, #160	; 0xa0
 8006932:	d018      	beq.n	8006966 <HAL_RCC_ClockConfig+0x11e>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	2bb0      	cmp	r3, #176	; 0xb0
 800693a:	d014      	beq.n	8006966 <HAL_RCC_ClockConfig+0x11e>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	2bc0      	cmp	r3, #192	; 0xc0
 8006942:	d010      	beq.n	8006966 <HAL_RCC_ClockConfig+0x11e>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	2bd0      	cmp	r3, #208	; 0xd0
 800694a:	d00c      	beq.n	8006966 <HAL_RCC_ClockConfig+0x11e>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	2be0      	cmp	r3, #224	; 0xe0
 8006952:	d008      	beq.n	8006966 <HAL_RCC_ClockConfig+0x11e>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	2bf0      	cmp	r3, #240	; 0xf0
 800695a:	d004      	beq.n	8006966 <HAL_RCC_ClockConfig+0x11e>
 800695c:	f240 2175 	movw	r1, #629	; 0x275
 8006960:	483f      	ldr	r0, [pc, #252]	; (8006a60 <HAL_RCC_ClockConfig+0x218>)
 8006962:	f7fb f80f 	bl	8001984 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006966:	4b40      	ldr	r3, [pc, #256]	; (8006a68 <HAL_RCC_ClockConfig+0x220>)
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	493d      	ldr	r1, [pc, #244]	; (8006a68 <HAL_RCC_ClockConfig+0x220>)
 8006974:	4313      	orrs	r3, r2
 8006976:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 0301 	and.w	r3, r3, #1
 8006980:	2b00      	cmp	r3, #0
 8006982:	d059      	beq.n	8006a38 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d010      	beq.n	80069ae <HAL_RCC_ClockConfig+0x166>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	2b01      	cmp	r3, #1
 8006992:	d00c      	beq.n	80069ae <HAL_RCC_ClockConfig+0x166>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	2b02      	cmp	r3, #2
 800699a:	d008      	beq.n	80069ae <HAL_RCC_ClockConfig+0x166>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	2b03      	cmp	r3, #3
 80069a2:	d004      	beq.n	80069ae <HAL_RCC_ClockConfig+0x166>
 80069a4:	f44f 711f 	mov.w	r1, #636	; 0x27c
 80069a8:	482d      	ldr	r0, [pc, #180]	; (8006a60 <HAL_RCC_ClockConfig+0x218>)
 80069aa:	f7fa ffeb 	bl	8001984 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d107      	bne.n	80069c6 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069b6:	4b2c      	ldr	r3, [pc, #176]	; (8006a68 <HAL_RCC_ClockConfig+0x220>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d119      	bne.n	80069f6 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e0bf      	b.n	8006b46 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d003      	beq.n	80069d6 <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80069d2:	2b03      	cmp	r3, #3
 80069d4:	d107      	bne.n	80069e6 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069d6:	4b24      	ldr	r3, [pc, #144]	; (8006a68 <HAL_RCC_ClockConfig+0x220>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d109      	bne.n	80069f6 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e0af      	b.n	8006b46 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069e6:	4b20      	ldr	r3, [pc, #128]	; (8006a68 <HAL_RCC_ClockConfig+0x220>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 0302 	and.w	r3, r3, #2
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d101      	bne.n	80069f6 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e0a7      	b.n	8006b46 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80069f6:	4b1c      	ldr	r3, [pc, #112]	; (8006a68 <HAL_RCC_ClockConfig+0x220>)
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	f023 0203 	bic.w	r2, r3, #3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	4919      	ldr	r1, [pc, #100]	; (8006a68 <HAL_RCC_ClockConfig+0x220>)
 8006a04:	4313      	orrs	r3, r2
 8006a06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a08:	f7fb fbf4 	bl	80021f4 <HAL_GetTick>
 8006a0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a0e:	e00a      	b.n	8006a26 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a10:	f7fb fbf0 	bl	80021f4 <HAL_GetTick>
 8006a14:	4602      	mov	r2, r0
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	1ad3      	subs	r3, r2, r3
 8006a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d901      	bls.n	8006a26 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006a22:	2303      	movs	r3, #3
 8006a24:	e08f      	b.n	8006b46 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a26:	4b10      	ldr	r3, [pc, #64]	; (8006a68 <HAL_RCC_ClockConfig+0x220>)
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	f003 020c 	and.w	r2, r3, #12
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d1eb      	bne.n	8006a10 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a38:	4b0a      	ldr	r3, [pc, #40]	; (8006a64 <HAL_RCC_ClockConfig+0x21c>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 030f 	and.w	r3, r3, #15
 8006a40:	683a      	ldr	r2, [r7, #0]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d212      	bcs.n	8006a6c <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a46:	4b07      	ldr	r3, [pc, #28]	; (8006a64 <HAL_RCC_ClockConfig+0x21c>)
 8006a48:	683a      	ldr	r2, [r7, #0]
 8006a4a:	b2d2      	uxtb	r2, r2
 8006a4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a4e:	4b05      	ldr	r3, [pc, #20]	; (8006a64 <HAL_RCC_ClockConfig+0x21c>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 030f 	and.w	r3, r3, #15
 8006a56:	683a      	ldr	r2, [r7, #0]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d007      	beq.n	8006a6c <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e072      	b.n	8006b46 <HAL_RCC_ClockConfig+0x2fe>
 8006a60:	08011a4c 	.word	0x08011a4c
 8006a64:	40023c00 	.word	0x40023c00
 8006a68:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 0304 	and.w	r3, r3, #4
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d025      	beq.n	8006ac4 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d018      	beq.n	8006ab2 <HAL_RCC_ClockConfig+0x26a>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a88:	d013      	beq.n	8006ab2 <HAL_RCC_ClockConfig+0x26a>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006a92:	d00e      	beq.n	8006ab2 <HAL_RCC_ClockConfig+0x26a>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8006a9c:	d009      	beq.n	8006ab2 <HAL_RCC_ClockConfig+0x26a>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8006aa6:	d004      	beq.n	8006ab2 <HAL_RCC_ClockConfig+0x26a>
 8006aa8:	f240 21ba 	movw	r1, #698	; 0x2ba
 8006aac:	4828      	ldr	r0, [pc, #160]	; (8006b50 <HAL_RCC_ClockConfig+0x308>)
 8006aae:	f7fa ff69 	bl	8001984 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ab2:	4b28      	ldr	r3, [pc, #160]	; (8006b54 <HAL_RCC_ClockConfig+0x30c>)
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	4925      	ldr	r1, [pc, #148]	; (8006b54 <HAL_RCC_ClockConfig+0x30c>)
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 0308 	and.w	r3, r3, #8
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d026      	beq.n	8006b1e <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d018      	beq.n	8006b0a <HAL_RCC_ClockConfig+0x2c2>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	691b      	ldr	r3, [r3, #16]
 8006adc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ae0:	d013      	beq.n	8006b0a <HAL_RCC_ClockConfig+0x2c2>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006aea:	d00e      	beq.n	8006b0a <HAL_RCC_ClockConfig+0x2c2>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8006af4:	d009      	beq.n	8006b0a <HAL_RCC_ClockConfig+0x2c2>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8006afe:	d004      	beq.n	8006b0a <HAL_RCC_ClockConfig+0x2c2>
 8006b00:	f240 21c1 	movw	r1, #705	; 0x2c1
 8006b04:	4812      	ldr	r0, [pc, #72]	; (8006b50 <HAL_RCC_ClockConfig+0x308>)
 8006b06:	f7fa ff3d 	bl	8001984 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b0a:	4b12      	ldr	r3, [pc, #72]	; (8006b54 <HAL_RCC_ClockConfig+0x30c>)
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	00db      	lsls	r3, r3, #3
 8006b18:	490e      	ldr	r1, [pc, #56]	; (8006b54 <HAL_RCC_ClockConfig+0x30c>)
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006b1e:	f000 f821 	bl	8006b64 <HAL_RCC_GetSysClockFreq>
 8006b22:	4601      	mov	r1, r0
 8006b24:	4b0b      	ldr	r3, [pc, #44]	; (8006b54 <HAL_RCC_ClockConfig+0x30c>)
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	091b      	lsrs	r3, r3, #4
 8006b2a:	f003 030f 	and.w	r3, r3, #15
 8006b2e:	4a0a      	ldr	r2, [pc, #40]	; (8006b58 <HAL_RCC_ClockConfig+0x310>)
 8006b30:	5cd3      	ldrb	r3, [r2, r3]
 8006b32:	fa21 f303 	lsr.w	r3, r1, r3
 8006b36:	4a09      	ldr	r2, [pc, #36]	; (8006b5c <HAL_RCC_ClockConfig+0x314>)
 8006b38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006b3a:	4b09      	ldr	r3, [pc, #36]	; (8006b60 <HAL_RCC_ClockConfig+0x318>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7fb f8e2 	bl	8001d08 <HAL_InitTick>

  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3710      	adds	r7, #16
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	08011a4c 	.word	0x08011a4c
 8006b54:	40023800 	.word	0x40023800
 8006b58:	08011d18 	.word	0x08011d18
 8006b5c:	20000000 	.word	0x20000000
 8006b60:	20000004 	.word	0x20000004

08006b64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b66:	b085      	sub	sp, #20
 8006b68:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	607b      	str	r3, [r7, #4]
 8006b6e:	2300      	movs	r3, #0
 8006b70:	60fb      	str	r3, [r7, #12]
 8006b72:	2300      	movs	r3, #0
 8006b74:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006b76:	2300      	movs	r3, #0
 8006b78:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b7a:	4b50      	ldr	r3, [pc, #320]	; (8006cbc <HAL_RCC_GetSysClockFreq+0x158>)
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f003 030c 	and.w	r3, r3, #12
 8006b82:	2b04      	cmp	r3, #4
 8006b84:	d007      	beq.n	8006b96 <HAL_RCC_GetSysClockFreq+0x32>
 8006b86:	2b08      	cmp	r3, #8
 8006b88:	d008      	beq.n	8006b9c <HAL_RCC_GetSysClockFreq+0x38>
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	f040 808d 	bne.w	8006caa <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006b90:	4b4b      	ldr	r3, [pc, #300]	; (8006cc0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006b92:	60bb      	str	r3, [r7, #8]
       break;
 8006b94:	e08c      	b.n	8006cb0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006b96:	4b4b      	ldr	r3, [pc, #300]	; (8006cc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8006b98:	60bb      	str	r3, [r7, #8]
      break;
 8006b9a:	e089      	b.n	8006cb0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b9c:	4b47      	ldr	r3, [pc, #284]	; (8006cbc <HAL_RCC_GetSysClockFreq+0x158>)
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ba4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006ba6:	4b45      	ldr	r3, [pc, #276]	; (8006cbc <HAL_RCC_GetSysClockFreq+0x158>)
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d023      	beq.n	8006bfa <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bb2:	4b42      	ldr	r3, [pc, #264]	; (8006cbc <HAL_RCC_GetSysClockFreq+0x158>)
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	099b      	lsrs	r3, r3, #6
 8006bb8:	f04f 0400 	mov.w	r4, #0
 8006bbc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006bc0:	f04f 0200 	mov.w	r2, #0
 8006bc4:	ea03 0501 	and.w	r5, r3, r1
 8006bc8:	ea04 0602 	and.w	r6, r4, r2
 8006bcc:	4a3d      	ldr	r2, [pc, #244]	; (8006cc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8006bce:	fb02 f106 	mul.w	r1, r2, r6
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	fb02 f205 	mul.w	r2, r2, r5
 8006bd8:	440a      	add	r2, r1
 8006bda:	493a      	ldr	r1, [pc, #232]	; (8006cc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8006bdc:	fba5 0101 	umull	r0, r1, r5, r1
 8006be0:	1853      	adds	r3, r2, r1
 8006be2:	4619      	mov	r1, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f04f 0400 	mov.w	r4, #0
 8006bea:	461a      	mov	r2, r3
 8006bec:	4623      	mov	r3, r4
 8006bee:	f7f9 ff15 	bl	8000a1c <__aeabi_uldivmod>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	460c      	mov	r4, r1
 8006bf6:	60fb      	str	r3, [r7, #12]
 8006bf8:	e049      	b.n	8006c8e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bfa:	4b30      	ldr	r3, [pc, #192]	; (8006cbc <HAL_RCC_GetSysClockFreq+0x158>)
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	099b      	lsrs	r3, r3, #6
 8006c00:	f04f 0400 	mov.w	r4, #0
 8006c04:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006c08:	f04f 0200 	mov.w	r2, #0
 8006c0c:	ea03 0501 	and.w	r5, r3, r1
 8006c10:	ea04 0602 	and.w	r6, r4, r2
 8006c14:	4629      	mov	r1, r5
 8006c16:	4632      	mov	r2, r6
 8006c18:	f04f 0300 	mov.w	r3, #0
 8006c1c:	f04f 0400 	mov.w	r4, #0
 8006c20:	0154      	lsls	r4, r2, #5
 8006c22:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006c26:	014b      	lsls	r3, r1, #5
 8006c28:	4619      	mov	r1, r3
 8006c2a:	4622      	mov	r2, r4
 8006c2c:	1b49      	subs	r1, r1, r5
 8006c2e:	eb62 0206 	sbc.w	r2, r2, r6
 8006c32:	f04f 0300 	mov.w	r3, #0
 8006c36:	f04f 0400 	mov.w	r4, #0
 8006c3a:	0194      	lsls	r4, r2, #6
 8006c3c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006c40:	018b      	lsls	r3, r1, #6
 8006c42:	1a5b      	subs	r3, r3, r1
 8006c44:	eb64 0402 	sbc.w	r4, r4, r2
 8006c48:	f04f 0100 	mov.w	r1, #0
 8006c4c:	f04f 0200 	mov.w	r2, #0
 8006c50:	00e2      	lsls	r2, r4, #3
 8006c52:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006c56:	00d9      	lsls	r1, r3, #3
 8006c58:	460b      	mov	r3, r1
 8006c5a:	4614      	mov	r4, r2
 8006c5c:	195b      	adds	r3, r3, r5
 8006c5e:	eb44 0406 	adc.w	r4, r4, r6
 8006c62:	f04f 0100 	mov.w	r1, #0
 8006c66:	f04f 0200 	mov.w	r2, #0
 8006c6a:	02a2      	lsls	r2, r4, #10
 8006c6c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006c70:	0299      	lsls	r1, r3, #10
 8006c72:	460b      	mov	r3, r1
 8006c74:	4614      	mov	r4, r2
 8006c76:	4618      	mov	r0, r3
 8006c78:	4621      	mov	r1, r4
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f04f 0400 	mov.w	r4, #0
 8006c80:	461a      	mov	r2, r3
 8006c82:	4623      	mov	r3, r4
 8006c84:	f7f9 feca 	bl	8000a1c <__aeabi_uldivmod>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	460c      	mov	r4, r1
 8006c8c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006c8e:	4b0b      	ldr	r3, [pc, #44]	; (8006cbc <HAL_RCC_GetSysClockFreq+0x158>)
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	0c1b      	lsrs	r3, r3, #16
 8006c94:	f003 0303 	and.w	r3, r3, #3
 8006c98:	3301      	adds	r3, #1
 8006c9a:	005b      	lsls	r3, r3, #1
 8006c9c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ca6:	60bb      	str	r3, [r7, #8]
      break;
 8006ca8:	e002      	b.n	8006cb0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006caa:	4b05      	ldr	r3, [pc, #20]	; (8006cc0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006cac:	60bb      	str	r3, [r7, #8]
      break;
 8006cae:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006cb0:	68bb      	ldr	r3, [r7, #8]
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3714      	adds	r7, #20
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	40023800 	.word	0x40023800
 8006cc0:	00f42400 	.word	0x00f42400
 8006cc4:	017d7840 	.word	0x017d7840

08006cc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ccc:	4b03      	ldr	r3, [pc, #12]	; (8006cdc <HAL_RCC_GetHCLKFreq+0x14>)
 8006cce:	681b      	ldr	r3, [r3, #0]
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop
 8006cdc:	20000000 	.word	0x20000000

08006ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006ce4:	f7ff fff0 	bl	8006cc8 <HAL_RCC_GetHCLKFreq>
 8006ce8:	4601      	mov	r1, r0
 8006cea:	4b05      	ldr	r3, [pc, #20]	; (8006d00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	0a9b      	lsrs	r3, r3, #10
 8006cf0:	f003 0307 	and.w	r3, r3, #7
 8006cf4:	4a03      	ldr	r2, [pc, #12]	; (8006d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006cf6:	5cd3      	ldrb	r3, [r2, r3]
 8006cf8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	40023800 	.word	0x40023800
 8006d04:	08011d28 	.word	0x08011d28

08006d08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006d0c:	f7ff ffdc 	bl	8006cc8 <HAL_RCC_GetHCLKFreq>
 8006d10:	4601      	mov	r1, r0
 8006d12:	4b05      	ldr	r3, [pc, #20]	; (8006d28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	0b5b      	lsrs	r3, r3, #13
 8006d18:	f003 0307 	and.w	r3, r3, #7
 8006d1c:	4a03      	ldr	r2, [pc, #12]	; (8006d2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d1e:	5cd3      	ldrb	r3, [r2, r3]
 8006d20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	40023800 	.word	0x40023800
 8006d2c:	08011d28 	.word	0x08011d28

08006d30 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	220f      	movs	r2, #15
 8006d3e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006d40:	4b12      	ldr	r3, [pc, #72]	; (8006d8c <HAL_RCC_GetClockConfig+0x5c>)
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	f003 0203 	and.w	r2, r3, #3
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006d4c:	4b0f      	ldr	r3, [pc, #60]	; (8006d8c <HAL_RCC_GetClockConfig+0x5c>)
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006d58:	4b0c      	ldr	r3, [pc, #48]	; (8006d8c <HAL_RCC_GetClockConfig+0x5c>)
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006d64:	4b09      	ldr	r3, [pc, #36]	; (8006d8c <HAL_RCC_GetClockConfig+0x5c>)
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	08db      	lsrs	r3, r3, #3
 8006d6a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006d72:	4b07      	ldr	r3, [pc, #28]	; (8006d90 <HAL_RCC_GetClockConfig+0x60>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 020f 	and.w	r2, r3, #15
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	601a      	str	r2, [r3, #0]
}
 8006d7e:	bf00      	nop
 8006d80:	370c      	adds	r7, #12
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	40023800 	.word	0x40023800
 8006d90:	40023c00 	.word	0x40023c00

08006d94 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b086      	sub	sp, #24
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006da0:	2300      	movs	r3, #0
 8006da2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d003      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2b0f      	cmp	r3, #15
 8006db2:	d904      	bls.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8006db4:	f640 11d9 	movw	r1, #2521	; 0x9d9
 8006db8:	489d      	ldr	r0, [pc, #628]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006dba:	f7fa fde3 	bl	8001984 <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0301 	and.w	r3, r3, #1
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d105      	bne.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d060      	beq.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d903      	bls.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	2b07      	cmp	r3, #7
 8006de4:	d904      	bls.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006de6:	f44f 611e 	mov.w	r1, #2528	; 0x9e0
 8006dea:	4891      	ldr	r0, [pc, #580]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006dec:	f7fa fdca 	bl	8001984 <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	2bbf      	cmp	r3, #191	; 0xbf
 8006df6:	d904      	bls.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8006e00:	d904      	bls.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006e02:	f640 11e1 	movw	r1, #2529	; 0x9e1
 8006e06:	488a      	ldr	r0, [pc, #552]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006e08:	f7fa fdbc 	bl	8001984 <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d903      	bls.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x88>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	2b3f      	cmp	r3, #63	; 0x3f
 8006e1a:	d904      	bls.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x92>
 8006e1c:	f640 11e3 	movw	r1, #2531	; 0x9e3
 8006e20:	4883      	ldr	r0, [pc, #524]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006e22:	f7fa fdaf 	bl	8001984 <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006e26:	4b83      	ldr	r3, [pc, #524]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8006e28:	2200      	movs	r2, #0
 8006e2a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006e2c:	f7fb f9e2 	bl	80021f4 <HAL_GetTick>
 8006e30:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006e32:	e008      	b.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006e34:	f7fb f9de 	bl	80021f4 <HAL_GetTick>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d901      	bls.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e42:	2303      	movs	r3, #3
 8006e44:	e1ae      	b.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x410>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006e46:	4b7c      	ldr	r3, [pc, #496]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d1f0      	bne.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	685a      	ldr	r2, [r3, #4]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	019b      	lsls	r3, r3, #6
 8006e5c:	431a      	orrs	r2, r3
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	071b      	lsls	r3, r3, #28
 8006e64:	4974      	ldr	r1, [pc, #464]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8006e66:	4313      	orrs	r3, r2
 8006e68:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006e6c:	4b71      	ldr	r3, [pc, #452]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8006e6e:	2201      	movs	r2, #1
 8006e70:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006e72:	f7fb f9bf 	bl	80021f4 <HAL_GetTick>
 8006e76:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006e78:	e008      	b.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006e7a:	f7fb f9bb 	bl	80021f4 <HAL_GetTick>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	1ad3      	subs	r3, r2, r3
 8006e84:	2b02      	cmp	r3, #2
 8006e86:	d901      	bls.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	e18b      	b.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x410>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006e8c:	4b6a      	ldr	r3, [pc, #424]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d0f0      	beq.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 0302 	and.w	r3, r3, #2
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f000 8174 	beq.w	800718e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006eae:	f000 80a6 	beq.w	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006eba:	f000 80a0 	beq.w	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	4a5e      	ldr	r2, [pc, #376]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	f000 809a 	beq.w	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	4a5c      	ldr	r2, [pc, #368]	; (8007040 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	f000 8094 	beq.w	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	4a5a      	ldr	r2, [pc, #360]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	f000 808e 	beq.w	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	4a58      	ldr	r2, [pc, #352]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	f000 8088 	beq.w	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	4a56      	ldr	r2, [pc, #344]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	f000 8082 	beq.w	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	4a54      	ldr	r2, [pc, #336]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d07c      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	4a52      	ldr	r2, [pc, #328]	; (8007054 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d077      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	4a51      	ldr	r2, [pc, #324]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d072      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	4a4f      	ldr	r2, [pc, #316]	; (800705c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d06d      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	4a4e      	ldr	r2, [pc, #312]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d068      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	691b      	ldr	r3, [r3, #16]
 8006f30:	4a4c      	ldr	r2, [pc, #304]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d063      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	4a4b      	ldr	r2, [pc, #300]	; (8007068 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d05e      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	691b      	ldr	r3, [r3, #16]
 8006f44:	4a49      	ldr	r2, [pc, #292]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d059      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	4a48      	ldr	r2, [pc, #288]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d054      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	691b      	ldr	r3, [r3, #16]
 8006f58:	4a46      	ldr	r2, [pc, #280]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d04f      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	4a45      	ldr	r2, [pc, #276]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d04a      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	4a43      	ldr	r2, [pc, #268]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d045      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	4a42      	ldr	r2, [pc, #264]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d040      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	4a40      	ldr	r2, [pc, #256]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d03b      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	4a3f      	ldr	r2, [pc, #252]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d036      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	691b      	ldr	r3, [r3, #16]
 8006f94:	4a3d      	ldr	r2, [pc, #244]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d031      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	4a3c      	ldr	r2, [pc, #240]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d02c      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	691b      	ldr	r3, [r3, #16]
 8006fa8:	4a3a      	ldr	r2, [pc, #232]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d027      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	4a39      	ldr	r2, [pc, #228]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d022      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	691b      	ldr	r3, [r3, #16]
 8006fbc:	4a37      	ldr	r2, [pc, #220]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d01d      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	4a36      	ldr	r2, [pc, #216]	; (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d018      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	4a34      	ldr	r2, [pc, #208]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d013      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	4a33      	ldr	r2, [pc, #204]	; (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d00e      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	691b      	ldr	r3, [r3, #16]
 8006fe4:	4a31      	ldr	r2, [pc, #196]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d009      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	4a30      	ldr	r2, [pc, #192]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d004      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006ff4:	f640 2112 	movw	r1, #2578	; 0xa12
 8006ff8:	480d      	ldr	r0, [pc, #52]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006ffa:	f7fa fcc3 	bl	8001984 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006ffe:	2300      	movs	r3, #0
 8007000:	60fb      	str	r3, [r7, #12]
 8007002:	4b0d      	ldr	r3, [pc, #52]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8007004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007006:	4a0c      	ldr	r2, [pc, #48]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8007008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800700c:	6413      	str	r3, [r2, #64]	; 0x40
 800700e:	4b0a      	ldr	r3, [pc, #40]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8007010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007016:	60fb      	str	r3, [r7, #12]
 8007018:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800701a:	4b26      	ldr	r3, [pc, #152]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a25      	ldr	r2, [pc, #148]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007024:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007026:	f7fb f8e5 	bl	80021f4 <HAL_GetTick>
 800702a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800702c:	e04d      	b.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x336>
 800702e:	bf00      	nop
 8007030:	08011a84 	.word	0x08011a84
 8007034:	42470068 	.word	0x42470068
 8007038:	40023800 	.word	0x40023800
 800703c:	00020300 	.word	0x00020300
 8007040:	00030300 	.word	0x00030300
 8007044:	00040300 	.word	0x00040300
 8007048:	00050300 	.word	0x00050300
 800704c:	00060300 	.word	0x00060300
 8007050:	00070300 	.word	0x00070300
 8007054:	00080300 	.word	0x00080300
 8007058:	00090300 	.word	0x00090300
 800705c:	000a0300 	.word	0x000a0300
 8007060:	000b0300 	.word	0x000b0300
 8007064:	000c0300 	.word	0x000c0300
 8007068:	000d0300 	.word	0x000d0300
 800706c:	000e0300 	.word	0x000e0300
 8007070:	000f0300 	.word	0x000f0300
 8007074:	00100300 	.word	0x00100300
 8007078:	00110300 	.word	0x00110300
 800707c:	00120300 	.word	0x00120300
 8007080:	00130300 	.word	0x00130300
 8007084:	00140300 	.word	0x00140300
 8007088:	00150300 	.word	0x00150300
 800708c:	00160300 	.word	0x00160300
 8007090:	00170300 	.word	0x00170300
 8007094:	00180300 	.word	0x00180300
 8007098:	00190300 	.word	0x00190300
 800709c:	001a0300 	.word	0x001a0300
 80070a0:	001b0300 	.word	0x001b0300
 80070a4:	001c0300 	.word	0x001c0300
 80070a8:	001d0300 	.word	0x001d0300
 80070ac:	001e0300 	.word	0x001e0300
 80070b0:	001f0300 	.word	0x001f0300
 80070b4:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80070b8:	f7fb f89c 	bl	80021f4 <HAL_GetTick>
 80070bc:	4602      	mov	r2, r0
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	d901      	bls.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x336>
      {
        return HAL_TIMEOUT;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e06c      	b.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x410>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80070ca:	4b38      	ldr	r3, [pc, #224]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x418>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d0f0      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x324>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80070d6:	4b36      	ldr	r3, [pc, #216]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80070d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070de:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d02f      	beq.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070ee:	693a      	ldr	r2, [r7, #16]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d028      	beq.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80070f4:	4b2e      	ldr	r3, [pc, #184]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80070f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070fc:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80070fe:	4b2d      	ldr	r3, [pc, #180]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8007100:	2201      	movs	r2, #1
 8007102:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007104:	4b2b      	ldr	r3, [pc, #172]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8007106:	2200      	movs	r2, #0
 8007108:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800710a:	4a29      	ldr	r2, [pc, #164]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007110:	4b27      	ldr	r3, [pc, #156]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007114:	f003 0301 	and.w	r3, r3, #1
 8007118:	2b01      	cmp	r3, #1
 800711a:	d114      	bne.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800711c:	f7fb f86a 	bl	80021f4 <HAL_GetTick>
 8007120:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007122:	e00a      	b.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007124:	f7fb f866 	bl	80021f4 <HAL_GetTick>
 8007128:	4602      	mov	r2, r0
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	1ad3      	subs	r3, r2, r3
 800712e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007132:	4293      	cmp	r3, r2
 8007134:	d901      	bls.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
          {
            return HAL_TIMEOUT;
 8007136:	2303      	movs	r3, #3
 8007138:	e034      	b.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x410>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800713a:	4b1d      	ldr	r3, [pc, #116]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800713c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800713e:	f003 0302 	and.w	r3, r3, #2
 8007142:	2b00      	cmp	r3, #0
 8007144:	d0ee      	beq.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x390>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	691b      	ldr	r3, [r3, #16]
 800714a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800714e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007152:	d10d      	bne.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 8007154:	4b16      	ldr	r3, [pc, #88]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007164:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007168:	4911      	ldr	r1, [pc, #68]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800716a:	4313      	orrs	r3, r2
 800716c:	608b      	str	r3, [r1, #8]
 800716e:	e005      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8007170:	4b0f      	ldr	r3, [pc, #60]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	4a0e      	ldr	r2, [pc, #56]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007176:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800717a:	6093      	str	r3, [r2, #8]
 800717c:	4b0c      	ldr	r3, [pc, #48]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800717e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	691b      	ldr	r3, [r3, #16]
 8007184:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007188:	4909      	ldr	r1, [pc, #36]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800718a:	4313      	orrs	r3, r2
 800718c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 0308 	and.w	r3, r3, #8
 8007196:	2b00      	cmp	r3, #0
 8007198:	d003      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	7d1a      	ldrb	r2, [r3, #20]
 800719e:	4b06      	ldr	r3, [pc, #24]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80071a0:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80071a2:	2300      	movs	r3, #0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3718      	adds	r7, #24
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}
 80071ac:	40007000 	.word	0x40007000
 80071b0:	40023800 	.word	0x40023800
 80071b4:	42470e40 	.word	0x42470e40
 80071b8:	424711e0 	.word	0x424711e0

080071bc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d101      	bne.n	80071ce <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	e0d6      	b.n	800737c <HAL_RTC_Init+0x1c0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	2b40      	cmp	r3, #64	; 0x40
 80071d4:	d007      	beq.n	80071e6 <HAL_RTC_Init+0x2a>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d003      	beq.n	80071e6 <HAL_RTC_Init+0x2a>
 80071de:	21ff      	movs	r1, #255	; 0xff
 80071e0:	4868      	ldr	r0, [pc, #416]	; (8007384 <HAL_RTC_Init+0x1c8>)
 80071e2:	f7fa fbcf 	bl	8001984 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	2b7f      	cmp	r3, #127	; 0x7f
 80071ec:	d904      	bls.n	80071f8 <HAL_RTC_Init+0x3c>
 80071ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80071f2:	4864      	ldr	r0, [pc, #400]	; (8007384 <HAL_RTC_Init+0x1c8>)
 80071f4:	f7fa fbc6 	bl	8001984 <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007200:	d304      	bcc.n	800720c <HAL_RTC_Init+0x50>
 8007202:	f240 1101 	movw	r1, #257	; 0x101
 8007206:	485f      	ldr	r0, [pc, #380]	; (8007384 <HAL_RTC_Init+0x1c8>)
 8007208:	f7fa fbbc 	bl	8001984 <assert_failed>
  assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d013      	beq.n	800723c <HAL_RTC_Init+0x80>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800721c:	d00e      	beq.n	800723c <HAL_RTC_Init+0x80>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007226:	d009      	beq.n	800723c <HAL_RTC_Init+0x80>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	691b      	ldr	r3, [r3, #16]
 800722c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007230:	d004      	beq.n	800723c <HAL_RTC_Init+0x80>
 8007232:	f44f 7181 	mov.w	r1, #258	; 0x102
 8007236:	4853      	ldr	r0, [pc, #332]	; (8007384 <HAL_RTC_Init+0x1c8>)
 8007238:	f7fa fba4 	bl	8001984 <assert_failed>
  assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	695b      	ldr	r3, [r3, #20]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d009      	beq.n	8007258 <HAL_RTC_Init+0x9c>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	695b      	ldr	r3, [r3, #20]
 8007248:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800724c:	d004      	beq.n	8007258 <HAL_RTC_Init+0x9c>
 800724e:	f240 1103 	movw	r1, #259	; 0x103
 8007252:	484c      	ldr	r0, [pc, #304]	; (8007384 <HAL_RTC_Init+0x1c8>)
 8007254:	f7fa fb96 	bl	8001984 <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	699b      	ldr	r3, [r3, #24]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d009      	beq.n	8007274 <HAL_RTC_Init+0xb8>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	699b      	ldr	r3, [r3, #24]
 8007264:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007268:	d004      	beq.n	8007274 <HAL_RTC_Init+0xb8>
 800726a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800726e:	4845      	ldr	r0, [pc, #276]	; (8007384 <HAL_RTC_Init+0x1c8>)
 8007270:	f7fa fb88 	bl	8001984 <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	7f5b      	ldrb	r3, [r3, #29]
 8007278:	b2db      	uxtb	r3, r3
 800727a:	2b00      	cmp	r3, #0
 800727c:	d105      	bne.n	800728a <HAL_RTC_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f7fa fbe3 	bl	8001a50 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2202      	movs	r2, #2
 800728e:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	22ca      	movs	r2, #202	; 0xca
 8007296:	625a      	str	r2, [r3, #36]	; 0x24
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2253      	movs	r2, #83	; 0x53
 800729e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 fb35 	bl	8007910 <RTC_EnterInitMode>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d008      	beq.n	80072be <HAL_RTC_Init+0x102>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	22ff      	movs	r2, #255	; 0xff
 80072b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2204      	movs	r2, #4
 80072b8:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e05e      	b.n	800737c <HAL_RTC_Init+0x1c0>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	6812      	ldr	r2, [r2, #0]
 80072c8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80072cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072d0:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	6899      	ldr	r1, [r3, #8]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	685a      	ldr	r2, [r3, #4]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	691b      	ldr	r3, [r3, #16]
 80072e0:	431a      	orrs	r2, r3
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	695b      	ldr	r3, [r3, #20]
 80072e6:	431a      	orrs	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	430a      	orrs	r2, r1
 80072ee:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	68d2      	ldr	r2, [r2, #12]
 80072f8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	6919      	ldr	r1, [r3, #16]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	041a      	lsls	r2, r3, #16
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	430a      	orrs	r2, r1
 800730c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	68da      	ldr	r2, [r3, #12]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800731c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	f003 0320 	and.w	r3, r3, #32
 8007328:	2b00      	cmp	r3, #0
 800732a:	d10e      	bne.n	800734a <HAL_RTC_Init+0x18e>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 fac7 	bl	80078c0 <HAL_RTC_WaitForSynchro>
 8007332:	4603      	mov	r3, r0
 8007334:	2b00      	cmp	r3, #0
 8007336:	d008      	beq.n	800734a <HAL_RTC_Init+0x18e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	22ff      	movs	r2, #255	; 0xff
 800733e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2204      	movs	r2, #4
 8007344:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e018      	b.n	800737c <HAL_RTC_Init+0x1c0>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007358:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	699a      	ldr	r2, [r3, #24]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	430a      	orrs	r2, r1
 800736a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	22ff      	movs	r2, #255	; 0xff
 8007372:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800737a:	2300      	movs	r3, #0
  }
}
 800737c:	4618      	mov	r0, r3
 800737e:	3708      	adds	r7, #8
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}
 8007384:	08011ac0 	.word	0x08011ac0

08007388 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007388:	b590      	push	{r4, r7, lr}
 800738a:	b087      	sub	sp, #28
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007394:	2300      	movs	r3, #0
 8007396:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d007      	beq.n	80073ae <HAL_RTC_SetTime+0x26>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d004      	beq.n	80073ae <HAL_RTC_SetTime+0x26>
 80073a4:	f240 21da 	movw	r1, #730	; 0x2da
 80073a8:	48a4      	ldr	r0, [pc, #656]	; (800763c <HAL_RTC_SetTime+0x2b4>)
 80073aa:	f7fa faeb 	bl	8001984 <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073b6:	d00d      	beq.n	80073d4 <HAL_RTC_SetTime+0x4c>
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	68db      	ldr	r3, [r3, #12]
 80073bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073c0:	d008      	beq.n	80073d4 <HAL_RTC_SetTime+0x4c>
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d004      	beq.n	80073d4 <HAL_RTC_SetTime+0x4c>
 80073ca:	f240 21db 	movw	r1, #731	; 0x2db
 80073ce:	489b      	ldr	r0, [pc, #620]	; (800763c <HAL_RTC_SetTime+0x2b4>)
 80073d0:	f7fa fad8 	bl	8001984 <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	691b      	ldr	r3, [r3, #16]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d009      	beq.n	80073f0 <HAL_RTC_SetTime+0x68>
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	691b      	ldr	r3, [r3, #16]
 80073e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80073e4:	d004      	beq.n	80073f0 <HAL_RTC_SetTime+0x68>
 80073e6:	f44f 7137 	mov.w	r1, #732	; 0x2dc
 80073ea:	4894      	ldr	r0, [pc, #592]	; (800763c <HAL_RTC_SetTime+0x2b4>)
 80073ec:	f7fa faca 	bl	8001984 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	7f1b      	ldrb	r3, [r3, #28]
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d101      	bne.n	80073fc <HAL_RTC_SetTime+0x74>
 80073f8:	2302      	movs	r3, #2
 80073fa:	e12c      	b.n	8007656 <HAL_RTC_SetTime+0x2ce>
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2201      	movs	r2, #1
 8007400:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2202      	movs	r2, #2
 8007406:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d15c      	bne.n	80074c8 <HAL_RTC_SetTime+0x140>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007418:	2b00      	cmp	r3, #0
 800741a:	d01a      	beq.n	8007452 <HAL_RTC_SetTime+0xca>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d003      	beq.n	800742c <HAL_RTC_SetTime+0xa4>
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	2b0c      	cmp	r3, #12
 800742a:	d904      	bls.n	8007436 <HAL_RTC_SetTime+0xae>
 800742c:	f240 21e7 	movw	r1, #743	; 0x2e7
 8007430:	4882      	ldr	r0, [pc, #520]	; (800763c <HAL_RTC_SetTime+0x2b4>)
 8007432:	f7fa faa7 	bl	8001984 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	78db      	ldrb	r3, [r3, #3]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d015      	beq.n	800746a <HAL_RTC_SetTime+0xe2>
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	78db      	ldrb	r3, [r3, #3]
 8007442:	2b40      	cmp	r3, #64	; 0x40
 8007444:	d011      	beq.n	800746a <HAL_RTC_SetTime+0xe2>
 8007446:	f44f 713a 	mov.w	r1, #744	; 0x2e8
 800744a:	487c      	ldr	r0, [pc, #496]	; (800763c <HAL_RTC_SetTime+0x2b4>)
 800744c:	f7fa fa9a 	bl	8001984 <assert_failed>
 8007450:	e00b      	b.n	800746a <HAL_RTC_SetTime+0xe2>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	2200      	movs	r2, #0
 8007456:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	2b17      	cmp	r3, #23
 800745e:	d904      	bls.n	800746a <HAL_RTC_SetTime+0xe2>
 8007460:	f240 21ed 	movw	r1, #749	; 0x2ed
 8007464:	4875      	ldr	r0, [pc, #468]	; (800763c <HAL_RTC_SetTime+0x2b4>)
 8007466:	f7fa fa8d 	bl	8001984 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	785b      	ldrb	r3, [r3, #1]
 800746e:	2b3b      	cmp	r3, #59	; 0x3b
 8007470:	d904      	bls.n	800747c <HAL_RTC_SetTime+0xf4>
 8007472:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007476:	4871      	ldr	r0, [pc, #452]	; (800763c <HAL_RTC_SetTime+0x2b4>)
 8007478:	f7fa fa84 	bl	8001984 <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	789b      	ldrb	r3, [r3, #2]
 8007480:	2b3b      	cmp	r3, #59	; 0x3b
 8007482:	d904      	bls.n	800748e <HAL_RTC_SetTime+0x106>
 8007484:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 8007488:	486c      	ldr	r0, [pc, #432]	; (800763c <HAL_RTC_SetTime+0x2b4>)
 800748a:	f7fa fa7b 	bl	8001984 <assert_failed>

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	4618      	mov	r0, r3
 8007494:	f000 fa68 	bl	8007968 <RTC_ByteToBcd2>
 8007498:	4603      	mov	r3, r0
 800749a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	785b      	ldrb	r3, [r3, #1]
 80074a0:	4618      	mov	r0, r3
 80074a2:	f000 fa61 	bl	8007968 <RTC_ByteToBcd2>
 80074a6:	4603      	mov	r3, r0
 80074a8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80074aa:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	789b      	ldrb	r3, [r3, #2]
 80074b0:	4618      	mov	r0, r3
 80074b2:	f000 fa59 	bl	8007968 <RTC_ByteToBcd2>
 80074b6:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80074b8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	78db      	ldrb	r3, [r3, #3]
 80074c0:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80074c2:	4313      	orrs	r3, r2
 80074c4:	617b      	str	r3, [r7, #20]
 80074c6:	e062      	b.n	800758e <HAL_RTC_SetTime+0x206>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d022      	beq.n	800751c <HAL_RTC_SetTime+0x194>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	4618      	mov	r0, r3
 80074dc:	f000 fa62 	bl	80079a4 <RTC_Bcd2ToByte>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d007      	beq.n	80074f6 <HAL_RTC_SetTime+0x16e>
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	4618      	mov	r0, r3
 80074ec:	f000 fa5a 	bl	80079a4 <RTC_Bcd2ToByte>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b0c      	cmp	r3, #12
 80074f4:	d904      	bls.n	8007500 <HAL_RTC_SetTime+0x178>
 80074f6:	f240 21fb 	movw	r1, #763	; 0x2fb
 80074fa:	4850      	ldr	r0, [pc, #320]	; (800763c <HAL_RTC_SetTime+0x2b4>)
 80074fc:	f7fa fa42 	bl	8001984 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	78db      	ldrb	r3, [r3, #3]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d019      	beq.n	800753c <HAL_RTC_SetTime+0x1b4>
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	78db      	ldrb	r3, [r3, #3]
 800750c:	2b40      	cmp	r3, #64	; 0x40
 800750e:	d015      	beq.n	800753c <HAL_RTC_SetTime+0x1b4>
 8007510:	f44f 713f 	mov.w	r1, #764	; 0x2fc
 8007514:	4849      	ldr	r0, [pc, #292]	; (800763c <HAL_RTC_SetTime+0x2b4>)
 8007516:	f7fa fa35 	bl	8001984 <assert_failed>
 800751a:	e00f      	b.n	800753c <HAL_RTC_SetTime+0x1b4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	2200      	movs	r2, #0
 8007520:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	4618      	mov	r0, r3
 8007528:	f000 fa3c 	bl	80079a4 <RTC_Bcd2ToByte>
 800752c:	4603      	mov	r3, r0
 800752e:	2b17      	cmp	r3, #23
 8007530:	d904      	bls.n	800753c <HAL_RTC_SetTime+0x1b4>
 8007532:	f240 3101 	movw	r1, #769	; 0x301
 8007536:	4841      	ldr	r0, [pc, #260]	; (800763c <HAL_RTC_SetTime+0x2b4>)
 8007538:	f7fa fa24 	bl	8001984 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	785b      	ldrb	r3, [r3, #1]
 8007540:	4618      	mov	r0, r3
 8007542:	f000 fa2f 	bl	80079a4 <RTC_Bcd2ToByte>
 8007546:	4603      	mov	r3, r0
 8007548:	2b3b      	cmp	r3, #59	; 0x3b
 800754a:	d904      	bls.n	8007556 <HAL_RTC_SetTime+0x1ce>
 800754c:	f240 3103 	movw	r1, #771	; 0x303
 8007550:	483a      	ldr	r0, [pc, #232]	; (800763c <HAL_RTC_SetTime+0x2b4>)
 8007552:	f7fa fa17 	bl	8001984 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	789b      	ldrb	r3, [r3, #2]
 800755a:	4618      	mov	r0, r3
 800755c:	f000 fa22 	bl	80079a4 <RTC_Bcd2ToByte>
 8007560:	4603      	mov	r3, r0
 8007562:	2b3b      	cmp	r3, #59	; 0x3b
 8007564:	d904      	bls.n	8007570 <HAL_RTC_SetTime+0x1e8>
 8007566:	f44f 7141 	mov.w	r1, #772	; 0x304
 800756a:	4834      	ldr	r0, [pc, #208]	; (800763c <HAL_RTC_SetTime+0x2b4>)
 800756c:	f7fa fa0a 	bl	8001984 <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	785b      	ldrb	r3, [r3, #1]
 800757a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800757c:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800757e:	68ba      	ldr	r2, [r7, #8]
 8007580:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007582:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	78db      	ldrb	r3, [r3, #3]
 8007588:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800758a:	4313      	orrs	r3, r2
 800758c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	22ca      	movs	r2, #202	; 0xca
 8007594:	625a      	str	r2, [r3, #36]	; 0x24
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2253      	movs	r2, #83	; 0x53
 800759c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	f000 f9b6 	bl	8007910 <RTC_EnterInitMode>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d00b      	beq.n	80075c2 <HAL_RTC_SetTime+0x23a>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	22ff      	movs	r2, #255	; 0xff
 80075b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2204      	movs	r2, #4
 80075b6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2200      	movs	r2, #0
 80075bc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	e049      	b.n	8007656 <HAL_RTC_SetTime+0x2ce>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80075cc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80075d0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	689a      	ldr	r2, [r3, #8]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80075e0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	6899      	ldr	r1, [r3, #8]
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	68da      	ldr	r2, [r3, #12]
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	431a      	orrs	r2, r3
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	430a      	orrs	r2, r1
 80075f8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	68da      	ldr	r2, [r3, #12]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007608:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	f003 0320 	and.w	r3, r3, #32
 8007614:	2b00      	cmp	r3, #0
 8007616:	d113      	bne.n	8007640 <HAL_RTC_SetTime+0x2b8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007618:	68f8      	ldr	r0, [r7, #12]
 800761a:	f000 f951 	bl	80078c0 <HAL_RTC_WaitForSynchro>
 800761e:	4603      	mov	r3, r0
 8007620:	2b00      	cmp	r3, #0
 8007622:	d00d      	beq.n	8007640 <HAL_RTC_SetTime+0x2b8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	22ff      	movs	r2, #255	; 0xff
 800762a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2204      	movs	r2, #4
 8007630:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2200      	movs	r2, #0
 8007636:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007638:	2301      	movs	r3, #1
 800763a:	e00c      	b.n	8007656 <HAL_RTC_SetTime+0x2ce>
 800763c:	08011ac0 	.word	0x08011ac0
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	22ff      	movs	r2, #255	; 0xff
 8007646:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2201      	movs	r2, #1
 800764c:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2200      	movs	r2, #0
 8007652:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8007654:	2300      	movs	r3, #0
  }
}
 8007656:	4618      	mov	r0, r3
 8007658:	371c      	adds	r7, #28
 800765a:	46bd      	mov	sp, r7
 800765c:	bd90      	pop	{r4, r7, pc}
 800765e:	bf00      	nop

08007660 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007660:	b590      	push	{r4, r7, lr}
 8007662:	b087      	sub	sp, #28
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800766c:	2300      	movs	r3, #0
 800766e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d007      	beq.n	8007686 <HAL_RTC_SetDate+0x26>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d004      	beq.n	8007686 <HAL_RTC_SetDate+0x26>
 800767c:	f240 318a 	movw	r1, #906	; 0x38a
 8007680:	488e      	ldr	r0, [pc, #568]	; (80078bc <HAL_RTC_SetDate+0x25c>)
 8007682:	f7fa f97f 	bl	8001984 <assert_failed>

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	7f1b      	ldrb	r3, [r3, #28]
 800768a:	2b01      	cmp	r3, #1
 800768c:	d101      	bne.n	8007692 <HAL_RTC_SetDate+0x32>
 800768e:	2302      	movs	r3, #2
 8007690:	e10f      	b.n	80078b2 <HAL_RTC_SetDate+0x252>
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2201      	movs	r2, #1
 8007696:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2202      	movs	r2, #2
 800769c:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d10e      	bne.n	80076c2 <HAL_RTC_SetDate+0x62>
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	785b      	ldrb	r3, [r3, #1]
 80076a8:	f003 0310 	and.w	r3, r3, #16
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d008      	beq.n	80076c2 <HAL_RTC_SetDate+0x62>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	785b      	ldrb	r3, [r3, #1]
 80076b4:	f023 0310 	bic.w	r3, r3, #16
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	330a      	adds	r3, #10
 80076bc:	b2da      	uxtb	r2, r3
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d01c      	beq.n	8007704 <HAL_RTC_SetDate+0xa4>
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	2b02      	cmp	r3, #2
 80076d0:	d018      	beq.n	8007704 <HAL_RTC_SetDate+0xa4>
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	2b03      	cmp	r3, #3
 80076d8:	d014      	beq.n	8007704 <HAL_RTC_SetDate+0xa4>
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	2b04      	cmp	r3, #4
 80076e0:	d010      	beq.n	8007704 <HAL_RTC_SetDate+0xa4>
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	2b05      	cmp	r3, #5
 80076e8:	d00c      	beq.n	8007704 <HAL_RTC_SetDate+0xa4>
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	2b06      	cmp	r3, #6
 80076f0:	d008      	beq.n	8007704 <HAL_RTC_SetDate+0xa4>
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	2b07      	cmp	r3, #7
 80076f8:	d004      	beq.n	8007704 <HAL_RTC_SetDate+0xa4>
 80076fa:	f240 3196 	movw	r1, #918	; 0x396
 80076fe:	486f      	ldr	r0, [pc, #444]	; (80078bc <HAL_RTC_SetDate+0x25c>)
 8007700:	f7fa f940 	bl	8001984 <assert_failed>

  if(Format == RTC_FORMAT_BIN)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d13f      	bne.n	800778a <HAL_RTC_SetDate+0x12a>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	78db      	ldrb	r3, [r3, #3]
 800770e:	2b63      	cmp	r3, #99	; 0x63
 8007710:	d904      	bls.n	800771c <HAL_RTC_SetDate+0xbc>
 8007712:	f240 319a 	movw	r1, #922	; 0x39a
 8007716:	4869      	ldr	r0, [pc, #420]	; (80078bc <HAL_RTC_SetDate+0x25c>)
 8007718:	f7fa f934 	bl	8001984 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	785b      	ldrb	r3, [r3, #1]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d003      	beq.n	800772c <HAL_RTC_SetDate+0xcc>
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	785b      	ldrb	r3, [r3, #1]
 8007728:	2b0c      	cmp	r3, #12
 800772a:	d904      	bls.n	8007736 <HAL_RTC_SetDate+0xd6>
 800772c:	f240 319b 	movw	r1, #923	; 0x39b
 8007730:	4862      	ldr	r0, [pc, #392]	; (80078bc <HAL_RTC_SetDate+0x25c>)
 8007732:	f7fa f927 	bl	8001984 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	789b      	ldrb	r3, [r3, #2]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d003      	beq.n	8007746 <HAL_RTC_SetDate+0xe6>
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	789b      	ldrb	r3, [r3, #2]
 8007742:	2b1f      	cmp	r3, #31
 8007744:	d904      	bls.n	8007750 <HAL_RTC_SetDate+0xf0>
 8007746:	f44f 7167 	mov.w	r1, #924	; 0x39c
 800774a:	485c      	ldr	r0, [pc, #368]	; (80078bc <HAL_RTC_SetDate+0x25c>)
 800774c:	f7fa f91a 	bl	8001984 <assert_failed>

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	78db      	ldrb	r3, [r3, #3]
 8007754:	4618      	mov	r0, r3
 8007756:	f000 f907 	bl	8007968 <RTC_ByteToBcd2>
 800775a:	4603      	mov	r3, r0
 800775c:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	785b      	ldrb	r3, [r3, #1]
 8007762:	4618      	mov	r0, r3
 8007764:	f000 f900 	bl	8007968 <RTC_ByteToBcd2>
 8007768:	4603      	mov	r3, r0
 800776a:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800776c:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	789b      	ldrb	r3, [r3, #2]
 8007772:	4618      	mov	r0, r3
 8007774:	f000 f8f8 	bl	8007968 <RTC_ByteToBcd2>
 8007778:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800777a:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007784:	4313      	orrs	r3, r2
 8007786:	617b      	str	r3, [r7, #20]
 8007788:	e045      	b.n	8007816 <HAL_RTC_SetDate+0x1b6>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	78db      	ldrb	r3, [r3, #3]
 800778e:	4618      	mov	r0, r3
 8007790:	f000 f908 	bl	80079a4 <RTC_Bcd2ToByte>
 8007794:	4603      	mov	r3, r0
 8007796:	2b63      	cmp	r3, #99	; 0x63
 8007798:	d904      	bls.n	80077a4 <HAL_RTC_SetDate+0x144>
 800779a:	f240 31a5 	movw	r1, #933	; 0x3a5
 800779e:	4847      	ldr	r0, [pc, #284]	; (80078bc <HAL_RTC_SetDate+0x25c>)
 80077a0:	f7fa f8f0 	bl	8001984 <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	785b      	ldrb	r3, [r3, #1]
 80077a8:	4618      	mov	r0, r3
 80077aa:	f000 f8fb 	bl	80079a4 <RTC_Bcd2ToByte>
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d007      	beq.n	80077c4 <HAL_RTC_SetDate+0x164>
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	785b      	ldrb	r3, [r3, #1]
 80077b8:	4618      	mov	r0, r3
 80077ba:	f000 f8f3 	bl	80079a4 <RTC_Bcd2ToByte>
 80077be:	4603      	mov	r3, r0
 80077c0:	2b0c      	cmp	r3, #12
 80077c2:	d904      	bls.n	80077ce <HAL_RTC_SetDate+0x16e>
 80077c4:	f240 31a6 	movw	r1, #934	; 0x3a6
 80077c8:	483c      	ldr	r0, [pc, #240]	; (80078bc <HAL_RTC_SetDate+0x25c>)
 80077ca:	f7fa f8db 	bl	8001984 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	789b      	ldrb	r3, [r3, #2]
 80077d2:	4618      	mov	r0, r3
 80077d4:	f000 f8e6 	bl	80079a4 <RTC_Bcd2ToByte>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d007      	beq.n	80077ee <HAL_RTC_SetDate+0x18e>
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	789b      	ldrb	r3, [r3, #2]
 80077e2:	4618      	mov	r0, r3
 80077e4:	f000 f8de 	bl	80079a4 <RTC_Bcd2ToByte>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b1f      	cmp	r3, #31
 80077ec:	d904      	bls.n	80077f8 <HAL_RTC_SetDate+0x198>
 80077ee:	f240 31a7 	movw	r1, #935	; 0x3a7
 80077f2:	4832      	ldr	r0, [pc, #200]	; (80078bc <HAL_RTC_SetDate+0x25c>)
 80077f4:	f7fa f8c6 	bl	8001984 <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	78db      	ldrb	r3, [r3, #3]
 80077fc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	785b      	ldrb	r3, [r3, #1]
 8007802:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007804:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007806:	68ba      	ldr	r2, [r7, #8]
 8007808:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800780a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007812:	4313      	orrs	r3, r2
 8007814:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	22ca      	movs	r2, #202	; 0xca
 800781c:	625a      	str	r2, [r3, #36]	; 0x24
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2253      	movs	r2, #83	; 0x53
 8007824:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f000 f872 	bl	8007910 <RTC_EnterInitMode>
 800782c:	4603      	mov	r3, r0
 800782e:	2b00      	cmp	r3, #0
 8007830:	d00b      	beq.n	800784a <HAL_RTC_SetDate+0x1ea>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	22ff      	movs	r2, #255	; 0xff
 8007838:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2204      	movs	r2, #4
 800783e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2200      	movs	r2, #0
 8007844:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e033      	b.n	80078b2 <HAL_RTC_SetDate+0x252>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007854:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007858:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	68da      	ldr	r2, [r3, #12]
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007868:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	f003 0320 	and.w	r3, r3, #32
 8007874:	2b00      	cmp	r3, #0
 8007876:	d111      	bne.n	800789c <HAL_RTC_SetDate+0x23c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007878:	68f8      	ldr	r0, [r7, #12]
 800787a:	f000 f821 	bl	80078c0 <HAL_RTC_WaitForSynchro>
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d00b      	beq.n	800789c <HAL_RTC_SetDate+0x23c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	22ff      	movs	r2, #255	; 0xff
 800788a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2204      	movs	r2, #4
 8007890:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	e00a      	b.n	80078b2 <HAL_RTC_SetDate+0x252>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	22ff      	movs	r2, #255	; 0xff
 80078a2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2201      	movs	r2, #1
 80078a8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2200      	movs	r2, #0
 80078ae:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80078b0:	2300      	movs	r3, #0
  }
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	371c      	adds	r7, #28
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd90      	pop	{r4, r7, pc}
 80078ba:	bf00      	nop
 80078bc:	08011ac0 	.word	0x08011ac0

080078c0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80078c8:	2300      	movs	r3, #0
 80078ca:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	68da      	ldr	r2, [r3, #12]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80078da:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80078dc:	f7fa fc8a 	bl	80021f4 <HAL_GetTick>
 80078e0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80078e2:	e009      	b.n	80078f8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80078e4:	f7fa fc86 	bl	80021f4 <HAL_GetTick>
 80078e8:	4602      	mov	r2, r0
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	1ad3      	subs	r3, r2, r3
 80078ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80078f2:	d901      	bls.n	80078f8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80078f4:	2303      	movs	r3, #3
 80078f6:	e007      	b.n	8007908 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	f003 0320 	and.w	r3, r3, #32
 8007902:	2b00      	cmp	r3, #0
 8007904:	d0ee      	beq.n	80078e4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007906:	2300      	movs	r3, #0
}
 8007908:	4618      	mov	r0, r3
 800790a:	3710      	adds	r7, #16
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007918:	2300      	movs	r3, #0
 800791a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007926:	2b00      	cmp	r3, #0
 8007928:	d119      	bne.n	800795e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f04f 32ff 	mov.w	r2, #4294967295
 8007932:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007934:	f7fa fc5e 	bl	80021f4 <HAL_GetTick>
 8007938:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800793a:	e009      	b.n	8007950 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800793c:	f7fa fc5a 	bl	80021f4 <HAL_GetTick>
 8007940:	4602      	mov	r2, r0
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	1ad3      	subs	r3, r2, r3
 8007946:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800794a:	d901      	bls.n	8007950 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800794c:	2303      	movs	r3, #3
 800794e:	e007      	b.n	8007960 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	68db      	ldr	r3, [r3, #12]
 8007956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800795a:	2b00      	cmp	r3, #0
 800795c:	d0ee      	beq.n	800793c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800795e:	2300      	movs	r3, #0
}
 8007960:	4618      	mov	r0, r3
 8007962:	3710      	adds	r7, #16
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007968:	b480      	push	{r7}
 800796a:	b085      	sub	sp, #20
 800796c:	af00      	add	r7, sp, #0
 800796e:	4603      	mov	r3, r0
 8007970:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007972:	2300      	movs	r3, #0
 8007974:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8007976:	e005      	b.n	8007984 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	3301      	adds	r3, #1
 800797c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800797e:	79fb      	ldrb	r3, [r7, #7]
 8007980:	3b0a      	subs	r3, #10
 8007982:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8007984:	79fb      	ldrb	r3, [r7, #7]
 8007986:	2b09      	cmp	r3, #9
 8007988:	d8f6      	bhi.n	8007978 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	b2db      	uxtb	r3, r3
 800798e:	011b      	lsls	r3, r3, #4
 8007990:	b2da      	uxtb	r2, r3
 8007992:	79fb      	ldrb	r3, [r7, #7]
 8007994:	4313      	orrs	r3, r2
 8007996:	b2db      	uxtb	r3, r3
}
 8007998:	4618      	mov	r0, r3
 800799a:	3714      	adds	r7, #20
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b085      	sub	sp, #20
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	4603      	mov	r3, r0
 80079ac:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80079ae:	2300      	movs	r3, #0
 80079b0:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80079b2:	79fb      	ldrb	r3, [r7, #7]
 80079b4:	091b      	lsrs	r3, r3, #4
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	461a      	mov	r2, r3
 80079ba:	4613      	mov	r3, r2
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	4413      	add	r3, r2
 80079c0:	005b      	lsls	r3, r3, #1
 80079c2:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80079c4:	79fb      	ldrb	r3, [r7, #7]
 80079c6:	f003 030f 	and.w	r3, r3, #15
 80079ca:	b2da      	uxtb	r2, r3
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	4413      	add	r3, r2
 80079d2:	b2db      	uxtb	r3, r3
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3714      	adds	r7, #20
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 80079ea:	2300      	movs	r3, #0
 80079ec:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d03d      	beq.n	8007a70 <HAL_RTCEx_BKUPRead+0x90>
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d03a      	beq.n	8007a70 <HAL_RTCEx_BKUPRead+0x90>
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	2b02      	cmp	r3, #2
 80079fe:	d037      	beq.n	8007a70 <HAL_RTCEx_BKUPRead+0x90>
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	2b03      	cmp	r3, #3
 8007a04:	d034      	beq.n	8007a70 <HAL_RTCEx_BKUPRead+0x90>
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	2b04      	cmp	r3, #4
 8007a0a:	d031      	beq.n	8007a70 <HAL_RTCEx_BKUPRead+0x90>
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	2b05      	cmp	r3, #5
 8007a10:	d02e      	beq.n	8007a70 <HAL_RTCEx_BKUPRead+0x90>
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	2b06      	cmp	r3, #6
 8007a16:	d02b      	beq.n	8007a70 <HAL_RTCEx_BKUPRead+0x90>
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	2b07      	cmp	r3, #7
 8007a1c:	d028      	beq.n	8007a70 <HAL_RTCEx_BKUPRead+0x90>
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	2b08      	cmp	r3, #8
 8007a22:	d025      	beq.n	8007a70 <HAL_RTCEx_BKUPRead+0x90>
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	2b09      	cmp	r3, #9
 8007a28:	d022      	beq.n	8007a70 <HAL_RTCEx_BKUPRead+0x90>
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	2b0a      	cmp	r3, #10
 8007a2e:	d01f      	beq.n	8007a70 <HAL_RTCEx_BKUPRead+0x90>
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	2b0b      	cmp	r3, #11
 8007a34:	d01c      	beq.n	8007a70 <HAL_RTCEx_BKUPRead+0x90>
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	2b0c      	cmp	r3, #12
 8007a3a:	d019      	beq.n	8007a70 <HAL_RTCEx_BKUPRead+0x90>
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	2b0d      	cmp	r3, #13
 8007a40:	d016      	beq.n	8007a70 <HAL_RTCEx_BKUPRead+0x90>
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	2b0e      	cmp	r3, #14
 8007a46:	d013      	beq.n	8007a70 <HAL_RTCEx_BKUPRead+0x90>
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	2b0f      	cmp	r3, #15
 8007a4c:	d010      	beq.n	8007a70 <HAL_RTCEx_BKUPRead+0x90>
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	2b10      	cmp	r3, #16
 8007a52:	d00d      	beq.n	8007a70 <HAL_RTCEx_BKUPRead+0x90>
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	2b11      	cmp	r3, #17
 8007a58:	d00a      	beq.n	8007a70 <HAL_RTCEx_BKUPRead+0x90>
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	2b12      	cmp	r3, #18
 8007a5e:	d007      	beq.n	8007a70 <HAL_RTCEx_BKUPRead+0x90>
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	2b13      	cmp	r3, #19
 8007a64:	d004      	beq.n	8007a70 <HAL_RTCEx_BKUPRead+0x90>
 8007a66:	f240 4183 	movw	r1, #1155	; 0x483
 8007a6a:	4809      	ldr	r0, [pc, #36]	; (8007a90 <HAL_RTCEx_BKUPRead+0xb0>)
 8007a6c:	f7f9 ff8a 	bl	8001984 <assert_failed>

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	3350      	adds	r3, #80	; 0x50
 8007a76:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	68fa      	ldr	r2, [r7, #12]
 8007a7e:	4413      	add	r3, r2
 8007a80:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3710      	adds	r7, #16
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	08011af8 	.word	0x08011af8

08007a94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b082      	sub	sp, #8
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d101      	bne.n	8007aa6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e113      	b.n	8007cce <HAL_SPI_Init+0x23a>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a8b      	ldr	r2, [pc, #556]	; (8007cd8 <HAL_SPI_Init+0x244>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d018      	beq.n	8007ae2 <HAL_SPI_Init+0x4e>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a89      	ldr	r2, [pc, #548]	; (8007cdc <HAL_SPI_Init+0x248>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d013      	beq.n	8007ae2 <HAL_SPI_Init+0x4e>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a88      	ldr	r2, [pc, #544]	; (8007ce0 <HAL_SPI_Init+0x24c>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d00e      	beq.n	8007ae2 <HAL_SPI_Init+0x4e>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a86      	ldr	r2, [pc, #536]	; (8007ce4 <HAL_SPI_Init+0x250>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d009      	beq.n	8007ae2 <HAL_SPI_Init+0x4e>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a85      	ldr	r2, [pc, #532]	; (8007ce8 <HAL_SPI_Init+0x254>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d004      	beq.n	8007ae2 <HAL_SPI_Init+0x4e>
 8007ad8:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8007adc:	4883      	ldr	r0, [pc, #524]	; (8007cec <HAL_SPI_Init+0x258>)
 8007ade:	f7f9 ff51 	bl	8001984 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d009      	beq.n	8007afe <HAL_SPI_Init+0x6a>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007af2:	d004      	beq.n	8007afe <HAL_SPI_Init+0x6a>
 8007af4:	f240 1143 	movw	r1, #323	; 0x143
 8007af8:	487c      	ldr	r0, [pc, #496]	; (8007cec <HAL_SPI_Init+0x258>)
 8007afa:	f7f9 ff43 	bl	8001984 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d00e      	beq.n	8007b24 <HAL_SPI_Init+0x90>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b0e:	d009      	beq.n	8007b24 <HAL_SPI_Init+0x90>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b18:	d004      	beq.n	8007b24 <HAL_SPI_Init+0x90>
 8007b1a:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8007b1e:	4873      	ldr	r0, [pc, #460]	; (8007cec <HAL_SPI_Init+0x258>)
 8007b20:	f7f9 ff30 	bl	8001984 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b2c:	d008      	beq.n	8007b40 <HAL_SPI_Init+0xac>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d004      	beq.n	8007b40 <HAL_SPI_Init+0xac>
 8007b36:	f240 1145 	movw	r1, #325	; 0x145
 8007b3a:	486c      	ldr	r0, [pc, #432]	; (8007cec <HAL_SPI_Init+0x258>)
 8007b3c:	f7f9 ff22 	bl	8001984 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	699b      	ldr	r3, [r3, #24]
 8007b44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b48:	d00d      	beq.n	8007b66 <HAL_SPI_Init+0xd2>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	699b      	ldr	r3, [r3, #24]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d009      	beq.n	8007b66 <HAL_SPI_Init+0xd2>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	699b      	ldr	r3, [r3, #24]
 8007b56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007b5a:	d004      	beq.n	8007b66 <HAL_SPI_Init+0xd2>
 8007b5c:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8007b60:	4862      	ldr	r0, [pc, #392]	; (8007cec <HAL_SPI_Init+0x258>)
 8007b62:	f7f9 ff0f 	bl	8001984 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	69db      	ldr	r3, [r3, #28]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d020      	beq.n	8007bb0 <HAL_SPI_Init+0x11c>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	69db      	ldr	r3, [r3, #28]
 8007b72:	2b08      	cmp	r3, #8
 8007b74:	d01c      	beq.n	8007bb0 <HAL_SPI_Init+0x11c>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	69db      	ldr	r3, [r3, #28]
 8007b7a:	2b10      	cmp	r3, #16
 8007b7c:	d018      	beq.n	8007bb0 <HAL_SPI_Init+0x11c>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	69db      	ldr	r3, [r3, #28]
 8007b82:	2b18      	cmp	r3, #24
 8007b84:	d014      	beq.n	8007bb0 <HAL_SPI_Init+0x11c>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	69db      	ldr	r3, [r3, #28]
 8007b8a:	2b20      	cmp	r3, #32
 8007b8c:	d010      	beq.n	8007bb0 <HAL_SPI_Init+0x11c>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	69db      	ldr	r3, [r3, #28]
 8007b92:	2b28      	cmp	r3, #40	; 0x28
 8007b94:	d00c      	beq.n	8007bb0 <HAL_SPI_Init+0x11c>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	69db      	ldr	r3, [r3, #28]
 8007b9a:	2b30      	cmp	r3, #48	; 0x30
 8007b9c:	d008      	beq.n	8007bb0 <HAL_SPI_Init+0x11c>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	69db      	ldr	r3, [r3, #28]
 8007ba2:	2b38      	cmp	r3, #56	; 0x38
 8007ba4:	d004      	beq.n	8007bb0 <HAL_SPI_Init+0x11c>
 8007ba6:	f240 1147 	movw	r1, #327	; 0x147
 8007baa:	4850      	ldr	r0, [pc, #320]	; (8007cec <HAL_SPI_Init+0x258>)
 8007bac:	f7f9 feea 	bl	8001984 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6a1b      	ldr	r3, [r3, #32]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d008      	beq.n	8007bca <HAL_SPI_Init+0x136>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6a1b      	ldr	r3, [r3, #32]
 8007bbc:	2b80      	cmp	r3, #128	; 0x80
 8007bbe:	d004      	beq.n	8007bca <HAL_SPI_Init+0x136>
 8007bc0:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007bc4:	4849      	ldr	r0, [pc, #292]	; (8007cec <HAL_SPI_Init+0x258>)
 8007bc6:	f7f9 fedd 	bl	8001984 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d008      	beq.n	8007be4 <HAL_SPI_Init+0x150>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd6:	2b10      	cmp	r3, #16
 8007bd8:	d004      	beq.n	8007be4 <HAL_SPI_Init+0x150>
 8007bda:	f240 1149 	movw	r1, #329	; 0x149
 8007bde:	4843      	ldr	r0, [pc, #268]	; (8007cec <HAL_SPI_Init+0x258>)
 8007be0:	f7f9 fed0 	bl	8001984 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d119      	bne.n	8007c20 <HAL_SPI_Init+0x18c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	691b      	ldr	r3, [r3, #16]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d008      	beq.n	8007c06 <HAL_SPI_Init+0x172>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	691b      	ldr	r3, [r3, #16]
 8007bf8:	2b02      	cmp	r3, #2
 8007bfa:	d004      	beq.n	8007c06 <HAL_SPI_Init+0x172>
 8007bfc:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8007c00:	483a      	ldr	r0, [pc, #232]	; (8007cec <HAL_SPI_Init+0x258>)
 8007c02:	f7f9 febf 	bl	8001984 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	695b      	ldr	r3, [r3, #20]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d008      	beq.n	8007c20 <HAL_SPI_Init+0x18c>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	695b      	ldr	r3, [r3, #20]
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d004      	beq.n	8007c20 <HAL_SPI_Init+0x18c>
 8007c16:	f240 114d 	movw	r1, #333	; 0x14d
 8007c1a:	4834      	ldr	r0, [pc, #208]	; (8007cec <HAL_SPI_Init+0x258>)
 8007c1c:	f7f9 feb2 	bl	8001984 <assert_failed>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d106      	bne.n	8007c40 <HAL_SPI_Init+0x1ac>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f7f9 ff8a 	bl	8001b54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2202      	movs	r2, #2
 8007c44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c56:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	685a      	ldr	r2, [r3, #4]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	431a      	orrs	r2, r3
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	431a      	orrs	r2, r3
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	691b      	ldr	r3, [r3, #16]
 8007c6c:	431a      	orrs	r2, r3
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	695b      	ldr	r3, [r3, #20]
 8007c72:	431a      	orrs	r2, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	699b      	ldr	r3, [r3, #24]
 8007c78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c7c:	431a      	orrs	r2, r3
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	69db      	ldr	r3, [r3, #28]
 8007c82:	431a      	orrs	r2, r3
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6a1b      	ldr	r3, [r3, #32]
 8007c88:	ea42 0103 	orr.w	r1, r2, r3
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	430a      	orrs	r2, r1
 8007c96:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	699b      	ldr	r3, [r3, #24]
 8007c9c:	0c1b      	lsrs	r3, r3, #16
 8007c9e:	f003 0104 	and.w	r1, r3, #4
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	430a      	orrs	r2, r1
 8007cac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	69da      	ldr	r2, [r3, #28]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007cbc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3708      	adds	r7, #8
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	40013000 	.word	0x40013000
 8007cdc:	40003800 	.word	0x40003800
 8007ce0:	40003c00 	.word	0x40003c00
 8007ce4:	40013400 	.word	0x40013400
 8007ce8:	40015000 	.word	0x40015000
 8007cec:	08011b34 	.word	0x08011b34

08007cf0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b088      	sub	sp, #32
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007d08:	69bb      	ldr	r3, [r7, #24]
 8007d0a:	099b      	lsrs	r3, r3, #6
 8007d0c:	f003 0301 	and.w	r3, r3, #1
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d10f      	bne.n	8007d34 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d00a      	beq.n	8007d34 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007d1e:	69fb      	ldr	r3, [r7, #28]
 8007d20:	099b      	lsrs	r3, r3, #6
 8007d22:	f003 0301 	and.w	r3, r3, #1
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d004      	beq.n	8007d34 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	4798      	blx	r3
    return;
 8007d32:	e0d8      	b.n	8007ee6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007d34:	69bb      	ldr	r3, [r7, #24]
 8007d36:	085b      	lsrs	r3, r3, #1
 8007d38:	f003 0301 	and.w	r3, r3, #1
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d00a      	beq.n	8007d56 <HAL_SPI_IRQHandler+0x66>
 8007d40:	69fb      	ldr	r3, [r7, #28]
 8007d42:	09db      	lsrs	r3, r3, #7
 8007d44:	f003 0301 	and.w	r3, r3, #1
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d004      	beq.n	8007d56 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	4798      	blx	r3
    return;
 8007d54:	e0c7      	b.n	8007ee6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007d56:	69bb      	ldr	r3, [r7, #24]
 8007d58:	095b      	lsrs	r3, r3, #5
 8007d5a:	f003 0301 	and.w	r3, r3, #1
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d10c      	bne.n	8007d7c <HAL_SPI_IRQHandler+0x8c>
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	099b      	lsrs	r3, r3, #6
 8007d66:	f003 0301 	and.w	r3, r3, #1
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d106      	bne.n	8007d7c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	0a1b      	lsrs	r3, r3, #8
 8007d72:	f003 0301 	and.w	r3, r3, #1
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	f000 80b5 	beq.w	8007ee6 <HAL_SPI_IRQHandler+0x1f6>
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	095b      	lsrs	r3, r3, #5
 8007d80:	f003 0301 	and.w	r3, r3, #1
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	f000 80ae 	beq.w	8007ee6 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007d8a:	69bb      	ldr	r3, [r7, #24]
 8007d8c:	099b      	lsrs	r3, r3, #6
 8007d8e:	f003 0301 	and.w	r3, r3, #1
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d023      	beq.n	8007dde <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	2b03      	cmp	r3, #3
 8007da0:	d011      	beq.n	8007dc6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007da6:	f043 0204 	orr.w	r2, r3, #4
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007dae:	2300      	movs	r3, #0
 8007db0:	617b      	str	r3, [r7, #20]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	617b      	str	r3, [r7, #20]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	617b      	str	r3, [r7, #20]
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	e00b      	b.n	8007dde <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	613b      	str	r3, [r7, #16]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	68db      	ldr	r3, [r3, #12]
 8007dd0:	613b      	str	r3, [r7, #16]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	613b      	str	r3, [r7, #16]
 8007dda:	693b      	ldr	r3, [r7, #16]
        return;
 8007ddc:	e083      	b.n	8007ee6 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007dde:	69bb      	ldr	r3, [r7, #24]
 8007de0:	095b      	lsrs	r3, r3, #5
 8007de2:	f003 0301 	and.w	r3, r3, #1
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d014      	beq.n	8007e14 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dee:	f043 0201 	orr.w	r2, r3, #1
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007df6:	2300      	movs	r3, #0
 8007df8:	60fb      	str	r3, [r7, #12]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	60fb      	str	r3, [r7, #12]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e10:	601a      	str	r2, [r3, #0]
 8007e12:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007e14:	69bb      	ldr	r3, [r7, #24]
 8007e16:	0a1b      	lsrs	r3, r3, #8
 8007e18:	f003 0301 	and.w	r3, r3, #1
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d00c      	beq.n	8007e3a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e24:	f043 0208 	orr.w	r2, r3, #8
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	60bb      	str	r3, [r7, #8]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	60bb      	str	r3, [r7, #8]
 8007e38:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d050      	beq.n	8007ee4 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	685a      	ldr	r2, [r3, #4]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007e50:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2201      	movs	r2, #1
 8007e56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007e5a:	69fb      	ldr	r3, [r7, #28]
 8007e5c:	f003 0302 	and.w	r3, r3, #2
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d104      	bne.n	8007e6e <HAL_SPI_IRQHandler+0x17e>
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	f003 0301 	and.w	r3, r3, #1
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d034      	beq.n	8007ed8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	685a      	ldr	r2, [r3, #4]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f022 0203 	bic.w	r2, r2, #3
 8007e7c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d011      	beq.n	8007eaa <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e8a:	4a18      	ldr	r2, [pc, #96]	; (8007eec <HAL_SPI_IRQHandler+0x1fc>)
 8007e8c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e92:	4618      	mov	r0, r3
 8007e94:	f7fb fd56 	bl	8003944 <HAL_DMA_Abort_IT>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d005      	beq.n	8007eaa <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ea2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d016      	beq.n	8007ee0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eb6:	4a0d      	ldr	r2, [pc, #52]	; (8007eec <HAL_SPI_IRQHandler+0x1fc>)
 8007eb8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7fb fd40 	bl	8003944 <HAL_DMA_Abort_IT>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00a      	beq.n	8007ee0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ece:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007ed6:	e003      	b.n	8007ee0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 f809 	bl	8007ef0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007ede:	e000      	b.n	8007ee2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007ee0:	bf00      	nop
    return;
 8007ee2:	bf00      	nop
 8007ee4:	bf00      	nop
  }
}
 8007ee6:	3720      	adds	r7, #32
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}
 8007eec:	08007f05 	.word	0x08007f05

08007ef0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b083      	sub	sp, #12
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007ef8:	bf00      	nop
 8007efa:	370c      	adds	r7, #12
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f10:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2200      	movs	r2, #0
 8007f16:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007f1e:	68f8      	ldr	r0, [r7, #12]
 8007f20:	f7ff ffe6 	bl	8007ef0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007f24:	bf00      	nop
 8007f26:	3710      	adds	r7, #16
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d101      	bne.n	8007f3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e083      	b.n	8008046 <HAL_TIM_Base_Init+0x11a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a43      	ldr	r2, [pc, #268]	; (8008050 <HAL_TIM_Base_Init+0x124>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d027      	beq.n	8007f98 <HAL_TIM_Base_Init+0x6c>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f50:	d022      	beq.n	8007f98 <HAL_TIM_Base_Init+0x6c>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a3f      	ldr	r2, [pc, #252]	; (8008054 <HAL_TIM_Base_Init+0x128>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d01d      	beq.n	8007f98 <HAL_TIM_Base_Init+0x6c>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a3d      	ldr	r2, [pc, #244]	; (8008058 <HAL_TIM_Base_Init+0x12c>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d018      	beq.n	8007f98 <HAL_TIM_Base_Init+0x6c>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a3c      	ldr	r2, [pc, #240]	; (800805c <HAL_TIM_Base_Init+0x130>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d013      	beq.n	8007f98 <HAL_TIM_Base_Init+0x6c>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a3a      	ldr	r2, [pc, #232]	; (8008060 <HAL_TIM_Base_Init+0x134>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d00e      	beq.n	8007f98 <HAL_TIM_Base_Init+0x6c>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a39      	ldr	r2, [pc, #228]	; (8008064 <HAL_TIM_Base_Init+0x138>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d009      	beq.n	8007f98 <HAL_TIM_Base_Init+0x6c>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a37      	ldr	r2, [pc, #220]	; (8008068 <HAL_TIM_Base_Init+0x13c>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d004      	beq.n	8007f98 <HAL_TIM_Base_Init+0x6c>
 8007f8e:	f44f 7189 	mov.w	r1, #274	; 0x112
 8007f92:	4836      	ldr	r0, [pc, #216]	; (800806c <HAL_TIM_Base_Init+0x140>)
 8007f94:	f7f9 fcf6 	bl	8001984 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d014      	beq.n	8007fca <HAL_TIM_Base_Init+0x9e>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	2b10      	cmp	r3, #16
 8007fa6:	d010      	beq.n	8007fca <HAL_TIM_Base_Init+0x9e>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	2b20      	cmp	r3, #32
 8007fae:	d00c      	beq.n	8007fca <HAL_TIM_Base_Init+0x9e>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	2b40      	cmp	r3, #64	; 0x40
 8007fb6:	d008      	beq.n	8007fca <HAL_TIM_Base_Init+0x9e>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	2b60      	cmp	r3, #96	; 0x60
 8007fbe:	d004      	beq.n	8007fca <HAL_TIM_Base_Init+0x9e>
 8007fc0:	f240 1113 	movw	r1, #275	; 0x113
 8007fc4:	4829      	ldr	r0, [pc, #164]	; (800806c <HAL_TIM_Base_Init+0x140>)
 8007fc6:	f7f9 fcdd 	bl	8001984 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d00e      	beq.n	8007ff0 <HAL_TIM_Base_Init+0xc4>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	691b      	ldr	r3, [r3, #16]
 8007fd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fda:	d009      	beq.n	8007ff0 <HAL_TIM_Base_Init+0xc4>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	691b      	ldr	r3, [r3, #16]
 8007fe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fe4:	d004      	beq.n	8007ff0 <HAL_TIM_Base_Init+0xc4>
 8007fe6:	f44f 718a 	mov.w	r1, #276	; 0x114
 8007fea:	4820      	ldr	r0, [pc, #128]	; (800806c <HAL_TIM_Base_Init+0x140>)
 8007fec:	f7f9 fcca 	bl	8001984 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	699b      	ldr	r3, [r3, #24]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d008      	beq.n	800800a <HAL_TIM_Base_Init+0xde>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	699b      	ldr	r3, [r3, #24]
 8007ffc:	2b80      	cmp	r3, #128	; 0x80
 8007ffe:	d004      	beq.n	800800a <HAL_TIM_Base_Init+0xde>
 8008000:	f240 1115 	movw	r1, #277	; 0x115
 8008004:	4819      	ldr	r0, [pc, #100]	; (800806c <HAL_TIM_Base_Init+0x140>)
 8008006:	f7f9 fcbd 	bl	8001984 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008010:	b2db      	uxtb	r3, r3
 8008012:	2b00      	cmp	r3, #0
 8008014:	d106      	bne.n	8008024 <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 f826 	bl	8008070 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2202      	movs	r2, #2
 8008028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	3304      	adds	r3, #4
 8008034:	4619      	mov	r1, r3
 8008036:	4610      	mov	r0, r2
 8008038:	f000 f9b4 	bl	80083a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008044:	2300      	movs	r3, #0
}
 8008046:	4618      	mov	r0, r3
 8008048:	3708      	adds	r7, #8
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
 800804e:	bf00      	nop
 8008050:	40010000 	.word	0x40010000
 8008054:	40000400 	.word	0x40000400
 8008058:	40000800 	.word	0x40000800
 800805c:	40000c00 	.word	0x40000c00
 8008060:	40014000 	.word	0x40014000
 8008064:	40014400 	.word	0x40014400
 8008068:	40014800 	.word	0x40014800
 800806c:	08011b6c 	.word	0x08011b6c

08008070 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008078:	bf00      	nop
 800807a:	370c      	adds	r7, #12
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a24      	ldr	r2, [pc, #144]	; (8008124 <HAL_TIM_Base_Start_IT+0xa0>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d027      	beq.n	80080e6 <HAL_TIM_Base_Start_IT+0x62>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800809e:	d022      	beq.n	80080e6 <HAL_TIM_Base_Start_IT+0x62>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a20      	ldr	r2, [pc, #128]	; (8008128 <HAL_TIM_Base_Start_IT+0xa4>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d01d      	beq.n	80080e6 <HAL_TIM_Base_Start_IT+0x62>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a1f      	ldr	r2, [pc, #124]	; (800812c <HAL_TIM_Base_Start_IT+0xa8>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d018      	beq.n	80080e6 <HAL_TIM_Base_Start_IT+0x62>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a1d      	ldr	r2, [pc, #116]	; (8008130 <HAL_TIM_Base_Start_IT+0xac>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d013      	beq.n	80080e6 <HAL_TIM_Base_Start_IT+0x62>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a1c      	ldr	r2, [pc, #112]	; (8008134 <HAL_TIM_Base_Start_IT+0xb0>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d00e      	beq.n	80080e6 <HAL_TIM_Base_Start_IT+0x62>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a1a      	ldr	r2, [pc, #104]	; (8008138 <HAL_TIM_Base_Start_IT+0xb4>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d009      	beq.n	80080e6 <HAL_TIM_Base_Start_IT+0x62>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a19      	ldr	r2, [pc, #100]	; (800813c <HAL_TIM_Base_Start_IT+0xb8>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d004      	beq.n	80080e6 <HAL_TIM_Base_Start_IT+0x62>
 80080dc:	f240 11b9 	movw	r1, #441	; 0x1b9
 80080e0:	4817      	ldr	r0, [pc, #92]	; (8008140 <HAL_TIM_Base_Start_IT+0xbc>)
 80080e2:	f7f9 fc4f 	bl	8001984 <assert_failed>

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	68da      	ldr	r2, [r3, #12]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f042 0201 	orr.w	r2, r2, #1
 80080f4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	f003 0307 	and.w	r3, r3, #7
 8008100:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2b06      	cmp	r3, #6
 8008106:	d007      	beq.n	8008118 <HAL_TIM_Base_Start_IT+0x94>
  {
    __HAL_TIM_ENABLE(htim);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f042 0201 	orr.w	r2, r2, #1
 8008116:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008118:	2300      	movs	r3, #0
}
 800811a:	4618      	mov	r0, r3
 800811c:	3710      	adds	r7, #16
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
 8008122:	bf00      	nop
 8008124:	40010000 	.word	0x40010000
 8008128:	40000400 	.word	0x40000400
 800812c:	40000800 	.word	0x40000800
 8008130:	40000c00 	.word	0x40000c00
 8008134:	40014000 	.word	0x40014000
 8008138:	40014400 	.word	0x40014400
 800813c:	40014800 	.word	0x40014800
 8008140:	08011b6c 	.word	0x08011b6c

08008144 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	691b      	ldr	r3, [r3, #16]
 8008152:	f003 0302 	and.w	r3, r3, #2
 8008156:	2b02      	cmp	r3, #2
 8008158:	d122      	bne.n	80081a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	68db      	ldr	r3, [r3, #12]
 8008160:	f003 0302 	and.w	r3, r3, #2
 8008164:	2b02      	cmp	r3, #2
 8008166:	d11b      	bne.n	80081a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f06f 0202 	mvn.w	r2, #2
 8008170:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2201      	movs	r2, #1
 8008176:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	699b      	ldr	r3, [r3, #24]
 800817e:	f003 0303 	and.w	r3, r3, #3
 8008182:	2b00      	cmp	r3, #0
 8008184:	d003      	beq.n	800818e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 f8ee 	bl	8008368 <HAL_TIM_IC_CaptureCallback>
 800818c:	e005      	b.n	800819a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 f8e0 	bl	8008354 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 f8f1 	bl	800837c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	691b      	ldr	r3, [r3, #16]
 80081a6:	f003 0304 	and.w	r3, r3, #4
 80081aa:	2b04      	cmp	r3, #4
 80081ac:	d122      	bne.n	80081f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	f003 0304 	and.w	r3, r3, #4
 80081b8:	2b04      	cmp	r3, #4
 80081ba:	d11b      	bne.n	80081f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f06f 0204 	mvn.w	r2, #4
 80081c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2202      	movs	r2, #2
 80081ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	699b      	ldr	r3, [r3, #24]
 80081d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d003      	beq.n	80081e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 f8c4 	bl	8008368 <HAL_TIM_IC_CaptureCallback>
 80081e0:	e005      	b.n	80081ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 f8b6 	bl	8008354 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 f8c7 	bl	800837c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2200      	movs	r2, #0
 80081f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	f003 0308 	and.w	r3, r3, #8
 80081fe:	2b08      	cmp	r3, #8
 8008200:	d122      	bne.n	8008248 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	f003 0308 	and.w	r3, r3, #8
 800820c:	2b08      	cmp	r3, #8
 800820e:	d11b      	bne.n	8008248 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f06f 0208 	mvn.w	r2, #8
 8008218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2204      	movs	r2, #4
 800821e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	69db      	ldr	r3, [r3, #28]
 8008226:	f003 0303 	and.w	r3, r3, #3
 800822a:	2b00      	cmp	r3, #0
 800822c:	d003      	beq.n	8008236 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 f89a 	bl	8008368 <HAL_TIM_IC_CaptureCallback>
 8008234:	e005      	b.n	8008242 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 f88c 	bl	8008354 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 f89d 	bl	800837c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	691b      	ldr	r3, [r3, #16]
 800824e:	f003 0310 	and.w	r3, r3, #16
 8008252:	2b10      	cmp	r3, #16
 8008254:	d122      	bne.n	800829c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	68db      	ldr	r3, [r3, #12]
 800825c:	f003 0310 	and.w	r3, r3, #16
 8008260:	2b10      	cmp	r3, #16
 8008262:	d11b      	bne.n	800829c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f06f 0210 	mvn.w	r2, #16
 800826c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2208      	movs	r2, #8
 8008272:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	69db      	ldr	r3, [r3, #28]
 800827a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800827e:	2b00      	cmp	r3, #0
 8008280:	d003      	beq.n	800828a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 f870 	bl	8008368 <HAL_TIM_IC_CaptureCallback>
 8008288:	e005      	b.n	8008296 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 f862 	bl	8008354 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 f873 	bl	800837c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2200      	movs	r2, #0
 800829a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	691b      	ldr	r3, [r3, #16]
 80082a2:	f003 0301 	and.w	r3, r3, #1
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d10e      	bne.n	80082c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	f003 0301 	and.w	r3, r3, #1
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d107      	bne.n	80082c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f06f 0201 	mvn.w	r2, #1
 80082c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f7f9 fb48 	bl	8001958 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	691b      	ldr	r3, [r3, #16]
 80082ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082d2:	2b80      	cmp	r3, #128	; 0x80
 80082d4:	d10e      	bne.n	80082f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082e0:	2b80      	cmp	r3, #128	; 0x80
 80082e2:	d107      	bne.n	80082f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80082ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 f8e2 	bl	80084b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	691b      	ldr	r3, [r3, #16]
 80082fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082fe:	2b40      	cmp	r3, #64	; 0x40
 8008300:	d10e      	bne.n	8008320 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800830c:	2b40      	cmp	r3, #64	; 0x40
 800830e:	d107      	bne.n	8008320 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 f838 	bl	8008390 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	691b      	ldr	r3, [r3, #16]
 8008326:	f003 0320 	and.w	r3, r3, #32
 800832a:	2b20      	cmp	r3, #32
 800832c:	d10e      	bne.n	800834c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	68db      	ldr	r3, [r3, #12]
 8008334:	f003 0320 	and.w	r3, r3, #32
 8008338:	2b20      	cmp	r3, #32
 800833a:	d107      	bne.n	800834c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f06f 0220 	mvn.w	r2, #32
 8008344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 f8ac 	bl	80084a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800834c:	bf00      	nop
 800834e:	3708      	adds	r7, #8
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800835c:	bf00      	nop
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008368:	b480      	push	{r7}
 800836a:	b083      	sub	sp, #12
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008370:	bf00      	nop
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008384:	bf00      	nop
 8008386:	370c      	adds	r7, #12
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008398:	bf00      	nop
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b085      	sub	sp, #20
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	4a34      	ldr	r2, [pc, #208]	; (8008488 <TIM_Base_SetConfig+0xe4>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d00f      	beq.n	80083dc <TIM_Base_SetConfig+0x38>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083c2:	d00b      	beq.n	80083dc <TIM_Base_SetConfig+0x38>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4a31      	ldr	r2, [pc, #196]	; (800848c <TIM_Base_SetConfig+0xe8>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d007      	beq.n	80083dc <TIM_Base_SetConfig+0x38>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	4a30      	ldr	r2, [pc, #192]	; (8008490 <TIM_Base_SetConfig+0xec>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d003      	beq.n	80083dc <TIM_Base_SetConfig+0x38>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	4a2f      	ldr	r2, [pc, #188]	; (8008494 <TIM_Base_SetConfig+0xf0>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d108      	bne.n	80083ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	68fa      	ldr	r2, [r7, #12]
 80083ea:	4313      	orrs	r3, r2
 80083ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	4a25      	ldr	r2, [pc, #148]	; (8008488 <TIM_Base_SetConfig+0xe4>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d01b      	beq.n	800842e <TIM_Base_SetConfig+0x8a>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083fc:	d017      	beq.n	800842e <TIM_Base_SetConfig+0x8a>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	4a22      	ldr	r2, [pc, #136]	; (800848c <TIM_Base_SetConfig+0xe8>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d013      	beq.n	800842e <TIM_Base_SetConfig+0x8a>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	4a21      	ldr	r2, [pc, #132]	; (8008490 <TIM_Base_SetConfig+0xec>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d00f      	beq.n	800842e <TIM_Base_SetConfig+0x8a>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4a20      	ldr	r2, [pc, #128]	; (8008494 <TIM_Base_SetConfig+0xf0>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d00b      	beq.n	800842e <TIM_Base_SetConfig+0x8a>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4a1f      	ldr	r2, [pc, #124]	; (8008498 <TIM_Base_SetConfig+0xf4>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d007      	beq.n	800842e <TIM_Base_SetConfig+0x8a>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	4a1e      	ldr	r2, [pc, #120]	; (800849c <TIM_Base_SetConfig+0xf8>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d003      	beq.n	800842e <TIM_Base_SetConfig+0x8a>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4a1d      	ldr	r2, [pc, #116]	; (80084a0 <TIM_Base_SetConfig+0xfc>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d108      	bne.n	8008440 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008434:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	4313      	orrs	r3, r2
 800843e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	695b      	ldr	r3, [r3, #20]
 800844a:	4313      	orrs	r3, r2
 800844c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	689a      	ldr	r2, [r3, #8]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	681a      	ldr	r2, [r3, #0]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	4a08      	ldr	r2, [pc, #32]	; (8008488 <TIM_Base_SetConfig+0xe4>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d103      	bne.n	8008474 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	691a      	ldr	r2, [r3, #16]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2201      	movs	r2, #1
 8008478:	615a      	str	r2, [r3, #20]
}
 800847a:	bf00      	nop
 800847c:	3714      	adds	r7, #20
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr
 8008486:	bf00      	nop
 8008488:	40010000 	.word	0x40010000
 800848c:	40000400 	.word	0x40000400
 8008490:	40000800 	.word	0x40000800
 8008494:	40000c00 	.word	0x40000c00
 8008498:	40014000 	.word	0x40014000
 800849c:	40014400 	.word	0x40014400
 80084a0:	40014800 	.word	0x40014800

080084a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80084ac:	bf00      	nop
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80084c0:	bf00      	nop
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d101      	bne.n	80084de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80084da:	2301      	movs	r3, #1
 80084dc:	e0a0      	b.n	8008620 <HAL_UART_Init+0x154>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	699b      	ldr	r3, [r3, #24]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d02c      	beq.n	8008540 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a4f      	ldr	r2, [pc, #316]	; (8008628 <HAL_UART_Init+0x15c>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d00e      	beq.n	800850e <HAL_UART_Init+0x42>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a4d      	ldr	r2, [pc, #308]	; (800862c <HAL_UART_Init+0x160>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d009      	beq.n	800850e <HAL_UART_Init+0x42>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a4c      	ldr	r2, [pc, #304]	; (8008630 <HAL_UART_Init+0x164>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d004      	beq.n	800850e <HAL_UART_Init+0x42>
 8008504:	f240 114b 	movw	r1, #331	; 0x14b
 8008508:	484a      	ldr	r0, [pc, #296]	; (8008634 <HAL_UART_Init+0x168>)
 800850a:	f7f9 fa3b 	bl	8001984 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	699b      	ldr	r3, [r3, #24]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d028      	beq.n	8008568 <HAL_UART_Init+0x9c>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	699b      	ldr	r3, [r3, #24]
 800851a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800851e:	d023      	beq.n	8008568 <HAL_UART_Init+0x9c>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	699b      	ldr	r3, [r3, #24]
 8008524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008528:	d01e      	beq.n	8008568 <HAL_UART_Init+0x9c>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	699b      	ldr	r3, [r3, #24]
 800852e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008532:	d019      	beq.n	8008568 <HAL_UART_Init+0x9c>
 8008534:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8008538:	483e      	ldr	r0, [pc, #248]	; (8008634 <HAL_UART_Init+0x168>)
 800853a:	f7f9 fa23 	bl	8001984 <assert_failed>
 800853e:	e013      	b.n	8008568 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a38      	ldr	r2, [pc, #224]	; (8008628 <HAL_UART_Init+0x15c>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d00e      	beq.n	8008568 <HAL_UART_Init+0x9c>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a37      	ldr	r2, [pc, #220]	; (800862c <HAL_UART_Init+0x160>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d009      	beq.n	8008568 <HAL_UART_Init+0x9c>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a35      	ldr	r2, [pc, #212]	; (8008630 <HAL_UART_Init+0x164>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d004      	beq.n	8008568 <HAL_UART_Init+0x9c>
 800855e:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8008562:	4834      	ldr	r0, [pc, #208]	; (8008634 <HAL_UART_Init+0x168>)
 8008564:	f7f9 fa0e 	bl	8001984 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d009      	beq.n	8008584 <HAL_UART_Init+0xb8>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008578:	d004      	beq.n	8008584 <HAL_UART_Init+0xb8>
 800857a:	f44f 71a9 	mov.w	r1, #338	; 0x152
 800857e:	482d      	ldr	r0, [pc, #180]	; (8008634 <HAL_UART_Init+0x168>)
 8008580:	f7f9 fa00 	bl	8001984 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	69db      	ldr	r3, [r3, #28]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d009      	beq.n	80085a0 <HAL_UART_Init+0xd4>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	69db      	ldr	r3, [r3, #28]
 8008590:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008594:	d004      	beq.n	80085a0 <HAL_UART_Init+0xd4>
 8008596:	f240 1153 	movw	r1, #339	; 0x153
 800859a:	4826      	ldr	r0, [pc, #152]	; (8008634 <HAL_UART_Init+0x168>)
 800859c:	f7f9 f9f2 	bl	8001984 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d106      	bne.n	80085ba <HAL_UART_Init+0xee>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f7f9 fd3f 	bl	8002038 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2224      	movs	r2, #36	; 0x24
 80085be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	68da      	ldr	r2, [r3, #12]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80085d0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 f8be 	bl	8008754 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	691a      	ldr	r2, [r3, #16]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80085e6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	695a      	ldr	r2, [r3, #20]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80085f6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	68da      	ldr	r2, [r3, #12]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008606:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2220      	movs	r2, #32
 8008612:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2220      	movs	r2, #32
 800861a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800861e:	2300      	movs	r3, #0
}
 8008620:	4618      	mov	r0, r3
 8008622:	3708      	adds	r7, #8
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}
 8008628:	40011000 	.word	0x40011000
 800862c:	40004400 	.word	0x40004400
 8008630:	40011400 	.word	0x40011400
 8008634:	08011ba4 	.word	0x08011ba4

08008638 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d101      	bne.n	800864a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	e077      	b.n	800873a <HAL_HalfDuplex_Init+0x102>
  }

  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a3d      	ldr	r2, [pc, #244]	; (8008744 <HAL_HalfDuplex_Init+0x10c>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d00e      	beq.n	8008672 <HAL_HalfDuplex_Init+0x3a>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a3b      	ldr	r2, [pc, #236]	; (8008748 <HAL_HalfDuplex_Init+0x110>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d009      	beq.n	8008672 <HAL_HalfDuplex_Init+0x3a>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a3a      	ldr	r2, [pc, #232]	; (800874c <HAL_HalfDuplex_Init+0x114>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d004      	beq.n	8008672 <HAL_HalfDuplex_Init+0x3a>
 8008668:	f240 1193 	movw	r1, #403	; 0x193
 800866c:	4838      	ldr	r0, [pc, #224]	; (8008750 <HAL_HalfDuplex_Init+0x118>)
 800866e:	f7f9 f989 	bl	8001984 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d009      	beq.n	800868e <HAL_HalfDuplex_Init+0x56>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008682:	d004      	beq.n	800868e <HAL_HalfDuplex_Init+0x56>
 8008684:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8008688:	4831      	ldr	r0, [pc, #196]	; (8008750 <HAL_HalfDuplex_Init+0x118>)
 800868a:	f7f9 f97b 	bl	8001984 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	69db      	ldr	r3, [r3, #28]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d009      	beq.n	80086aa <HAL_HalfDuplex_Init+0x72>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	69db      	ldr	r3, [r3, #28]
 800869a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800869e:	d004      	beq.n	80086aa <HAL_HalfDuplex_Init+0x72>
 80086a0:	f240 1195 	movw	r1, #405	; 0x195
 80086a4:	482a      	ldr	r0, [pc, #168]	; (8008750 <HAL_HalfDuplex_Init+0x118>)
 80086a6:	f7f9 f96d 	bl	8001984 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d106      	bne.n	80086c4 <HAL_HalfDuplex_Init+0x8c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2200      	movs	r2, #0
 80086ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f7f9 fcba 	bl	8002038 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2224      	movs	r2, #36	; 0x24
 80086c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	68da      	ldr	r2, [r3, #12]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80086da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 f839 	bl	8008754 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	691a      	ldr	r2, [r3, #16]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80086f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	695a      	ldr	r2, [r3, #20]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8008700:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	695a      	ldr	r2, [r3, #20]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f042 0208 	orr.w	r2, r2, #8
 8008710:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	68da      	ldr	r2, [r3, #12]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008720:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2200      	movs	r2, #0
 8008726:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2220      	movs	r2, #32
 800872c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2220      	movs	r2, #32
 8008734:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008738:	2300      	movs	r3, #0
}
 800873a:	4618      	mov	r0, r3
 800873c:	3708      	adds	r7, #8
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
 8008742:	bf00      	nop
 8008744:	40011000 	.word	0x40011000
 8008748:	40004400 	.word	0x40004400
 800874c:	40011400 	.word	0x40011400
 8008750:	08011ba4 	.word	0x08011ba4

08008754 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008758:	b085      	sub	sp, #20
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	4a9a      	ldr	r2, [pc, #616]	; (80089cc <UART_SetConfig+0x278>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d904      	bls.n	8008772 <UART_SetConfig+0x1e>
 8008768:	f640 31fb 	movw	r1, #3067	; 0xbfb
 800876c:	4898      	ldr	r0, [pc, #608]	; (80089d0 <UART_SetConfig+0x27c>)
 800876e:	f7f9 f909 	bl	8001984 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	68db      	ldr	r3, [r3, #12]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d009      	beq.n	800878e <UART_SetConfig+0x3a>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008782:	d004      	beq.n	800878e <UART_SetConfig+0x3a>
 8008784:	f640 31fc 	movw	r1, #3068	; 0xbfc
 8008788:	4891      	ldr	r0, [pc, #580]	; (80089d0 <UART_SetConfig+0x27c>)
 800878a:	f7f9 f8fb 	bl	8001984 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	691b      	ldr	r3, [r3, #16]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d00e      	beq.n	80087b4 <UART_SetConfig+0x60>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	691b      	ldr	r3, [r3, #16]
 800879a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800879e:	d009      	beq.n	80087b4 <UART_SetConfig+0x60>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	691b      	ldr	r3, [r3, #16]
 80087a4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80087a8:	d004      	beq.n	80087b4 <UART_SetConfig+0x60>
 80087aa:	f640 31fd 	movw	r1, #3069	; 0xbfd
 80087ae:	4888      	ldr	r0, [pc, #544]	; (80089d0 <UART_SetConfig+0x27c>)
 80087b0:	f7f9 f8e8 	bl	8001984 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	695a      	ldr	r2, [r3, #20]
 80087b8:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80087bc:	4013      	ands	r3, r2
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d103      	bne.n	80087ca <UART_SetConfig+0x76>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	695b      	ldr	r3, [r3, #20]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d104      	bne.n	80087d4 <UART_SetConfig+0x80>
 80087ca:	f640 31fe 	movw	r1, #3070	; 0xbfe
 80087ce:	4880      	ldr	r0, [pc, #512]	; (80089d0 <UART_SetConfig+0x27c>)
 80087d0:	f7f9 f8d8 	bl	8001984 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	691b      	ldr	r3, [r3, #16]
 80087da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	68da      	ldr	r2, [r3, #12]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	430a      	orrs	r2, r1
 80087e8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	689a      	ldr	r2, [r3, #8]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	431a      	orrs	r2, r3
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	695b      	ldr	r3, [r3, #20]
 80087f8:	431a      	orrs	r2, r3
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	69db      	ldr	r3, [r3, #28]
 80087fe:	4313      	orrs	r3, r2
 8008800:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800880c:	f023 030c 	bic.w	r3, r3, #12
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	6812      	ldr	r2, [r2, #0]
 8008814:	68f9      	ldr	r1, [r7, #12]
 8008816:	430b      	orrs	r3, r1
 8008818:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	695b      	ldr	r3, [r3, #20]
 8008820:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	699a      	ldr	r2, [r3, #24]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	430a      	orrs	r2, r1
 800882e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	69db      	ldr	r3, [r3, #28]
 8008834:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008838:	f040 818f 	bne.w	8008b5a <UART_SetConfig+0x406>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a64      	ldr	r2, [pc, #400]	; (80089d4 <UART_SetConfig+0x280>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d005      	beq.n	8008852 <UART_SetConfig+0xfe>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a63      	ldr	r2, [pc, #396]	; (80089d8 <UART_SetConfig+0x284>)
 800884c:	4293      	cmp	r3, r2
 800884e:	f040 80c7 	bne.w	80089e0 <UART_SetConfig+0x28c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008852:	f7fe fa59 	bl	8006d08 <HAL_RCC_GetPCLK2Freq>
 8008856:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	461d      	mov	r5, r3
 800885c:	f04f 0600 	mov.w	r6, #0
 8008860:	46a8      	mov	r8, r5
 8008862:	46b1      	mov	r9, r6
 8008864:	eb18 0308 	adds.w	r3, r8, r8
 8008868:	eb49 0409 	adc.w	r4, r9, r9
 800886c:	4698      	mov	r8, r3
 800886e:	46a1      	mov	r9, r4
 8008870:	eb18 0805 	adds.w	r8, r8, r5
 8008874:	eb49 0906 	adc.w	r9, r9, r6
 8008878:	f04f 0100 	mov.w	r1, #0
 800887c:	f04f 0200 	mov.w	r2, #0
 8008880:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008884:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008888:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800888c:	4688      	mov	r8, r1
 800888e:	4691      	mov	r9, r2
 8008890:	eb18 0005 	adds.w	r0, r8, r5
 8008894:	eb49 0106 	adc.w	r1, r9, r6
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	461d      	mov	r5, r3
 800889e:	f04f 0600 	mov.w	r6, #0
 80088a2:	196b      	adds	r3, r5, r5
 80088a4:	eb46 0406 	adc.w	r4, r6, r6
 80088a8:	461a      	mov	r2, r3
 80088aa:	4623      	mov	r3, r4
 80088ac:	f7f8 f8b6 	bl	8000a1c <__aeabi_uldivmod>
 80088b0:	4603      	mov	r3, r0
 80088b2:	460c      	mov	r4, r1
 80088b4:	461a      	mov	r2, r3
 80088b6:	4b49      	ldr	r3, [pc, #292]	; (80089dc <UART_SetConfig+0x288>)
 80088b8:	fba3 2302 	umull	r2, r3, r3, r2
 80088bc:	095b      	lsrs	r3, r3, #5
 80088be:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	461d      	mov	r5, r3
 80088c6:	f04f 0600 	mov.w	r6, #0
 80088ca:	46a9      	mov	r9, r5
 80088cc:	46b2      	mov	sl, r6
 80088ce:	eb19 0309 	adds.w	r3, r9, r9
 80088d2:	eb4a 040a 	adc.w	r4, sl, sl
 80088d6:	4699      	mov	r9, r3
 80088d8:	46a2      	mov	sl, r4
 80088da:	eb19 0905 	adds.w	r9, r9, r5
 80088de:	eb4a 0a06 	adc.w	sl, sl, r6
 80088e2:	f04f 0100 	mov.w	r1, #0
 80088e6:	f04f 0200 	mov.w	r2, #0
 80088ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80088ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80088f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80088f6:	4689      	mov	r9, r1
 80088f8:	4692      	mov	sl, r2
 80088fa:	eb19 0005 	adds.w	r0, r9, r5
 80088fe:	eb4a 0106 	adc.w	r1, sl, r6
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	461d      	mov	r5, r3
 8008908:	f04f 0600 	mov.w	r6, #0
 800890c:	196b      	adds	r3, r5, r5
 800890e:	eb46 0406 	adc.w	r4, r6, r6
 8008912:	461a      	mov	r2, r3
 8008914:	4623      	mov	r3, r4
 8008916:	f7f8 f881 	bl	8000a1c <__aeabi_uldivmod>
 800891a:	4603      	mov	r3, r0
 800891c:	460c      	mov	r4, r1
 800891e:	461a      	mov	r2, r3
 8008920:	4b2e      	ldr	r3, [pc, #184]	; (80089dc <UART_SetConfig+0x288>)
 8008922:	fba3 1302 	umull	r1, r3, r3, r2
 8008926:	095b      	lsrs	r3, r3, #5
 8008928:	2164      	movs	r1, #100	; 0x64
 800892a:	fb01 f303 	mul.w	r3, r1, r3
 800892e:	1ad3      	subs	r3, r2, r3
 8008930:	00db      	lsls	r3, r3, #3
 8008932:	3332      	adds	r3, #50	; 0x32
 8008934:	4a29      	ldr	r2, [pc, #164]	; (80089dc <UART_SetConfig+0x288>)
 8008936:	fba2 2303 	umull	r2, r3, r2, r3
 800893a:	095b      	lsrs	r3, r3, #5
 800893c:	005b      	lsls	r3, r3, #1
 800893e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008942:	4498      	add	r8, r3
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	461d      	mov	r5, r3
 8008948:	f04f 0600 	mov.w	r6, #0
 800894c:	46a9      	mov	r9, r5
 800894e:	46b2      	mov	sl, r6
 8008950:	eb19 0309 	adds.w	r3, r9, r9
 8008954:	eb4a 040a 	adc.w	r4, sl, sl
 8008958:	4699      	mov	r9, r3
 800895a:	46a2      	mov	sl, r4
 800895c:	eb19 0905 	adds.w	r9, r9, r5
 8008960:	eb4a 0a06 	adc.w	sl, sl, r6
 8008964:	f04f 0100 	mov.w	r1, #0
 8008968:	f04f 0200 	mov.w	r2, #0
 800896c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008970:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008974:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008978:	4689      	mov	r9, r1
 800897a:	4692      	mov	sl, r2
 800897c:	eb19 0005 	adds.w	r0, r9, r5
 8008980:	eb4a 0106 	adc.w	r1, sl, r6
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	461d      	mov	r5, r3
 800898a:	f04f 0600 	mov.w	r6, #0
 800898e:	196b      	adds	r3, r5, r5
 8008990:	eb46 0406 	adc.w	r4, r6, r6
 8008994:	461a      	mov	r2, r3
 8008996:	4623      	mov	r3, r4
 8008998:	f7f8 f840 	bl	8000a1c <__aeabi_uldivmod>
 800899c:	4603      	mov	r3, r0
 800899e:	460c      	mov	r4, r1
 80089a0:	461a      	mov	r2, r3
 80089a2:	4b0e      	ldr	r3, [pc, #56]	; (80089dc <UART_SetConfig+0x288>)
 80089a4:	fba3 1302 	umull	r1, r3, r3, r2
 80089a8:	095b      	lsrs	r3, r3, #5
 80089aa:	2164      	movs	r1, #100	; 0x64
 80089ac:	fb01 f303 	mul.w	r3, r1, r3
 80089b0:	1ad3      	subs	r3, r2, r3
 80089b2:	00db      	lsls	r3, r3, #3
 80089b4:	3332      	adds	r3, #50	; 0x32
 80089b6:	4a09      	ldr	r2, [pc, #36]	; (80089dc <UART_SetConfig+0x288>)
 80089b8:	fba2 2303 	umull	r2, r3, r2, r3
 80089bc:	095b      	lsrs	r3, r3, #5
 80089be:	f003 0207 	and.w	r2, r3, #7
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4442      	add	r2, r8
 80089c8:	609a      	str	r2, [r3, #8]
 80089ca:	e27a      	b.n	8008ec2 <UART_SetConfig+0x76e>
 80089cc:	00a037a0 	.word	0x00a037a0
 80089d0:	08011ba4 	.word	0x08011ba4
 80089d4:	40011000 	.word	0x40011000
 80089d8:	40011400 	.word	0x40011400
 80089dc:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80089e0:	f7fe f97e 	bl	8006ce0 <HAL_RCC_GetPCLK1Freq>
 80089e4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	461d      	mov	r5, r3
 80089ea:	f04f 0600 	mov.w	r6, #0
 80089ee:	46a8      	mov	r8, r5
 80089f0:	46b1      	mov	r9, r6
 80089f2:	eb18 0308 	adds.w	r3, r8, r8
 80089f6:	eb49 0409 	adc.w	r4, r9, r9
 80089fa:	4698      	mov	r8, r3
 80089fc:	46a1      	mov	r9, r4
 80089fe:	eb18 0805 	adds.w	r8, r8, r5
 8008a02:	eb49 0906 	adc.w	r9, r9, r6
 8008a06:	f04f 0100 	mov.w	r1, #0
 8008a0a:	f04f 0200 	mov.w	r2, #0
 8008a0e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008a12:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008a16:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008a1a:	4688      	mov	r8, r1
 8008a1c:	4691      	mov	r9, r2
 8008a1e:	eb18 0005 	adds.w	r0, r8, r5
 8008a22:	eb49 0106 	adc.w	r1, r9, r6
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	685b      	ldr	r3, [r3, #4]
 8008a2a:	461d      	mov	r5, r3
 8008a2c:	f04f 0600 	mov.w	r6, #0
 8008a30:	196b      	adds	r3, r5, r5
 8008a32:	eb46 0406 	adc.w	r4, r6, r6
 8008a36:	461a      	mov	r2, r3
 8008a38:	4623      	mov	r3, r4
 8008a3a:	f7f7 ffef 	bl	8000a1c <__aeabi_uldivmod>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	460c      	mov	r4, r1
 8008a42:	461a      	mov	r2, r3
 8008a44:	4bb3      	ldr	r3, [pc, #716]	; (8008d14 <UART_SetConfig+0x5c0>)
 8008a46:	fba3 2302 	umull	r2, r3, r3, r2
 8008a4a:	095b      	lsrs	r3, r3, #5
 8008a4c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	461d      	mov	r5, r3
 8008a54:	f04f 0600 	mov.w	r6, #0
 8008a58:	46a9      	mov	r9, r5
 8008a5a:	46b2      	mov	sl, r6
 8008a5c:	eb19 0309 	adds.w	r3, r9, r9
 8008a60:	eb4a 040a 	adc.w	r4, sl, sl
 8008a64:	4699      	mov	r9, r3
 8008a66:	46a2      	mov	sl, r4
 8008a68:	eb19 0905 	adds.w	r9, r9, r5
 8008a6c:	eb4a 0a06 	adc.w	sl, sl, r6
 8008a70:	f04f 0100 	mov.w	r1, #0
 8008a74:	f04f 0200 	mov.w	r2, #0
 8008a78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008a7c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008a80:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008a84:	4689      	mov	r9, r1
 8008a86:	4692      	mov	sl, r2
 8008a88:	eb19 0005 	adds.w	r0, r9, r5
 8008a8c:	eb4a 0106 	adc.w	r1, sl, r6
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	461d      	mov	r5, r3
 8008a96:	f04f 0600 	mov.w	r6, #0
 8008a9a:	196b      	adds	r3, r5, r5
 8008a9c:	eb46 0406 	adc.w	r4, r6, r6
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	4623      	mov	r3, r4
 8008aa4:	f7f7 ffba 	bl	8000a1c <__aeabi_uldivmod>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	460c      	mov	r4, r1
 8008aac:	461a      	mov	r2, r3
 8008aae:	4b99      	ldr	r3, [pc, #612]	; (8008d14 <UART_SetConfig+0x5c0>)
 8008ab0:	fba3 1302 	umull	r1, r3, r3, r2
 8008ab4:	095b      	lsrs	r3, r3, #5
 8008ab6:	2164      	movs	r1, #100	; 0x64
 8008ab8:	fb01 f303 	mul.w	r3, r1, r3
 8008abc:	1ad3      	subs	r3, r2, r3
 8008abe:	00db      	lsls	r3, r3, #3
 8008ac0:	3332      	adds	r3, #50	; 0x32
 8008ac2:	4a94      	ldr	r2, [pc, #592]	; (8008d14 <UART_SetConfig+0x5c0>)
 8008ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ac8:	095b      	lsrs	r3, r3, #5
 8008aca:	005b      	lsls	r3, r3, #1
 8008acc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008ad0:	4498      	add	r8, r3
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	461d      	mov	r5, r3
 8008ad6:	f04f 0600 	mov.w	r6, #0
 8008ada:	46a9      	mov	r9, r5
 8008adc:	46b2      	mov	sl, r6
 8008ade:	eb19 0309 	adds.w	r3, r9, r9
 8008ae2:	eb4a 040a 	adc.w	r4, sl, sl
 8008ae6:	4699      	mov	r9, r3
 8008ae8:	46a2      	mov	sl, r4
 8008aea:	eb19 0905 	adds.w	r9, r9, r5
 8008aee:	eb4a 0a06 	adc.w	sl, sl, r6
 8008af2:	f04f 0100 	mov.w	r1, #0
 8008af6:	f04f 0200 	mov.w	r2, #0
 8008afa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008afe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008b02:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008b06:	4689      	mov	r9, r1
 8008b08:	4692      	mov	sl, r2
 8008b0a:	eb19 0005 	adds.w	r0, r9, r5
 8008b0e:	eb4a 0106 	adc.w	r1, sl, r6
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	461d      	mov	r5, r3
 8008b18:	f04f 0600 	mov.w	r6, #0
 8008b1c:	196b      	adds	r3, r5, r5
 8008b1e:	eb46 0406 	adc.w	r4, r6, r6
 8008b22:	461a      	mov	r2, r3
 8008b24:	4623      	mov	r3, r4
 8008b26:	f7f7 ff79 	bl	8000a1c <__aeabi_uldivmod>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	460c      	mov	r4, r1
 8008b2e:	461a      	mov	r2, r3
 8008b30:	4b78      	ldr	r3, [pc, #480]	; (8008d14 <UART_SetConfig+0x5c0>)
 8008b32:	fba3 1302 	umull	r1, r3, r3, r2
 8008b36:	095b      	lsrs	r3, r3, #5
 8008b38:	2164      	movs	r1, #100	; 0x64
 8008b3a:	fb01 f303 	mul.w	r3, r1, r3
 8008b3e:	1ad3      	subs	r3, r2, r3
 8008b40:	00db      	lsls	r3, r3, #3
 8008b42:	3332      	adds	r3, #50	; 0x32
 8008b44:	4a73      	ldr	r2, [pc, #460]	; (8008d14 <UART_SetConfig+0x5c0>)
 8008b46:	fba2 2303 	umull	r2, r3, r2, r3
 8008b4a:	095b      	lsrs	r3, r3, #5
 8008b4c:	f003 0207 	and.w	r2, r3, #7
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4442      	add	r2, r8
 8008b56:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008b58:	e1b3      	b.n	8008ec2 <UART_SetConfig+0x76e>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4a6e      	ldr	r2, [pc, #440]	; (8008d18 <UART_SetConfig+0x5c4>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d005      	beq.n	8008b70 <UART_SetConfig+0x41c>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a6c      	ldr	r2, [pc, #432]	; (8008d1c <UART_SetConfig+0x5c8>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	f040 80d8 	bne.w	8008d20 <UART_SetConfig+0x5cc>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008b70:	f7fe f8ca 	bl	8006d08 <HAL_RCC_GetPCLK2Freq>
 8008b74:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	469a      	mov	sl, r3
 8008b7a:	f04f 0b00 	mov.w	fp, #0
 8008b7e:	46d0      	mov	r8, sl
 8008b80:	46d9      	mov	r9, fp
 8008b82:	eb18 0308 	adds.w	r3, r8, r8
 8008b86:	eb49 0409 	adc.w	r4, r9, r9
 8008b8a:	4698      	mov	r8, r3
 8008b8c:	46a1      	mov	r9, r4
 8008b8e:	eb18 080a 	adds.w	r8, r8, sl
 8008b92:	eb49 090b 	adc.w	r9, r9, fp
 8008b96:	f04f 0100 	mov.w	r1, #0
 8008b9a:	f04f 0200 	mov.w	r2, #0
 8008b9e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008ba2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008ba6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008baa:	4688      	mov	r8, r1
 8008bac:	4691      	mov	r9, r2
 8008bae:	eb1a 0508 	adds.w	r5, sl, r8
 8008bb2:	eb4b 0609 	adc.w	r6, fp, r9
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	4619      	mov	r1, r3
 8008bbc:	f04f 0200 	mov.w	r2, #0
 8008bc0:	f04f 0300 	mov.w	r3, #0
 8008bc4:	f04f 0400 	mov.w	r4, #0
 8008bc8:	0094      	lsls	r4, r2, #2
 8008bca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008bce:	008b      	lsls	r3, r1, #2
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	4623      	mov	r3, r4
 8008bd4:	4628      	mov	r0, r5
 8008bd6:	4631      	mov	r1, r6
 8008bd8:	f7f7 ff20 	bl	8000a1c <__aeabi_uldivmod>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	460c      	mov	r4, r1
 8008be0:	461a      	mov	r2, r3
 8008be2:	4b4c      	ldr	r3, [pc, #304]	; (8008d14 <UART_SetConfig+0x5c0>)
 8008be4:	fba3 2302 	umull	r2, r3, r3, r2
 8008be8:	095b      	lsrs	r3, r3, #5
 8008bea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	469b      	mov	fp, r3
 8008bf2:	f04f 0c00 	mov.w	ip, #0
 8008bf6:	46d9      	mov	r9, fp
 8008bf8:	46e2      	mov	sl, ip
 8008bfa:	eb19 0309 	adds.w	r3, r9, r9
 8008bfe:	eb4a 040a 	adc.w	r4, sl, sl
 8008c02:	4699      	mov	r9, r3
 8008c04:	46a2      	mov	sl, r4
 8008c06:	eb19 090b 	adds.w	r9, r9, fp
 8008c0a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008c0e:	f04f 0100 	mov.w	r1, #0
 8008c12:	f04f 0200 	mov.w	r2, #0
 8008c16:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c1a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008c1e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008c22:	4689      	mov	r9, r1
 8008c24:	4692      	mov	sl, r2
 8008c26:	eb1b 0509 	adds.w	r5, fp, r9
 8008c2a:	eb4c 060a 	adc.w	r6, ip, sl
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	4619      	mov	r1, r3
 8008c34:	f04f 0200 	mov.w	r2, #0
 8008c38:	f04f 0300 	mov.w	r3, #0
 8008c3c:	f04f 0400 	mov.w	r4, #0
 8008c40:	0094      	lsls	r4, r2, #2
 8008c42:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008c46:	008b      	lsls	r3, r1, #2
 8008c48:	461a      	mov	r2, r3
 8008c4a:	4623      	mov	r3, r4
 8008c4c:	4628      	mov	r0, r5
 8008c4e:	4631      	mov	r1, r6
 8008c50:	f7f7 fee4 	bl	8000a1c <__aeabi_uldivmod>
 8008c54:	4603      	mov	r3, r0
 8008c56:	460c      	mov	r4, r1
 8008c58:	461a      	mov	r2, r3
 8008c5a:	4b2e      	ldr	r3, [pc, #184]	; (8008d14 <UART_SetConfig+0x5c0>)
 8008c5c:	fba3 1302 	umull	r1, r3, r3, r2
 8008c60:	095b      	lsrs	r3, r3, #5
 8008c62:	2164      	movs	r1, #100	; 0x64
 8008c64:	fb01 f303 	mul.w	r3, r1, r3
 8008c68:	1ad3      	subs	r3, r2, r3
 8008c6a:	011b      	lsls	r3, r3, #4
 8008c6c:	3332      	adds	r3, #50	; 0x32
 8008c6e:	4a29      	ldr	r2, [pc, #164]	; (8008d14 <UART_SetConfig+0x5c0>)
 8008c70:	fba2 2303 	umull	r2, r3, r2, r3
 8008c74:	095b      	lsrs	r3, r3, #5
 8008c76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c7a:	4498      	add	r8, r3
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	469b      	mov	fp, r3
 8008c80:	f04f 0c00 	mov.w	ip, #0
 8008c84:	46d9      	mov	r9, fp
 8008c86:	46e2      	mov	sl, ip
 8008c88:	eb19 0309 	adds.w	r3, r9, r9
 8008c8c:	eb4a 040a 	adc.w	r4, sl, sl
 8008c90:	4699      	mov	r9, r3
 8008c92:	46a2      	mov	sl, r4
 8008c94:	eb19 090b 	adds.w	r9, r9, fp
 8008c98:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008c9c:	f04f 0100 	mov.w	r1, #0
 8008ca0:	f04f 0200 	mov.w	r2, #0
 8008ca4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008ca8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008cac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008cb0:	4689      	mov	r9, r1
 8008cb2:	4692      	mov	sl, r2
 8008cb4:	eb1b 0509 	adds.w	r5, fp, r9
 8008cb8:	eb4c 060a 	adc.w	r6, ip, sl
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	f04f 0200 	mov.w	r2, #0
 8008cc6:	f04f 0300 	mov.w	r3, #0
 8008cca:	f04f 0400 	mov.w	r4, #0
 8008cce:	0094      	lsls	r4, r2, #2
 8008cd0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008cd4:	008b      	lsls	r3, r1, #2
 8008cd6:	461a      	mov	r2, r3
 8008cd8:	4623      	mov	r3, r4
 8008cda:	4628      	mov	r0, r5
 8008cdc:	4631      	mov	r1, r6
 8008cde:	f7f7 fe9d 	bl	8000a1c <__aeabi_uldivmod>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	460c      	mov	r4, r1
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	4b0a      	ldr	r3, [pc, #40]	; (8008d14 <UART_SetConfig+0x5c0>)
 8008cea:	fba3 1302 	umull	r1, r3, r3, r2
 8008cee:	095b      	lsrs	r3, r3, #5
 8008cf0:	2164      	movs	r1, #100	; 0x64
 8008cf2:	fb01 f303 	mul.w	r3, r1, r3
 8008cf6:	1ad3      	subs	r3, r2, r3
 8008cf8:	011b      	lsls	r3, r3, #4
 8008cfa:	3332      	adds	r3, #50	; 0x32
 8008cfc:	4a05      	ldr	r2, [pc, #20]	; (8008d14 <UART_SetConfig+0x5c0>)
 8008cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8008d02:	095b      	lsrs	r3, r3, #5
 8008d04:	f003 020f 	and.w	r2, r3, #15
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4442      	add	r2, r8
 8008d0e:	609a      	str	r2, [r3, #8]
 8008d10:	e0d7      	b.n	8008ec2 <UART_SetConfig+0x76e>
 8008d12:	bf00      	nop
 8008d14:	51eb851f 	.word	0x51eb851f
 8008d18:	40011000 	.word	0x40011000
 8008d1c:	40011400 	.word	0x40011400
      pclk = HAL_RCC_GetPCLK1Freq();
 8008d20:	f7fd ffde 	bl	8006ce0 <HAL_RCC_GetPCLK1Freq>
 8008d24:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	469a      	mov	sl, r3
 8008d2a:	f04f 0b00 	mov.w	fp, #0
 8008d2e:	46d0      	mov	r8, sl
 8008d30:	46d9      	mov	r9, fp
 8008d32:	eb18 0308 	adds.w	r3, r8, r8
 8008d36:	eb49 0409 	adc.w	r4, r9, r9
 8008d3a:	4698      	mov	r8, r3
 8008d3c:	46a1      	mov	r9, r4
 8008d3e:	eb18 080a 	adds.w	r8, r8, sl
 8008d42:	eb49 090b 	adc.w	r9, r9, fp
 8008d46:	f04f 0100 	mov.w	r1, #0
 8008d4a:	f04f 0200 	mov.w	r2, #0
 8008d4e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008d52:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008d56:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008d5a:	4688      	mov	r8, r1
 8008d5c:	4691      	mov	r9, r2
 8008d5e:	eb1a 0508 	adds.w	r5, sl, r8
 8008d62:	eb4b 0609 	adc.w	r6, fp, r9
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	f04f 0200 	mov.w	r2, #0
 8008d70:	f04f 0300 	mov.w	r3, #0
 8008d74:	f04f 0400 	mov.w	r4, #0
 8008d78:	0094      	lsls	r4, r2, #2
 8008d7a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008d7e:	008b      	lsls	r3, r1, #2
 8008d80:	461a      	mov	r2, r3
 8008d82:	4623      	mov	r3, r4
 8008d84:	4628      	mov	r0, r5
 8008d86:	4631      	mov	r1, r6
 8008d88:	f7f7 fe48 	bl	8000a1c <__aeabi_uldivmod>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	460c      	mov	r4, r1
 8008d90:	461a      	mov	r2, r3
 8008d92:	4b4e      	ldr	r3, [pc, #312]	; (8008ecc <UART_SetConfig+0x778>)
 8008d94:	fba3 2302 	umull	r2, r3, r3, r2
 8008d98:	095b      	lsrs	r3, r3, #5
 8008d9a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	469b      	mov	fp, r3
 8008da2:	f04f 0c00 	mov.w	ip, #0
 8008da6:	46d9      	mov	r9, fp
 8008da8:	46e2      	mov	sl, ip
 8008daa:	eb19 0309 	adds.w	r3, r9, r9
 8008dae:	eb4a 040a 	adc.w	r4, sl, sl
 8008db2:	4699      	mov	r9, r3
 8008db4:	46a2      	mov	sl, r4
 8008db6:	eb19 090b 	adds.w	r9, r9, fp
 8008dba:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008dbe:	f04f 0100 	mov.w	r1, #0
 8008dc2:	f04f 0200 	mov.w	r2, #0
 8008dc6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008dca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008dce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008dd2:	4689      	mov	r9, r1
 8008dd4:	4692      	mov	sl, r2
 8008dd6:	eb1b 0509 	adds.w	r5, fp, r9
 8008dda:	eb4c 060a 	adc.w	r6, ip, sl
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	4619      	mov	r1, r3
 8008de4:	f04f 0200 	mov.w	r2, #0
 8008de8:	f04f 0300 	mov.w	r3, #0
 8008dec:	f04f 0400 	mov.w	r4, #0
 8008df0:	0094      	lsls	r4, r2, #2
 8008df2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008df6:	008b      	lsls	r3, r1, #2
 8008df8:	461a      	mov	r2, r3
 8008dfa:	4623      	mov	r3, r4
 8008dfc:	4628      	mov	r0, r5
 8008dfe:	4631      	mov	r1, r6
 8008e00:	f7f7 fe0c 	bl	8000a1c <__aeabi_uldivmod>
 8008e04:	4603      	mov	r3, r0
 8008e06:	460c      	mov	r4, r1
 8008e08:	461a      	mov	r2, r3
 8008e0a:	4b30      	ldr	r3, [pc, #192]	; (8008ecc <UART_SetConfig+0x778>)
 8008e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8008e10:	095b      	lsrs	r3, r3, #5
 8008e12:	2164      	movs	r1, #100	; 0x64
 8008e14:	fb01 f303 	mul.w	r3, r1, r3
 8008e18:	1ad3      	subs	r3, r2, r3
 8008e1a:	011b      	lsls	r3, r3, #4
 8008e1c:	3332      	adds	r3, #50	; 0x32
 8008e1e:	4a2b      	ldr	r2, [pc, #172]	; (8008ecc <UART_SetConfig+0x778>)
 8008e20:	fba2 2303 	umull	r2, r3, r2, r3
 8008e24:	095b      	lsrs	r3, r3, #5
 8008e26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e2a:	4498      	add	r8, r3
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	469b      	mov	fp, r3
 8008e30:	f04f 0c00 	mov.w	ip, #0
 8008e34:	46d9      	mov	r9, fp
 8008e36:	46e2      	mov	sl, ip
 8008e38:	eb19 0309 	adds.w	r3, r9, r9
 8008e3c:	eb4a 040a 	adc.w	r4, sl, sl
 8008e40:	4699      	mov	r9, r3
 8008e42:	46a2      	mov	sl, r4
 8008e44:	eb19 090b 	adds.w	r9, r9, fp
 8008e48:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008e4c:	f04f 0100 	mov.w	r1, #0
 8008e50:	f04f 0200 	mov.w	r2, #0
 8008e54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008e58:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008e5c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008e60:	4689      	mov	r9, r1
 8008e62:	4692      	mov	sl, r2
 8008e64:	eb1b 0509 	adds.w	r5, fp, r9
 8008e68:	eb4c 060a 	adc.w	r6, ip, sl
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	4619      	mov	r1, r3
 8008e72:	f04f 0200 	mov.w	r2, #0
 8008e76:	f04f 0300 	mov.w	r3, #0
 8008e7a:	f04f 0400 	mov.w	r4, #0
 8008e7e:	0094      	lsls	r4, r2, #2
 8008e80:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008e84:	008b      	lsls	r3, r1, #2
 8008e86:	461a      	mov	r2, r3
 8008e88:	4623      	mov	r3, r4
 8008e8a:	4628      	mov	r0, r5
 8008e8c:	4631      	mov	r1, r6
 8008e8e:	f7f7 fdc5 	bl	8000a1c <__aeabi_uldivmod>
 8008e92:	4603      	mov	r3, r0
 8008e94:	460c      	mov	r4, r1
 8008e96:	461a      	mov	r2, r3
 8008e98:	4b0c      	ldr	r3, [pc, #48]	; (8008ecc <UART_SetConfig+0x778>)
 8008e9a:	fba3 1302 	umull	r1, r3, r3, r2
 8008e9e:	095b      	lsrs	r3, r3, #5
 8008ea0:	2164      	movs	r1, #100	; 0x64
 8008ea2:	fb01 f303 	mul.w	r3, r1, r3
 8008ea6:	1ad3      	subs	r3, r2, r3
 8008ea8:	011b      	lsls	r3, r3, #4
 8008eaa:	3332      	adds	r3, #50	; 0x32
 8008eac:	4a07      	ldr	r2, [pc, #28]	; (8008ecc <UART_SetConfig+0x778>)
 8008eae:	fba2 2303 	umull	r2, r3, r2, r3
 8008eb2:	095b      	lsrs	r3, r3, #5
 8008eb4:	f003 020f 	and.w	r2, r3, #15
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4442      	add	r2, r8
 8008ebe:	609a      	str	r2, [r3, #8]
}
 8008ec0:	e7ff      	b.n	8008ec2 <UART_SetConfig+0x76e>
 8008ec2:	bf00      	nop
 8008ec4:	3714      	adds	r7, #20
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ecc:	51eb851f 	.word	0x51eb851f

08008ed0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ed0:	b084      	sub	sp, #16
 8008ed2:	b580      	push	{r7, lr}
 8008ed4:	b084      	sub	sp, #16
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
 8008eda:	f107 001c 	add.w	r0, r7, #28
 8008ede:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d122      	bne.n	8008f2e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008efc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f00:	687a      	ldr	r2, [r7, #4]
 8008f02:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	68db      	ldr	r3, [r3, #12]
 8008f08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008f10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	d105      	bne.n	8008f22 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	68db      	ldr	r3, [r3, #12]
 8008f1a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 f94a 	bl	80091bc <USB_CoreReset>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	73fb      	strb	r3, [r7, #15]
 8008f2c:	e01a      	b.n	8008f64 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 f93e 	bl	80091bc <USB_CoreReset>
 8008f40:	4603      	mov	r3, r0
 8008f42:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008f44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d106      	bne.n	8008f58 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f4e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	639a      	str	r2, [r3, #56]	; 0x38
 8008f56:	e005      	b.n	8008f64 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d10b      	bne.n	8008f82 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	689b      	ldr	r3, [r3, #8]
 8008f6e:	f043 0206 	orr.w	r2, r3, #6
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	f043 0220 	orr.w	r2, r3, #32
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3710      	adds	r7, #16
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f8e:	b004      	add	sp, #16
 8008f90:	4770      	bx	lr

08008f92 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f92:	b480      	push	{r7}
 8008f94:	b083      	sub	sp, #12
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	689b      	ldr	r3, [r3, #8]
 8008f9e:	f043 0201 	orr.w	r2, r3, #1
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008fa6:	2300      	movs	r3, #0
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	370c      	adds	r7, #12
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr

08008fb4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b083      	sub	sp, #12
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	f023 0201 	bic.w	r2, r3, #1
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008fc8:	2300      	movs	r3, #0
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	370c      	adds	r7, #12
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr

08008fd6 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008fd6:	b580      	push	{r7, lr}
 8008fd8:	b082      	sub	sp, #8
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	6078      	str	r0, [r7, #4]
 8008fde:	460b      	mov	r3, r1
 8008fe0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	68db      	ldr	r3, [r3, #12]
 8008fe6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008fee:	78fb      	ldrb	r3, [r7, #3]
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d106      	bne.n	8009002 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	68db      	ldr	r3, [r3, #12]
 8008ff8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	60da      	str	r2, [r3, #12]
 8009000:	e00b      	b.n	800901a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009002:	78fb      	ldrb	r3, [r7, #3]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d106      	bne.n	8009016 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	68db      	ldr	r3, [r3, #12]
 800900c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	60da      	str	r2, [r3, #12]
 8009014:	e001      	b.n	800901a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009016:	2301      	movs	r3, #1
 8009018:	e003      	b.n	8009022 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800901a:	2032      	movs	r0, #50	; 0x32
 800901c:	f7f9 f8f6 	bl	800220c <HAL_Delay>

  return HAL_OK;
 8009020:	2300      	movs	r3, #0
}
 8009022:	4618      	mov	r0, r3
 8009024:	3708      	adds	r7, #8
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
	...

0800902c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800902c:	b480      	push	{r7}
 800902e:	b085      	sub	sp, #20
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009036:	2300      	movs	r3, #0
 8009038:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	019b      	lsls	r3, r3, #6
 800903e:	f043 0220 	orr.w	r2, r3, #32
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	3301      	adds	r3, #1
 800904a:	60fb      	str	r3, [r7, #12]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	4a09      	ldr	r2, [pc, #36]	; (8009074 <USB_FlushTxFifo+0x48>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d901      	bls.n	8009058 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009054:	2303      	movs	r3, #3
 8009056:	e006      	b.n	8009066 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	691b      	ldr	r3, [r3, #16]
 800905c:	f003 0320 	and.w	r3, r3, #32
 8009060:	2b20      	cmp	r3, #32
 8009062:	d0f0      	beq.n	8009046 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009064:	2300      	movs	r3, #0
}
 8009066:	4618      	mov	r0, r3
 8009068:	3714      	adds	r7, #20
 800906a:	46bd      	mov	sp, r7
 800906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009070:	4770      	bx	lr
 8009072:	bf00      	nop
 8009074:	00030d40 	.word	0x00030d40

08009078 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009078:	b480      	push	{r7}
 800907a:	b085      	sub	sp, #20
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009080:	2300      	movs	r3, #0
 8009082:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2210      	movs	r2, #16
 8009088:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	3301      	adds	r3, #1
 800908e:	60fb      	str	r3, [r7, #12]
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	4a09      	ldr	r2, [pc, #36]	; (80090b8 <USB_FlushRxFifo+0x40>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d901      	bls.n	800909c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009098:	2303      	movs	r3, #3
 800909a:	e006      	b.n	80090aa <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	691b      	ldr	r3, [r3, #16]
 80090a0:	f003 0310 	and.w	r3, r3, #16
 80090a4:	2b10      	cmp	r3, #16
 80090a6:	d0f0      	beq.n	800908a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80090a8:	2300      	movs	r3, #0
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3714      	adds	r7, #20
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr
 80090b6:	bf00      	nop
 80090b8:	00030d40 	.word	0x00030d40

080090bc <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80090bc:	b480      	push	{r7}
 80090be:	b089      	sub	sp, #36	; 0x24
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	60b9      	str	r1, [r7, #8]
 80090c6:	4611      	mov	r1, r2
 80090c8:	461a      	mov	r2, r3
 80090ca:	460b      	mov	r3, r1
 80090cc:	71fb      	strb	r3, [r7, #7]
 80090ce:	4613      	mov	r3, r2
 80090d0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80090da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d11a      	bne.n	8009118 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80090e2:	88bb      	ldrh	r3, [r7, #4]
 80090e4:	3303      	adds	r3, #3
 80090e6:	089b      	lsrs	r3, r3, #2
 80090e8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80090ea:	2300      	movs	r3, #0
 80090ec:	61bb      	str	r3, [r7, #24]
 80090ee:	e00f      	b.n	8009110 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80090f0:	79fb      	ldrb	r3, [r7, #7]
 80090f2:	031a      	lsls	r2, r3, #12
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	4413      	add	r3, r2
 80090f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090fc:	461a      	mov	r2, r3
 80090fe:	69fb      	ldr	r3, [r7, #28]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009104:	69fb      	ldr	r3, [r7, #28]
 8009106:	3304      	adds	r3, #4
 8009108:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800910a:	69bb      	ldr	r3, [r7, #24]
 800910c:	3301      	adds	r3, #1
 800910e:	61bb      	str	r3, [r7, #24]
 8009110:	69ba      	ldr	r2, [r7, #24]
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	429a      	cmp	r2, r3
 8009116:	d3eb      	bcc.n	80090f0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009118:	2300      	movs	r3, #0
}
 800911a:	4618      	mov	r0, r3
 800911c:	3724      	adds	r7, #36	; 0x24
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr

08009126 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009126:	b480      	push	{r7}
 8009128:	b089      	sub	sp, #36	; 0x24
 800912a:	af00      	add	r7, sp, #0
 800912c:	60f8      	str	r0, [r7, #12]
 800912e:	60b9      	str	r1, [r7, #8]
 8009130:	4613      	mov	r3, r2
 8009132:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800913c:	88fb      	ldrh	r3, [r7, #6]
 800913e:	3303      	adds	r3, #3
 8009140:	089b      	lsrs	r3, r3, #2
 8009142:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8009144:	2300      	movs	r3, #0
 8009146:	61bb      	str	r3, [r7, #24]
 8009148:	e00b      	b.n	8009162 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	69fb      	ldr	r3, [r7, #28]
 8009154:	601a      	str	r2, [r3, #0]
    pDest++;
 8009156:	69fb      	ldr	r3, [r7, #28]
 8009158:	3304      	adds	r3, #4
 800915a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800915c:	69bb      	ldr	r3, [r7, #24]
 800915e:	3301      	adds	r3, #1
 8009160:	61bb      	str	r3, [r7, #24]
 8009162:	69ba      	ldr	r2, [r7, #24]
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	429a      	cmp	r2, r3
 8009168:	d3ef      	bcc.n	800914a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800916a:	69fb      	ldr	r3, [r7, #28]
}
 800916c:	4618      	mov	r0, r3
 800916e:	3724      	adds	r7, #36	; 0x24
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009178:	b480      	push	{r7}
 800917a:	b085      	sub	sp, #20
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	695b      	ldr	r3, [r3, #20]
 8009184:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	699b      	ldr	r3, [r3, #24]
 800918a:	68fa      	ldr	r2, [r7, #12]
 800918c:	4013      	ands	r3, r2
 800918e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009190:	68fb      	ldr	r3, [r7, #12]
}
 8009192:	4618      	mov	r0, r3
 8009194:	3714      	adds	r7, #20
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr

0800919e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800919e:	b480      	push	{r7}
 80091a0:	b083      	sub	sp, #12
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	695b      	ldr	r3, [r3, #20]
 80091aa:	f003 0301 	and.w	r3, r3, #1
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	370c      	adds	r7, #12
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr
	...

080091bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80091bc:	b480      	push	{r7}
 80091be:	b085      	sub	sp, #20
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80091c4:	2300      	movs	r3, #0
 80091c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	3301      	adds	r3, #1
 80091cc:	60fb      	str	r3, [r7, #12]
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	4a13      	ldr	r2, [pc, #76]	; (8009220 <USB_CoreReset+0x64>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d901      	bls.n	80091da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80091d6:	2303      	movs	r3, #3
 80091d8:	e01b      	b.n	8009212 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	691b      	ldr	r3, [r3, #16]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	daf2      	bge.n	80091c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80091e2:	2300      	movs	r3, #0
 80091e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	691b      	ldr	r3, [r3, #16]
 80091ea:	f043 0201 	orr.w	r2, r3, #1
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	3301      	adds	r3, #1
 80091f6:	60fb      	str	r3, [r7, #12]
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	4a09      	ldr	r2, [pc, #36]	; (8009220 <USB_CoreReset+0x64>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d901      	bls.n	8009204 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009200:	2303      	movs	r3, #3
 8009202:	e006      	b.n	8009212 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	691b      	ldr	r3, [r3, #16]
 8009208:	f003 0301 	and.w	r3, r3, #1
 800920c:	2b01      	cmp	r3, #1
 800920e:	d0f0      	beq.n	80091f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8009210:	2300      	movs	r3, #0
}
 8009212:	4618      	mov	r0, r3
 8009214:	3714      	adds	r7, #20
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr
 800921e:	bf00      	nop
 8009220:	00030d40 	.word	0x00030d40

08009224 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009224:	b084      	sub	sp, #16
 8009226:	b580      	push	{r7, lr}
 8009228:	b084      	sub	sp, #16
 800922a:	af00      	add	r7, sp, #0
 800922c:	6078      	str	r0, [r7, #4]
 800922e:	f107 001c 	add.w	r0, r7, #28
 8009232:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009240:	461a      	mov	r2, r3
 8009242:	2300      	movs	r3, #0
 8009244:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800924a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009256:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009262:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800926e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009272:	2b00      	cmp	r3, #0
 8009274:	d018      	beq.n	80092a8 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009278:	2b01      	cmp	r3, #1
 800927a:	d10a      	bne.n	8009292 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	68ba      	ldr	r2, [r7, #8]
 8009286:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800928a:	f043 0304 	orr.w	r3, r3, #4
 800928e:	6013      	str	r3, [r2, #0]
 8009290:	e014      	b.n	80092bc <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	68ba      	ldr	r2, [r7, #8]
 800929c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80092a0:	f023 0304 	bic.w	r3, r3, #4
 80092a4:	6013      	str	r3, [r2, #0]
 80092a6:	e009      	b.n	80092bc <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	68ba      	ldr	r2, [r7, #8]
 80092b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80092b6:	f023 0304 	bic.w	r3, r3, #4
 80092ba:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80092bc:	2110      	movs	r1, #16
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f7ff feb4 	bl	800902c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f7ff fed7 	bl	8009078 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80092ca:	2300      	movs	r3, #0
 80092cc:	60fb      	str	r3, [r7, #12]
 80092ce:	e015      	b.n	80092fc <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	015a      	lsls	r2, r3, #5
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	4413      	add	r3, r2
 80092d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092dc:	461a      	mov	r2, r3
 80092de:	f04f 33ff 	mov.w	r3, #4294967295
 80092e2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	015a      	lsls	r2, r3, #5
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	4413      	add	r3, r2
 80092ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092f0:	461a      	mov	r2, r3
 80092f2:	2300      	movs	r3, #0
 80092f4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	3301      	adds	r3, #1
 80092fa:	60fb      	str	r3, [r7, #12]
 80092fc:	6a3b      	ldr	r3, [r7, #32]
 80092fe:	68fa      	ldr	r2, [r7, #12]
 8009300:	429a      	cmp	r2, r3
 8009302:	d3e5      	bcc.n	80092d0 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8009304:	2101      	movs	r1, #1
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f000 f8ac 	bl	8009464 <USB_DriveVbus>

  HAL_Delay(200U);
 800930c:	20c8      	movs	r0, #200	; 0xc8
 800930e:	f7f8 ff7d 	bl	800220c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2200      	movs	r2, #0
 8009316:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f04f 32ff 	mov.w	r2, #4294967295
 800931e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009328:	2b00      	cmp	r3, #0
 800932a:	d00b      	beq.n	8009344 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009332:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	4a14      	ldr	r2, [pc, #80]	; (8009388 <USB_HostInit+0x164>)
 8009338:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	4a13      	ldr	r2, [pc, #76]	; (800938c <USB_HostInit+0x168>)
 800933e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8009342:	e009      	b.n	8009358 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2280      	movs	r2, #128	; 0x80
 8009348:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	4a10      	ldr	r2, [pc, #64]	; (8009390 <USB_HostInit+0x16c>)
 800934e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	4a10      	ldr	r2, [pc, #64]	; (8009394 <USB_HostInit+0x170>)
 8009354:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800935a:	2b00      	cmp	r3, #0
 800935c:	d105      	bne.n	800936a <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	699b      	ldr	r3, [r3, #24]
 8009362:	f043 0210 	orr.w	r2, r3, #16
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	699a      	ldr	r2, [r3, #24]
 800936e:	4b0a      	ldr	r3, [pc, #40]	; (8009398 <USB_HostInit+0x174>)
 8009370:	4313      	orrs	r3, r2
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8009376:	2300      	movs	r3, #0
}
 8009378:	4618      	mov	r0, r3
 800937a:	3710      	adds	r7, #16
 800937c:	46bd      	mov	sp, r7
 800937e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009382:	b004      	add	sp, #16
 8009384:	4770      	bx	lr
 8009386:	bf00      	nop
 8009388:	01000200 	.word	0x01000200
 800938c:	00e00300 	.word	0x00e00300
 8009390:	00600080 	.word	0x00600080
 8009394:	004000e0 	.word	0x004000e0
 8009398:	a3200008 	.word	0xa3200008

0800939c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800939c:	b480      	push	{r7}
 800939e:	b085      	sub	sp, #20
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	460b      	mov	r3, r1
 80093a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	68fa      	ldr	r2, [r7, #12]
 80093b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80093ba:	f023 0303 	bic.w	r3, r3, #3
 80093be:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093c6:	681a      	ldr	r2, [r3, #0]
 80093c8:	78fb      	ldrb	r3, [r7, #3]
 80093ca:	f003 0303 	and.w	r3, r3, #3
 80093ce:	68f9      	ldr	r1, [r7, #12]
 80093d0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80093d4:	4313      	orrs	r3, r2
 80093d6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80093d8:	78fb      	ldrb	r3, [r7, #3]
 80093da:	2b01      	cmp	r3, #1
 80093dc:	d107      	bne.n	80093ee <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093e4:	461a      	mov	r2, r3
 80093e6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80093ea:	6053      	str	r3, [r2, #4]
 80093ec:	e009      	b.n	8009402 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80093ee:	78fb      	ldrb	r3, [r7, #3]
 80093f0:	2b02      	cmp	r3, #2
 80093f2:	d106      	bne.n	8009402 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093fa:	461a      	mov	r2, r3
 80093fc:	f241 7370 	movw	r3, #6000	; 0x1770
 8009400:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8009402:	2300      	movs	r3, #0
}
 8009404:	4618      	mov	r0, r3
 8009406:	3714      	adds	r7, #20
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b084      	sub	sp, #16
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800941c:	2300      	movs	r3, #0
 800941e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009430:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	68fa      	ldr	r2, [r7, #12]
 8009436:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800943a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800943e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009440:	2064      	movs	r0, #100	; 0x64
 8009442:	f7f8 fee3 	bl	800220c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	68fa      	ldr	r2, [r7, #12]
 800944a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800944e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009452:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009454:	200a      	movs	r0, #10
 8009456:	f7f8 fed9 	bl	800220c <HAL_Delay>

  return HAL_OK;
 800945a:	2300      	movs	r3, #0
}
 800945c:	4618      	mov	r0, r3
 800945e:	3710      	adds	r7, #16
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009464:	b480      	push	{r7}
 8009466:	b085      	sub	sp, #20
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	460b      	mov	r3, r1
 800946e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009474:	2300      	movs	r3, #0
 8009476:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009488:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009490:	2b00      	cmp	r3, #0
 8009492:	d109      	bne.n	80094a8 <USB_DriveVbus+0x44>
 8009494:	78fb      	ldrb	r3, [r7, #3]
 8009496:	2b01      	cmp	r3, #1
 8009498:	d106      	bne.n	80094a8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	68fa      	ldr	r2, [r7, #12]
 800949e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80094a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80094a6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80094ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094b2:	d109      	bne.n	80094c8 <USB_DriveVbus+0x64>
 80094b4:	78fb      	ldrb	r3, [r7, #3]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d106      	bne.n	80094c8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	68fa      	ldr	r2, [r7, #12]
 80094be:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80094c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094c6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80094c8:	2300      	movs	r3, #0
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3714      	adds	r7, #20
 80094ce:	46bd      	mov	sp, r7
 80094d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d4:	4770      	bx	lr

080094d6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80094d6:	b480      	push	{r7}
 80094d8:	b085      	sub	sp, #20
 80094da:	af00      	add	r7, sp, #0
 80094dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80094e2:	2300      	movs	r3, #0
 80094e4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	0c5b      	lsrs	r3, r3, #17
 80094f4:	f003 0303 	and.w	r3, r3, #3
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3714      	adds	r7, #20
 80094fc:	46bd      	mov	sp, r7
 80094fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009502:	4770      	bx	lr

08009504 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8009504:	b480      	push	{r7}
 8009506:	b085      	sub	sp, #20
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009516:	689b      	ldr	r3, [r3, #8]
 8009518:	b29b      	uxth	r3, r3
}
 800951a:	4618      	mov	r0, r3
 800951c:	3714      	adds	r7, #20
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr
	...

08009528 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8009528:	b480      	push	{r7}
 800952a:	b087      	sub	sp, #28
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	4608      	mov	r0, r1
 8009532:	4611      	mov	r1, r2
 8009534:	461a      	mov	r2, r3
 8009536:	4603      	mov	r3, r0
 8009538:	70fb      	strb	r3, [r7, #3]
 800953a:	460b      	mov	r3, r1
 800953c:	70bb      	strb	r3, [r7, #2]
 800953e:	4613      	mov	r3, r2
 8009540:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009542:	2300      	movs	r3, #0
 8009544:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800954a:	78fb      	ldrb	r3, [r7, #3]
 800954c:	015a      	lsls	r2, r3, #5
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	4413      	add	r3, r2
 8009552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009556:	461a      	mov	r2, r3
 8009558:	f04f 33ff 	mov.w	r3, #4294967295
 800955c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800955e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009562:	2b03      	cmp	r3, #3
 8009564:	d87e      	bhi.n	8009664 <USB_HC_Init+0x13c>
 8009566:	a201      	add	r2, pc, #4	; (adr r2, 800956c <USB_HC_Init+0x44>)
 8009568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800956c:	0800957d 	.word	0x0800957d
 8009570:	08009627 	.word	0x08009627
 8009574:	0800957d 	.word	0x0800957d
 8009578:	080095e9 	.word	0x080095e9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800957c:	78fb      	ldrb	r3, [r7, #3]
 800957e:	015a      	lsls	r2, r3, #5
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	4413      	add	r3, r2
 8009584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009588:	461a      	mov	r2, r3
 800958a:	f240 439d 	movw	r3, #1181	; 0x49d
 800958e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009590:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009594:	2b00      	cmp	r3, #0
 8009596:	da10      	bge.n	80095ba <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009598:	78fb      	ldrb	r3, [r7, #3]
 800959a:	015a      	lsls	r2, r3, #5
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	4413      	add	r3, r2
 80095a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095a4:	68db      	ldr	r3, [r3, #12]
 80095a6:	78fa      	ldrb	r2, [r7, #3]
 80095a8:	0151      	lsls	r1, r2, #5
 80095aa:	68ba      	ldr	r2, [r7, #8]
 80095ac:	440a      	add	r2, r1
 80095ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80095b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095b6:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80095b8:	e057      	b.n	800966a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d051      	beq.n	800966a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80095c6:	78fb      	ldrb	r3, [r7, #3]
 80095c8:	015a      	lsls	r2, r3, #5
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	4413      	add	r3, r2
 80095ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095d2:	68db      	ldr	r3, [r3, #12]
 80095d4:	78fa      	ldrb	r2, [r7, #3]
 80095d6:	0151      	lsls	r1, r2, #5
 80095d8:	68ba      	ldr	r2, [r7, #8]
 80095da:	440a      	add	r2, r1
 80095dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80095e0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80095e4:	60d3      	str	r3, [r2, #12]
      break;
 80095e6:	e040      	b.n	800966a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80095e8:	78fb      	ldrb	r3, [r7, #3]
 80095ea:	015a      	lsls	r2, r3, #5
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	4413      	add	r3, r2
 80095f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095f4:	461a      	mov	r2, r3
 80095f6:	f240 639d 	movw	r3, #1693	; 0x69d
 80095fa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80095fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009600:	2b00      	cmp	r3, #0
 8009602:	da34      	bge.n	800966e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009604:	78fb      	ldrb	r3, [r7, #3]
 8009606:	015a      	lsls	r2, r3, #5
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	4413      	add	r3, r2
 800960c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009610:	68db      	ldr	r3, [r3, #12]
 8009612:	78fa      	ldrb	r2, [r7, #3]
 8009614:	0151      	lsls	r1, r2, #5
 8009616:	68ba      	ldr	r2, [r7, #8]
 8009618:	440a      	add	r2, r1
 800961a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800961e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009622:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009624:	e023      	b.n	800966e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009626:	78fb      	ldrb	r3, [r7, #3]
 8009628:	015a      	lsls	r2, r3, #5
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	4413      	add	r3, r2
 800962e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009632:	461a      	mov	r2, r3
 8009634:	f240 2325 	movw	r3, #549	; 0x225
 8009638:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800963a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800963e:	2b00      	cmp	r3, #0
 8009640:	da17      	bge.n	8009672 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009642:	78fb      	ldrb	r3, [r7, #3]
 8009644:	015a      	lsls	r2, r3, #5
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	4413      	add	r3, r2
 800964a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800964e:	68db      	ldr	r3, [r3, #12]
 8009650:	78fa      	ldrb	r2, [r7, #3]
 8009652:	0151      	lsls	r1, r2, #5
 8009654:	68ba      	ldr	r2, [r7, #8]
 8009656:	440a      	add	r2, r1
 8009658:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800965c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8009660:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009662:	e006      	b.n	8009672 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8009664:	2301      	movs	r3, #1
 8009666:	75fb      	strb	r3, [r7, #23]
      break;
 8009668:	e004      	b.n	8009674 <USB_HC_Init+0x14c>
      break;
 800966a:	bf00      	nop
 800966c:	e002      	b.n	8009674 <USB_HC_Init+0x14c>
      break;
 800966e:	bf00      	nop
 8009670:	e000      	b.n	8009674 <USB_HC_Init+0x14c>
      break;
 8009672:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800967a:	699a      	ldr	r2, [r3, #24]
 800967c:	78fb      	ldrb	r3, [r7, #3]
 800967e:	f003 030f 	and.w	r3, r3, #15
 8009682:	2101      	movs	r1, #1
 8009684:	fa01 f303 	lsl.w	r3, r1, r3
 8009688:	68b9      	ldr	r1, [r7, #8]
 800968a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800968e:	4313      	orrs	r3, r2
 8009690:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	699b      	ldr	r3, [r3, #24]
 8009696:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800969e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	da03      	bge.n	80096ae <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80096a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096aa:	613b      	str	r3, [r7, #16]
 80096ac:	e001      	b.n	80096b2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80096ae:	2300      	movs	r3, #0
 80096b0:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80096b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80096b6:	2b02      	cmp	r3, #2
 80096b8:	d103      	bne.n	80096c2 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80096ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80096be:	60fb      	str	r3, [r7, #12]
 80096c0:	e001      	b.n	80096c6 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80096c2:	2300      	movs	r3, #0
 80096c4:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80096c6:	787b      	ldrb	r3, [r7, #1]
 80096c8:	059b      	lsls	r3, r3, #22
 80096ca:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80096ce:	78bb      	ldrb	r3, [r7, #2]
 80096d0:	02db      	lsls	r3, r3, #11
 80096d2:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80096d6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80096d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80096dc:	049b      	lsls	r3, r3, #18
 80096de:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80096e2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80096e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80096e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80096ea:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80096f0:	78fb      	ldrb	r3, [r7, #3]
 80096f2:	0159      	lsls	r1, r3, #5
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	440b      	add	r3, r1
 80096f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096fc:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009702:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8009704:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009708:	2b03      	cmp	r3, #3
 800970a:	d10f      	bne.n	800972c <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800970c:	78fb      	ldrb	r3, [r7, #3]
 800970e:	015a      	lsls	r2, r3, #5
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	4413      	add	r3, r2
 8009714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	78fa      	ldrb	r2, [r7, #3]
 800971c:	0151      	lsls	r1, r2, #5
 800971e:	68ba      	ldr	r2, [r7, #8]
 8009720:	440a      	add	r2, r1
 8009722:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009726:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800972a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800972c:	7dfb      	ldrb	r3, [r7, #23]
}
 800972e:	4618      	mov	r0, r3
 8009730:	371c      	adds	r7, #28
 8009732:	46bd      	mov	sp, r7
 8009734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009738:	4770      	bx	lr
 800973a:	bf00      	nop

0800973c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b08c      	sub	sp, #48	; 0x30
 8009740:	af02      	add	r7, sp, #8
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	60b9      	str	r1, [r7, #8]
 8009746:	4613      	mov	r3, r2
 8009748:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	785b      	ldrb	r3, [r3, #1]
 8009752:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009754:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009758:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800975e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009762:	2b00      	cmp	r3, #0
 8009764:	d028      	beq.n	80097b8 <USB_HC_StartXfer+0x7c>
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	791b      	ldrb	r3, [r3, #4]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d124      	bne.n	80097b8 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800976e:	79fb      	ldrb	r3, [r7, #7]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d10b      	bne.n	800978c <USB_HC_StartXfer+0x50>
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	795b      	ldrb	r3, [r3, #5]
 8009778:	2b01      	cmp	r3, #1
 800977a:	d107      	bne.n	800978c <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	785b      	ldrb	r3, [r3, #1]
 8009780:	4619      	mov	r1, r3
 8009782:	68f8      	ldr	r0, [r7, #12]
 8009784:	f000 fa2e 	bl	8009be4 <USB_DoPing>
      return HAL_OK;
 8009788:	2300      	movs	r3, #0
 800978a:	e112      	b.n	80099b2 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 800978c:	79fb      	ldrb	r3, [r7, #7]
 800978e:	2b01      	cmp	r3, #1
 8009790:	d112      	bne.n	80097b8 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8009792:	69fb      	ldr	r3, [r7, #28]
 8009794:	015a      	lsls	r2, r3, #5
 8009796:	6a3b      	ldr	r3, [r7, #32]
 8009798:	4413      	add	r3, r2
 800979a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800979e:	68db      	ldr	r3, [r3, #12]
 80097a0:	69fa      	ldr	r2, [r7, #28]
 80097a2:	0151      	lsls	r1, r2, #5
 80097a4:	6a3a      	ldr	r2, [r7, #32]
 80097a6:	440a      	add	r2, r1
 80097a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80097ac:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80097b0:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	2200      	movs	r2, #0
 80097b6:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	691b      	ldr	r3, [r3, #16]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d018      	beq.n	80097f2 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	691b      	ldr	r3, [r3, #16]
 80097c4:	68ba      	ldr	r2, [r7, #8]
 80097c6:	8912      	ldrh	r2, [r2, #8]
 80097c8:	4413      	add	r3, r2
 80097ca:	3b01      	subs	r3, #1
 80097cc:	68ba      	ldr	r2, [r7, #8]
 80097ce:	8912      	ldrh	r2, [r2, #8]
 80097d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80097d4:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80097d6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80097d8:	8b7b      	ldrh	r3, [r7, #26]
 80097da:	429a      	cmp	r2, r3
 80097dc:	d90b      	bls.n	80097f6 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 80097de:	8b7b      	ldrh	r3, [r7, #26]
 80097e0:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80097e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80097e4:	68ba      	ldr	r2, [r7, #8]
 80097e6:	8912      	ldrh	r2, [r2, #8]
 80097e8:	fb02 f203 	mul.w	r2, r2, r3
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	611a      	str	r2, [r3, #16]
 80097f0:	e001      	b.n	80097f6 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 80097f2:	2301      	movs	r3, #1
 80097f4:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	78db      	ldrb	r3, [r3, #3]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d006      	beq.n	800980c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80097fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009800:	68ba      	ldr	r2, [r7, #8]
 8009802:	8912      	ldrh	r2, [r2, #8]
 8009804:	fb02 f203 	mul.w	r2, r2, r3
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	691b      	ldr	r3, [r3, #16]
 8009810:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009814:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009816:	04d9      	lsls	r1, r3, #19
 8009818:	4b68      	ldr	r3, [pc, #416]	; (80099bc <USB_HC_StartXfer+0x280>)
 800981a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800981c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	7a9b      	ldrb	r3, [r3, #10]
 8009822:	075b      	lsls	r3, r3, #29
 8009824:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8009828:	69f9      	ldr	r1, [r7, #28]
 800982a:	0148      	lsls	r0, r1, #5
 800982c:	6a39      	ldr	r1, [r7, #32]
 800982e:	4401      	add	r1, r0
 8009830:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009834:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8009836:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009838:	79fb      	ldrb	r3, [r7, #7]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d009      	beq.n	8009852 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	68d9      	ldr	r1, [r3, #12]
 8009842:	69fb      	ldr	r3, [r7, #28]
 8009844:	015a      	lsls	r2, r3, #5
 8009846:	6a3b      	ldr	r3, [r7, #32]
 8009848:	4413      	add	r3, r2
 800984a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800984e:	460a      	mov	r2, r1
 8009850:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009852:	6a3b      	ldr	r3, [r7, #32]
 8009854:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009858:	689b      	ldr	r3, [r3, #8]
 800985a:	f003 0301 	and.w	r3, r3, #1
 800985e:	2b00      	cmp	r3, #0
 8009860:	bf0c      	ite	eq
 8009862:	2301      	moveq	r3, #1
 8009864:	2300      	movne	r3, #0
 8009866:	b2db      	uxtb	r3, r3
 8009868:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800986a:	69fb      	ldr	r3, [r7, #28]
 800986c:	015a      	lsls	r2, r3, #5
 800986e:	6a3b      	ldr	r3, [r7, #32]
 8009870:	4413      	add	r3, r2
 8009872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	69fa      	ldr	r2, [r7, #28]
 800987a:	0151      	lsls	r1, r2, #5
 800987c:	6a3a      	ldr	r2, [r7, #32]
 800987e:	440a      	add	r2, r1
 8009880:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009884:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009888:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800988a:	69fb      	ldr	r3, [r7, #28]
 800988c:	015a      	lsls	r2, r3, #5
 800988e:	6a3b      	ldr	r3, [r7, #32]
 8009890:	4413      	add	r3, r2
 8009892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009896:	681a      	ldr	r2, [r3, #0]
 8009898:	7e7b      	ldrb	r3, [r7, #25]
 800989a:	075b      	lsls	r3, r3, #29
 800989c:	69f9      	ldr	r1, [r7, #28]
 800989e:	0148      	lsls	r0, r1, #5
 80098a0:	6a39      	ldr	r1, [r7, #32]
 80098a2:	4401      	add	r1, r0
 80098a4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80098a8:	4313      	orrs	r3, r2
 80098aa:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80098ac:	69fb      	ldr	r3, [r7, #28]
 80098ae:	015a      	lsls	r2, r3, #5
 80098b0:	6a3b      	ldr	r3, [r7, #32]
 80098b2:	4413      	add	r3, r2
 80098b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a41      	ldr	r2, [pc, #260]	; (80099c0 <USB_HC_StartXfer+0x284>)
 80098bc:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80098be:	4b40      	ldr	r3, [pc, #256]	; (80099c0 <USB_HC_StartXfer+0x284>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80098c6:	4a3e      	ldr	r2, [pc, #248]	; (80099c0 <USB_HC_StartXfer+0x284>)
 80098c8:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	78db      	ldrb	r3, [r3, #3]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d006      	beq.n	80098e0 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80098d2:	4b3b      	ldr	r3, [pc, #236]	; (80099c0 <USB_HC_StartXfer+0x284>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098da:	4a39      	ldr	r2, [pc, #228]	; (80099c0 <USB_HC_StartXfer+0x284>)
 80098dc:	6013      	str	r3, [r2, #0]
 80098de:	e005      	b.n	80098ec <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80098e0:	4b37      	ldr	r3, [pc, #220]	; (80099c0 <USB_HC_StartXfer+0x284>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80098e8:	4a35      	ldr	r2, [pc, #212]	; (80099c0 <USB_HC_StartXfer+0x284>)
 80098ea:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80098ec:	4b34      	ldr	r3, [pc, #208]	; (80099c0 <USB_HC_StartXfer+0x284>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80098f4:	4a32      	ldr	r2, [pc, #200]	; (80099c0 <USB_HC_StartXfer+0x284>)
 80098f6:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80098f8:	69fb      	ldr	r3, [r7, #28]
 80098fa:	015a      	lsls	r2, r3, #5
 80098fc:	6a3b      	ldr	r3, [r7, #32]
 80098fe:	4413      	add	r3, r2
 8009900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009904:	461a      	mov	r2, r3
 8009906:	4b2e      	ldr	r3, [pc, #184]	; (80099c0 <USB_HC_StartXfer+0x284>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 800990c:	79fb      	ldrb	r3, [r7, #7]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d14e      	bne.n	80099b0 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	78db      	ldrb	r3, [r3, #3]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d14a      	bne.n	80099b0 <USB_HC_StartXfer+0x274>
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	691b      	ldr	r3, [r3, #16]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d046      	beq.n	80099b0 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	79db      	ldrb	r3, [r3, #7]
 8009926:	2b03      	cmp	r3, #3
 8009928:	d830      	bhi.n	800998c <USB_HC_StartXfer+0x250>
 800992a:	a201      	add	r2, pc, #4	; (adr r2, 8009930 <USB_HC_StartXfer+0x1f4>)
 800992c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009930:	08009941 	.word	0x08009941
 8009934:	08009965 	.word	0x08009965
 8009938:	08009941 	.word	0x08009941
 800993c:	08009965 	.word	0x08009965
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	691b      	ldr	r3, [r3, #16]
 8009944:	3303      	adds	r3, #3
 8009946:	089b      	lsrs	r3, r3, #2
 8009948:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800994a:	8afa      	ldrh	r2, [r7, #22]
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009950:	b29b      	uxth	r3, r3
 8009952:	429a      	cmp	r2, r3
 8009954:	d91c      	bls.n	8009990 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	699b      	ldr	r3, [r3, #24]
 800995a:	f043 0220 	orr.w	r2, r3, #32
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	619a      	str	r2, [r3, #24]
          }
          break;
 8009962:	e015      	b.n	8009990 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	691b      	ldr	r3, [r3, #16]
 8009968:	3303      	adds	r3, #3
 800996a:	089b      	lsrs	r3, r3, #2
 800996c:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800996e:	8afa      	ldrh	r2, [r7, #22]
 8009970:	6a3b      	ldr	r3, [r7, #32]
 8009972:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009976:	691b      	ldr	r3, [r3, #16]
 8009978:	b29b      	uxth	r3, r3
 800997a:	429a      	cmp	r2, r3
 800997c:	d90a      	bls.n	8009994 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	699b      	ldr	r3, [r3, #24]
 8009982:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	619a      	str	r2, [r3, #24]
          }
          break;
 800998a:	e003      	b.n	8009994 <USB_HC_StartXfer+0x258>

        default:
          break;
 800998c:	bf00      	nop
 800998e:	e002      	b.n	8009996 <USB_HC_StartXfer+0x25a>
          break;
 8009990:	bf00      	nop
 8009992:	e000      	b.n	8009996 <USB_HC_StartXfer+0x25a>
          break;
 8009994:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	68d9      	ldr	r1, [r3, #12]
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	785a      	ldrb	r2, [r3, #1]
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	691b      	ldr	r3, [r3, #16]
 80099a2:	b298      	uxth	r0, r3
 80099a4:	2300      	movs	r3, #0
 80099a6:	9300      	str	r3, [sp, #0]
 80099a8:	4603      	mov	r3, r0
 80099aa:	68f8      	ldr	r0, [r7, #12]
 80099ac:	f7ff fb86 	bl	80090bc <USB_WritePacket>
    }
  }

  return HAL_OK;
 80099b0:	2300      	movs	r3, #0
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3728      	adds	r7, #40	; 0x28
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}
 80099ba:	bf00      	nop
 80099bc:	1ff80000 	.word	0x1ff80000
 80099c0:	200000fc 	.word	0x200000fc

080099c4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b085      	sub	sp, #20
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80099d6:	695b      	ldr	r3, [r3, #20]
 80099d8:	b29b      	uxth	r3, r3
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3714      	adds	r7, #20
 80099de:	46bd      	mov	sp, r7
 80099e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e4:	4770      	bx	lr

080099e6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80099e6:	b480      	push	{r7}
 80099e8:	b087      	sub	sp, #28
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
 80099ee:	460b      	mov	r3, r1
 80099f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80099f6:	78fb      	ldrb	r3, [r7, #3]
 80099f8:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80099fa:	2300      	movs	r3, #0
 80099fc:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	015a      	lsls	r2, r3, #5
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	4413      	add	r3, r2
 8009a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	0c9b      	lsrs	r3, r3, #18
 8009a0e:	f003 0303 	and.w	r3, r3, #3
 8009a12:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d002      	beq.n	8009a20 <USB_HC_Halt+0x3a>
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	2b02      	cmp	r3, #2
 8009a1e:	d16c      	bne.n	8009afa <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	015a      	lsls	r2, r3, #5
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	4413      	add	r3, r2
 8009a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	68fa      	ldr	r2, [r7, #12]
 8009a30:	0151      	lsls	r1, r2, #5
 8009a32:	693a      	ldr	r2, [r7, #16]
 8009a34:	440a      	add	r2, r1
 8009a36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a3e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d143      	bne.n	8009ad4 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	015a      	lsls	r2, r3, #5
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	4413      	add	r3, r2
 8009a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	68fa      	ldr	r2, [r7, #12]
 8009a5c:	0151      	lsls	r1, r2, #5
 8009a5e:	693a      	ldr	r2, [r7, #16]
 8009a60:	440a      	add	r2, r1
 8009a62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009a6a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	015a      	lsls	r2, r3, #5
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	4413      	add	r3, r2
 8009a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	68fa      	ldr	r2, [r7, #12]
 8009a7c:	0151      	lsls	r1, r2, #5
 8009a7e:	693a      	ldr	r2, [r7, #16]
 8009a80:	440a      	add	r2, r1
 8009a82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009a8a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	015a      	lsls	r2, r3, #5
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	4413      	add	r3, r2
 8009a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	68fa      	ldr	r2, [r7, #12]
 8009a9c:	0151      	lsls	r1, r2, #5
 8009a9e:	693a      	ldr	r2, [r7, #16]
 8009aa0:	440a      	add	r2, r1
 8009aa2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009aa6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009aaa:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	3301      	adds	r3, #1
 8009ab0:	617b      	str	r3, [r7, #20]
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ab8:	d81d      	bhi.n	8009af6 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	015a      	lsls	r2, r3, #5
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	4413      	add	r3, r2
 8009ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009acc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ad0:	d0ec      	beq.n	8009aac <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009ad2:	e080      	b.n	8009bd6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	015a      	lsls	r2, r3, #5
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	4413      	add	r3, r2
 8009adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	68fa      	ldr	r2, [r7, #12]
 8009ae4:	0151      	lsls	r1, r2, #5
 8009ae6:	693a      	ldr	r2, [r7, #16]
 8009ae8:	440a      	add	r2, r1
 8009aea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009af2:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009af4:	e06f      	b.n	8009bd6 <USB_HC_Halt+0x1f0>
          break;
 8009af6:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009af8:	e06d      	b.n	8009bd6 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	015a      	lsls	r2, r3, #5
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	4413      	add	r3, r2
 8009b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	68fa      	ldr	r2, [r7, #12]
 8009b0a:	0151      	lsls	r1, r2, #5
 8009b0c:	693a      	ldr	r2, [r7, #16]
 8009b0e:	440a      	add	r2, r1
 8009b10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b18:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b20:	691b      	ldr	r3, [r3, #16]
 8009b22:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d143      	bne.n	8009bb2 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	015a      	lsls	r2, r3, #5
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	4413      	add	r3, r2
 8009b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	68fa      	ldr	r2, [r7, #12]
 8009b3a:	0151      	lsls	r1, r2, #5
 8009b3c:	693a      	ldr	r2, [r7, #16]
 8009b3e:	440a      	add	r2, r1
 8009b40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009b48:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	015a      	lsls	r2, r3, #5
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	4413      	add	r3, r2
 8009b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	68fa      	ldr	r2, [r7, #12]
 8009b5a:	0151      	lsls	r1, r2, #5
 8009b5c:	693a      	ldr	r2, [r7, #16]
 8009b5e:	440a      	add	r2, r1
 8009b60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009b68:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	015a      	lsls	r2, r3, #5
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	4413      	add	r3, r2
 8009b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	68fa      	ldr	r2, [r7, #12]
 8009b7a:	0151      	lsls	r1, r2, #5
 8009b7c:	693a      	ldr	r2, [r7, #16]
 8009b7e:	440a      	add	r2, r1
 8009b80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b84:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009b88:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	3301      	adds	r3, #1
 8009b8e:	617b      	str	r3, [r7, #20]
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b96:	d81d      	bhi.n	8009bd4 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	015a      	lsls	r2, r3, #5
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	4413      	add	r3, r2
 8009ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009baa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009bae:	d0ec      	beq.n	8009b8a <USB_HC_Halt+0x1a4>
 8009bb0:	e011      	b.n	8009bd6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	015a      	lsls	r2, r3, #5
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	4413      	add	r3, r2
 8009bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	68fa      	ldr	r2, [r7, #12]
 8009bc2:	0151      	lsls	r1, r2, #5
 8009bc4:	693a      	ldr	r2, [r7, #16]
 8009bc6:	440a      	add	r2, r1
 8009bc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009bcc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009bd0:	6013      	str	r3, [r2, #0]
 8009bd2:	e000      	b.n	8009bd6 <USB_HC_Halt+0x1f0>
          break;
 8009bd4:	bf00      	nop
    }
  }

  return HAL_OK;
 8009bd6:	2300      	movs	r3, #0
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	371c      	adds	r7, #28
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr

08009be4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b087      	sub	sp, #28
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	460b      	mov	r3, r1
 8009bee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009bf4:	78fb      	ldrb	r3, [r7, #3]
 8009bf6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	04da      	lsls	r2, r3, #19
 8009c00:	4b15      	ldr	r3, [pc, #84]	; (8009c58 <USB_DoPing+0x74>)
 8009c02:	4013      	ands	r3, r2
 8009c04:	693a      	ldr	r2, [r7, #16]
 8009c06:	0151      	lsls	r1, r2, #5
 8009c08:	697a      	ldr	r2, [r7, #20]
 8009c0a:	440a      	add	r2, r1
 8009c0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009c14:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	015a      	lsls	r2, r3, #5
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	4413      	add	r3, r2
 8009c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009c2c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009c34:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	015a      	lsls	r2, r3, #5
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	4413      	add	r3, r2
 8009c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c42:	461a      	mov	r2, r3
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009c48:	2300      	movs	r3, #0
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	371c      	adds	r7, #28
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c54:	4770      	bx	lr
 8009c56:	bf00      	nop
 8009c58:	1ff80000 	.word	0x1ff80000

08009c5c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b086      	sub	sp, #24
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f7ff f9a1 	bl	8008fb4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8009c72:	2110      	movs	r1, #16
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f7ff f9d9 	bl	800902c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f7ff f9fc 	bl	8009078 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009c80:	2300      	movs	r3, #0
 8009c82:	613b      	str	r3, [r7, #16]
 8009c84:	e01f      	b.n	8009cc6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	015a      	lsls	r2, r3, #5
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	4413      	add	r3, r2
 8009c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c9c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009ca4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009cac:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	015a      	lsls	r2, r3, #5
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	4413      	add	r3, r2
 8009cb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cba:	461a      	mov	r2, r3
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	613b      	str	r3, [r7, #16]
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	2b0f      	cmp	r3, #15
 8009cca:	d9dc      	bls.n	8009c86 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009ccc:	2300      	movs	r3, #0
 8009cce:	613b      	str	r3, [r7, #16]
 8009cd0:	e034      	b.n	8009d3c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	015a      	lsls	r2, r3, #5
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	4413      	add	r3, r2
 8009cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ce8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009cf0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009cf8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	015a      	lsls	r2, r3, #5
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	4413      	add	r3, r2
 8009d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d06:	461a      	mov	r2, r3
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	3301      	adds	r3, #1
 8009d10:	617b      	str	r3, [r7, #20]
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009d18:	d80c      	bhi.n	8009d34 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	015a      	lsls	r2, r3, #5
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	4413      	add	r3, r2
 8009d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d30:	d0ec      	beq.n	8009d0c <USB_StopHost+0xb0>
 8009d32:	e000      	b.n	8009d36 <USB_StopHost+0xda>
        break;
 8009d34:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	3301      	adds	r3, #1
 8009d3a:	613b      	str	r3, [r7, #16]
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	2b0f      	cmp	r3, #15
 8009d40:	d9c7      	bls.n	8009cd2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d48:	461a      	mov	r2, r3
 8009d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8009d4e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f04f 32ff 	mov.w	r2, #4294967295
 8009d56:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f7ff f91a 	bl	8008f92 <USB_EnableGlobalInt>

  return HAL_OK;
 8009d5e:	2300      	movs	r3, #0
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3718      	adds	r7, #24
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8009d6c:	4904      	ldr	r1, [pc, #16]	; (8009d80 <MX_FATFS_Init+0x18>)
 8009d6e:	4805      	ldr	r0, [pc, #20]	; (8009d84 <MX_FATFS_Init+0x1c>)
 8009d70:	f003 fb46 	bl	800d400 <FATFS_LinkDriver>
 8009d74:	4603      	mov	r3, r0
 8009d76:	461a      	mov	r2, r3
 8009d78:	4b03      	ldr	r3, [pc, #12]	; (8009d88 <MX_FATFS_Init+0x20>)
 8009d7a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8009d7c:	bf00      	nop
 8009d7e:	bd80      	pop	{r7, pc}
 8009d80:	20006ce8 	.word	0x20006ce8
 8009d84:	08011d38 	.word	0x08011d38
 8009d88:	20007150 	.word	0x20007150

08009d8c <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b083      	sub	sp, #12
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	4603      	mov	r3, r0
 8009d94:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8009d96:	2300      	movs	r3, #0
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	370c      	adds	r7, #12
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr

08009da4 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b084      	sub	sp, #16
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	4603      	mov	r3, r0
 8009dac:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8009dae:	2301      	movs	r3, #1
 8009db0:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8009db2:	79fb      	ldrb	r3, [r7, #7]
 8009db4:	4619      	mov	r1, r3
 8009db6:	4808      	ldr	r0, [pc, #32]	; (8009dd8 <USBH_status+0x34>)
 8009db8:	f000 fe53 	bl	800aa62 <USBH_MSC_UnitIsReady>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d002      	beq.n	8009dc8 <USBH_status+0x24>
  {
    res = RES_OK;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	73fb      	strb	r3, [r7, #15]
 8009dc6:	e001      	b.n	8009dcc <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8009dc8:	2301      	movs	r3, #1
 8009dca:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8009dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3710      	adds	r7, #16
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}
 8009dd6:	bf00      	nop
 8009dd8:	200071b8 	.word	0x200071b8

08009ddc <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b094      	sub	sp, #80	; 0x50
 8009de0:	af02      	add	r7, sp, #8
 8009de2:	60b9      	str	r1, [r7, #8]
 8009de4:	607a      	str	r2, [r7, #4]
 8009de6:	603b      	str	r3, [r7, #0]
 8009de8:	4603      	mov	r3, r0
 8009dea:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009dec:	2301      	movs	r3, #1
 8009dee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8009df2:	7bf9      	ldrb	r1, [r7, #15]
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	9300      	str	r3, [sp, #0]
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	687a      	ldr	r2, [r7, #4]
 8009dfc:	4812      	ldr	r0, [pc, #72]	; (8009e48 <USBH_read+0x6c>)
 8009dfe:	f000 fe7a 	bl	800aaf6 <USBH_MSC_Read>
 8009e02:	4603      	mov	r3, r0
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d103      	bne.n	8009e10 <USBH_read+0x34>
  {
    res = RES_OK;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009e0e:	e015      	b.n	8009e3c <USBH_read+0x60>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8009e10:	f107 0210 	add.w	r2, r7, #16
 8009e14:	7bfb      	ldrb	r3, [r7, #15]
 8009e16:	4619      	mov	r1, r3
 8009e18:	480b      	ldr	r0, [pc, #44]	; (8009e48 <USBH_read+0x6c>)
 8009e1a:	f000 fe48 	bl	800aaae <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8009e1e:	7f7b      	ldrb	r3, [r7, #29]
 8009e20:	2b28      	cmp	r3, #40	; 0x28
 8009e22:	d003      	beq.n	8009e2c <USBH_read+0x50>
 8009e24:	2b3a      	cmp	r3, #58	; 0x3a
 8009e26:	d001      	beq.n	8009e2c <USBH_read+0x50>
 8009e28:	2b04      	cmp	r3, #4
 8009e2a:	d103      	bne.n	8009e34 <USBH_read+0x58>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8009e2c:	2303      	movs	r3, #3
 8009e2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break; 
 8009e32:	e003      	b.n	8009e3c <USBH_read+0x60>

    default:
      res = RES_ERROR;
 8009e34:	2301      	movs	r3, #1
 8009e36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009e3a:	bf00      	nop
    }
  }

  return res;
 8009e3c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3748      	adds	r7, #72	; 0x48
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}
 8009e48:	200071b8 	.word	0x200071b8

08009e4c <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b094      	sub	sp, #80	; 0x50
 8009e50:	af02      	add	r7, sp, #8
 8009e52:	60b9      	str	r1, [r7, #8]
 8009e54:	607a      	str	r2, [r7, #4]
 8009e56:	603b      	str	r3, [r7, #0]
 8009e58:	4603      	mov	r3, r0
 8009e5a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8009e62:	7bf9      	ldrb	r1, [r7, #15]
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	9300      	str	r3, [sp, #0]
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	687a      	ldr	r2, [r7, #4]
 8009e6c:	4817      	ldr	r0, [pc, #92]	; (8009ecc <USBH_write+0x80>)
 8009e6e:	f000 feab 	bl	800abc8 <USBH_MSC_Write>
 8009e72:	4603      	mov	r3, r0
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d103      	bne.n	8009e80 <USBH_write+0x34>
  {
    res = RES_OK;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009e7e:	e01f      	b.n	8009ec0 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8009e80:	f107 0210 	add.w	r2, r7, #16
 8009e84:	7bfb      	ldrb	r3, [r7, #15]
 8009e86:	4619      	mov	r1, r3
 8009e88:	4810      	ldr	r0, [pc, #64]	; (8009ecc <USBH_write+0x80>)
 8009e8a:	f000 fe10 	bl	800aaae <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8009e8e:	7f7b      	ldrb	r3, [r7, #29]
 8009e90:	2b27      	cmp	r3, #39	; 0x27
 8009e92:	d009      	beq.n	8009ea8 <USBH_write+0x5c>
 8009e94:	2b27      	cmp	r3, #39	; 0x27
 8009e96:	dc02      	bgt.n	8009e9e <USBH_write+0x52>
 8009e98:	2b04      	cmp	r3, #4
 8009e9a:	d009      	beq.n	8009eb0 <USBH_write+0x64>
 8009e9c:	e00c      	b.n	8009eb8 <USBH_write+0x6c>
 8009e9e:	2b28      	cmp	r3, #40	; 0x28
 8009ea0:	d006      	beq.n	8009eb0 <USBH_write+0x64>
 8009ea2:	2b3a      	cmp	r3, #58	; 0x3a
 8009ea4:	d004      	beq.n	8009eb0 <USBH_write+0x64>
 8009ea6:	e007      	b.n	8009eb8 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8009ea8:	2302      	movs	r3, #2
 8009eaa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009eae:	e007      	b.n	8009ec0 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8009eb0:	2303      	movs	r3, #3
 8009eb2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009eb6:	e003      	b.n	8009ec0 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8009eb8:	2301      	movs	r3, #1
 8009eba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009ebe:	bf00      	nop
    }
  }

  return res;
 8009ec0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3748      	adds	r7, #72	; 0x48
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}
 8009ecc:	200071b8 	.word	0x200071b8

08009ed0 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b090      	sub	sp, #64	; 0x40
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	603a      	str	r2, [r7, #0]
 8009eda:	71fb      	strb	r3, [r7, #7]
 8009edc:	460b      	mov	r3, r1
 8009ede:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8009ee6:	79bb      	ldrb	r3, [r7, #6]
 8009ee8:	2b03      	cmp	r3, #3
 8009eea:	d852      	bhi.n	8009f92 <USBH_ioctl+0xc2>
 8009eec:	a201      	add	r2, pc, #4	; (adr r2, 8009ef4 <USBH_ioctl+0x24>)
 8009eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ef2:	bf00      	nop
 8009ef4:	08009f05 	.word	0x08009f05
 8009ef8:	08009f0d 	.word	0x08009f0d
 8009efc:	08009f37 	.word	0x08009f37
 8009f00:	08009f63 	.word	0x08009f63
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8009f04:	2300      	movs	r3, #0
 8009f06:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009f0a:	e045      	b.n	8009f98 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009f0c:	f107 0208 	add.w	r2, r7, #8
 8009f10:	79fb      	ldrb	r3, [r7, #7]
 8009f12:	4619      	mov	r1, r3
 8009f14:	4823      	ldr	r0, [pc, #140]	; (8009fa4 <USBH_ioctl+0xd4>)
 8009f16:	f000 fdca 	bl	800aaae <USBH_MSC_GetLUNInfo>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d106      	bne.n	8009f2e <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8009f20:	68fa      	ldr	r2, [r7, #12]
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009f26:	2300      	movs	r3, #0
 8009f28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009f2c:	e034      	b.n	8009f98 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8009f2e:	2301      	movs	r3, #1
 8009f30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009f34:	e030      	b.n	8009f98 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009f36:	f107 0208 	add.w	r2, r7, #8
 8009f3a:	79fb      	ldrb	r3, [r7, #7]
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	4819      	ldr	r0, [pc, #100]	; (8009fa4 <USBH_ioctl+0xd4>)
 8009f40:	f000 fdb5 	bl	800aaae <USBH_MSC_GetLUNInfo>
 8009f44:	4603      	mov	r3, r0
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d107      	bne.n	8009f5a <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8009f4a:	8a3b      	ldrh	r3, [r7, #16]
 8009f4c:	461a      	mov	r2, r3
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009f52:	2300      	movs	r3, #0
 8009f54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009f58:	e01e      	b.n	8009f98 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009f60:	e01a      	b.n	8009f98 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009f62:	f107 0208 	add.w	r2, r7, #8
 8009f66:	79fb      	ldrb	r3, [r7, #7]
 8009f68:	4619      	mov	r1, r3
 8009f6a:	480e      	ldr	r0, [pc, #56]	; (8009fa4 <USBH_ioctl+0xd4>)
 8009f6c:	f000 fd9f 	bl	800aaae <USBH_MSC_GetLUNInfo>
 8009f70:	4603      	mov	r3, r0
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d109      	bne.n	8009f8a <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8009f76:	8a3b      	ldrh	r3, [r7, #16]
 8009f78:	0a5b      	lsrs	r3, r3, #9
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	461a      	mov	r2, r3
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009f82:	2300      	movs	r3, #0
 8009f84:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009f88:	e006      	b.n	8009f98 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009f90:	e002      	b.n	8009f98 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8009f92:	2304      	movs	r3, #4
 8009f94:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8009f98:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3740      	adds	r7, #64	; 0x40
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}
 8009fa4:	200071b8 	.word	0x200071b8

08009fa8 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009fa8:	b590      	push	{r4, r7, lr}
 8009faa:	b089      	sub	sp, #36	; 0x24
 8009fac:	af04      	add	r7, sp, #16
 8009fae:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009fb6:	7919      	ldrb	r1, [r3, #4]
 8009fb8:	2350      	movs	r3, #80	; 0x50
 8009fba:	2206      	movs	r2, #6
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f001 fd3f 	bl	800ba40 <USBH_FindInterface>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8009fc6:	7bfb      	ldrb	r3, [r7, #15]
 8009fc8:	2bff      	cmp	r3, #255	; 0xff
 8009fca:	d002      	beq.n	8009fd2 <USBH_MSC_InterfaceInit+0x2a>
 8009fcc:	7bfb      	ldrb	r3, [r7, #15]
 8009fce:	2b01      	cmp	r3, #1
 8009fd0:	d901      	bls.n	8009fd6 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009fd2:	2302      	movs	r3, #2
 8009fd4:	e0ef      	b.n	800a1b6 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8009fd6:	7bfb      	ldrb	r3, [r7, #15]
 8009fd8:	4619      	mov	r1, r3
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f001 fd14 	bl	800ba08 <USBH_SelectInterface>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009fe4:	7bbb      	ldrb	r3, [r7, #14]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d001      	beq.n	8009fee <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8009fea:	2302      	movs	r3, #2
 8009fec:	e0e3      	b.n	800a1b6 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009ff4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009ff8:	f007 fb3c 	bl	8011674 <malloc>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a006:	69db      	ldr	r3, [r3, #28]
 800a008:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d101      	bne.n	800a014 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800a010:	2302      	movs	r3, #2
 800a012:	e0d0      	b.n	800a1b6 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800a014:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a018:	2100      	movs	r1, #0
 800a01a:	68b8      	ldr	r0, [r7, #8]
 800a01c:	f007 fb45 	bl	80116aa <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800a020:	7bfb      	ldrb	r3, [r7, #15]
 800a022:	687a      	ldr	r2, [r7, #4]
 800a024:	211a      	movs	r1, #26
 800a026:	fb01 f303 	mul.w	r3, r1, r3
 800a02a:	4413      	add	r3, r2
 800a02c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a030:	781b      	ldrb	r3, [r3, #0]
 800a032:	b25b      	sxtb	r3, r3
 800a034:	2b00      	cmp	r3, #0
 800a036:	da16      	bge.n	800a066 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800a038:	7bfb      	ldrb	r3, [r7, #15]
 800a03a:	687a      	ldr	r2, [r7, #4]
 800a03c:	211a      	movs	r1, #26
 800a03e:	fb01 f303 	mul.w	r3, r1, r3
 800a042:	4413      	add	r3, r2
 800a044:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a048:	781a      	ldrb	r2, [r3, #0]
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a04e:	7bfb      	ldrb	r3, [r7, #15]
 800a050:	687a      	ldr	r2, [r7, #4]
 800a052:	211a      	movs	r1, #26
 800a054:	fb01 f303 	mul.w	r3, r1, r3
 800a058:	4413      	add	r3, r2
 800a05a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a05e:	881a      	ldrh	r2, [r3, #0]
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	815a      	strh	r2, [r3, #10]
 800a064:	e015      	b.n	800a092 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800a066:	7bfb      	ldrb	r3, [r7, #15]
 800a068:	687a      	ldr	r2, [r7, #4]
 800a06a:	211a      	movs	r1, #26
 800a06c:	fb01 f303 	mul.w	r3, r1, r3
 800a070:	4413      	add	r3, r2
 800a072:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a076:	781a      	ldrb	r2, [r3, #0]
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a07c:	7bfb      	ldrb	r3, [r7, #15]
 800a07e:	687a      	ldr	r2, [r7, #4]
 800a080:	211a      	movs	r1, #26
 800a082:	fb01 f303 	mul.w	r3, r1, r3
 800a086:	4413      	add	r3, r2
 800a088:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a08c:	881a      	ldrh	r2, [r3, #0]
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800a092:	7bfb      	ldrb	r3, [r7, #15]
 800a094:	687a      	ldr	r2, [r7, #4]
 800a096:	211a      	movs	r1, #26
 800a098:	fb01 f303 	mul.w	r3, r1, r3
 800a09c:	4413      	add	r3, r2
 800a09e:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a0a2:	781b      	ldrb	r3, [r3, #0]
 800a0a4:	b25b      	sxtb	r3, r3
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	da16      	bge.n	800a0d8 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800a0aa:	7bfb      	ldrb	r3, [r7, #15]
 800a0ac:	687a      	ldr	r2, [r7, #4]
 800a0ae:	211a      	movs	r1, #26
 800a0b0:	fb01 f303 	mul.w	r3, r1, r3
 800a0b4:	4413      	add	r3, r2
 800a0b6:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a0ba:	781a      	ldrb	r2, [r3, #0]
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a0c0:	7bfb      	ldrb	r3, [r7, #15]
 800a0c2:	687a      	ldr	r2, [r7, #4]
 800a0c4:	211a      	movs	r1, #26
 800a0c6:	fb01 f303 	mul.w	r3, r1, r3
 800a0ca:	4413      	add	r3, r2
 800a0cc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a0d0:	881a      	ldrh	r2, [r3, #0]
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	815a      	strh	r2, [r3, #10]
 800a0d6:	e015      	b.n	800a104 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800a0d8:	7bfb      	ldrb	r3, [r7, #15]
 800a0da:	687a      	ldr	r2, [r7, #4]
 800a0dc:	211a      	movs	r1, #26
 800a0de:	fb01 f303 	mul.w	r3, r1, r3
 800a0e2:	4413      	add	r3, r2
 800a0e4:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a0e8:	781a      	ldrb	r2, [r3, #0]
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a0ee:	7bfb      	ldrb	r3, [r7, #15]
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	211a      	movs	r1, #26
 800a0f4:	fb01 f303 	mul.w	r3, r1, r3
 800a0f8:	4413      	add	r3, r2
 800a0fa:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a0fe:	881a      	ldrh	r2, [r3, #0]
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	2200      	movs	r2, #0
 800a108:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	2200      	movs	r2, #0
 800a10e:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	2200      	movs	r2, #0
 800a114:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	799b      	ldrb	r3, [r3, #6]
 800a11a:	4619      	mov	r1, r3
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f003 f8c0 	bl	800d2a2 <USBH_AllocPipe>
 800a122:	4603      	mov	r3, r0
 800a124:	461a      	mov	r2, r3
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	79db      	ldrb	r3, [r3, #7]
 800a12e:	4619      	mov	r1, r3
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f003 f8b6 	bl	800d2a2 <USBH_AllocPipe>
 800a136:	4603      	mov	r3, r0
 800a138:	461a      	mov	r2, r3
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f000 fde6 	bl	800ad10 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	7959      	ldrb	r1, [r3, #5]
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	7998      	ldrb	r0, [r3, #6]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a158:	68ba      	ldr	r2, [r7, #8]
 800a15a:	8912      	ldrh	r2, [r2, #8]
 800a15c:	9202      	str	r2, [sp, #8]
 800a15e:	2202      	movs	r2, #2
 800a160:	9201      	str	r2, [sp, #4]
 800a162:	9300      	str	r3, [sp, #0]
 800a164:	4623      	mov	r3, r4
 800a166:	4602      	mov	r2, r0
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f003 f86b 	bl	800d244 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	7919      	ldrb	r1, [r3, #4]
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	79d8      	ldrb	r0, [r3, #7]
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a182:	68ba      	ldr	r2, [r7, #8]
 800a184:	8952      	ldrh	r2, [r2, #10]
 800a186:	9202      	str	r2, [sp, #8]
 800a188:	2202      	movs	r2, #2
 800a18a:	9201      	str	r2, [sp, #4]
 800a18c:	9300      	str	r3, [sp, #0]
 800a18e:	4623      	mov	r3, r4
 800a190:	4602      	mov	r2, r0
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f003 f856 	bl	800d244 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	791b      	ldrb	r3, [r3, #4]
 800a19c:	2200      	movs	r2, #0
 800a19e:	4619      	mov	r1, r3
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f007 f983 	bl	80114ac <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	795b      	ldrb	r3, [r3, #5]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f007 f97c 	bl	80114ac <USBH_LL_SetToggle>

  return USBH_OK;
 800a1b4:	2300      	movs	r3, #0
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3714      	adds	r7, #20
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd90      	pop	{r4, r7, pc}

0800a1be <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a1be:	b580      	push	{r7, lr}
 800a1c0:	b084      	sub	sp, #16
 800a1c2:	af00      	add	r7, sp, #0
 800a1c4:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a1cc:	69db      	ldr	r3, [r3, #28]
 800a1ce:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	795b      	ldrb	r3, [r3, #5]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d00e      	beq.n	800a1f6 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	795b      	ldrb	r3, [r3, #5]
 800a1dc:	4619      	mov	r1, r3
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f003 f84f 	bl	800d282 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	795b      	ldrb	r3, [r3, #5]
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f003 f87a 	bl	800d2e4 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	791b      	ldrb	r3, [r3, #4]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d00e      	beq.n	800a21c <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	791b      	ldrb	r3, [r3, #4]
 800a202:	4619      	mov	r1, r3
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f003 f83c 	bl	800d282 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	791b      	ldrb	r3, [r3, #4]
 800a20e:	4619      	mov	r1, r3
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f003 f867 	bl	800d2e4 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2200      	movs	r2, #0
 800a21a:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a222:	69db      	ldr	r3, [r3, #28]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d00b      	beq.n	800a240 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a22e:	69db      	ldr	r3, [r3, #28]
 800a230:	4618      	mov	r0, r3
 800a232:	f007 fa27 	bl	8011684 <free>
    phost->pActiveClass->pData = 0U;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a23c:	2200      	movs	r2, #0
 800a23e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a240:	2300      	movs	r3, #0
}
 800a242:	4618      	mov	r0, r3
 800a244:	3710      	adds	r7, #16
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}

0800a24a <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a24a:	b580      	push	{r7, lr}
 800a24c:	b084      	sub	sp, #16
 800a24e:	af00      	add	r7, sp, #0
 800a250:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a258:	69db      	ldr	r3, [r3, #28]
 800a25a:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a25c:	2301      	movs	r3, #1
 800a25e:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	7b9b      	ldrb	r3, [r3, #14]
 800a264:	2b02      	cmp	r3, #2
 800a266:	d004      	beq.n	800a272 <USBH_MSC_ClassRequest+0x28>
 800a268:	2b03      	cmp	r3, #3
 800a26a:	d03e      	beq.n	800a2ea <USBH_MSC_ClassRequest+0xa0>
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d000      	beq.n	800a272 <USBH_MSC_ClassRequest+0x28>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
      }
      break;

    default:
      break;
 800a270:	e04a      	b.n	800a308 <USBH_MSC_ClassRequest+0xbe>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	4619      	mov	r1, r3
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f000 fd2c 	bl	800acd4 <USBH_MSC_BOT_REQ_GetMaxLUN>
 800a27c:	4603      	mov	r3, r0
 800a27e:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_NOT_SUPPORTED)
 800a280:	7bfb      	ldrb	r3, [r7, #15]
 800a282:	2b03      	cmp	r3, #3
 800a284:	d104      	bne.n	800a290 <USBH_MSC_ClassRequest+0x46>
        MSC_Handle->max_lun = 0U;
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	2200      	movs	r2, #0
 800a28a:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800a28c:	2300      	movs	r3, #0
 800a28e:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_OK)
 800a290:	7bfb      	ldrb	r3, [r7, #15]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d135      	bne.n	800a302 <USBH_MSC_ClassRequest+0xb8>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	781b      	ldrb	r3, [r3, #0]
 800a29a:	2b02      	cmp	r3, #2
 800a29c:	d804      	bhi.n	800a2a8 <USBH_MSC_ClassRequest+0x5e>
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	781b      	ldrb	r3, [r3, #0]
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	b2da      	uxtb	r2, r3
 800a2a6:	e000      	b.n	800a2aa <USBH_MSC_ClassRequest+0x60>
 800a2a8:	2202      	movs	r2, #2
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	73bb      	strb	r3, [r7, #14]
 800a2b2:	e014      	b.n	800a2de <USBH_MSC_ClassRequest+0x94>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800a2b4:	7bbb      	ldrb	r3, [r7, #14]
 800a2b6:	68ba      	ldr	r2, [r7, #8]
 800a2b8:	2134      	movs	r1, #52	; 0x34
 800a2ba:	fb01 f303 	mul.w	r3, r1, r3
 800a2be:	4413      	add	r3, r2
 800a2c0:	3392      	adds	r3, #146	; 0x92
 800a2c2:	2202      	movs	r2, #2
 800a2c4:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800a2c6:	7bbb      	ldrb	r3, [r7, #14]
 800a2c8:	68ba      	ldr	r2, [r7, #8]
 800a2ca:	2134      	movs	r1, #52	; 0x34
 800a2cc:	fb01 f303 	mul.w	r3, r1, r3
 800a2d0:	4413      	add	r3, r2
 800a2d2:	33c1      	adds	r3, #193	; 0xc1
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800a2d8:	7bbb      	ldrb	r3, [r7, #14]
 800a2da:	3301      	adds	r3, #1
 800a2dc:	73bb      	strb	r3, [r7, #14]
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	781b      	ldrb	r3, [r3, #0]
 800a2e2:	7bba      	ldrb	r2, [r7, #14]
 800a2e4:	429a      	cmp	r2, r3
 800a2e6:	d3e5      	bcc.n	800a2b4 <USBH_MSC_ClassRequest+0x6a>
      break;
 800a2e8:	e00b      	b.n	800a302 <USBH_MSC_ClassRequest+0xb8>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800a2ea:	2100      	movs	r1, #0
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f002 fa86 	bl	800c7fe <USBH_ClrFeature>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d106      	bne.n	800a306 <USBH_MSC_ClassRequest+0xbc>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	7bda      	ldrb	r2, [r3, #15]
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	739a      	strb	r2, [r3, #14]
      break;
 800a300:	e001      	b.n	800a306 <USBH_MSC_ClassRequest+0xbc>
      break;
 800a302:	bf00      	nop
 800a304:	e000      	b.n	800a308 <USBH_MSC_ClassRequest+0xbe>
      break;
 800a306:	bf00      	nop
  }

  return status;
 800a308:	7bfb      	ldrb	r3, [r7, #15]
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3710      	adds	r7, #16
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}
	...

0800a314 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b086      	sub	sp, #24
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a322:	69db      	ldr	r3, [r3, #28]
 800a324:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800a326:	2301      	movs	r3, #1
 800a328:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800a32a:	2301      	movs	r3, #1
 800a32c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800a32e:	2301      	movs	r3, #1
 800a330:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	7b1b      	ldrb	r3, [r3, #12]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d003      	beq.n	800a342 <USBH_MSC_Process+0x2e>
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	f000 828d 	beq.w	800a85a <USBH_MSC_Process+0x546>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800a340:	e28e      	b.n	800a860 <USBH_MSC_Process+0x54c>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	781b      	ldrb	r3, [r3, #0]
 800a34c:	b29b      	uxth	r3, r3
 800a34e:	429a      	cmp	r2, r3
 800a350:	f080 8267 	bcs.w	800a822 <USBH_MSC_Process+0x50e>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a35a:	4619      	mov	r1, r3
 800a35c:	693a      	ldr	r2, [r7, #16]
 800a35e:	2334      	movs	r3, #52	; 0x34
 800a360:	fb03 f301 	mul.w	r3, r3, r1
 800a364:	4413      	add	r3, r2
 800a366:	3391      	adds	r3, #145	; 0x91
 800a368:	2201      	movs	r2, #1
 800a36a:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a372:	4619      	mov	r1, r3
 800a374:	693a      	ldr	r2, [r7, #16]
 800a376:	2334      	movs	r3, #52	; 0x34
 800a378:	fb03 f301 	mul.w	r3, r3, r1
 800a37c:	4413      	add	r3, r2
 800a37e:	3390      	adds	r3, #144	; 0x90
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	2b08      	cmp	r3, #8
 800a384:	f200 8235 	bhi.w	800a7f2 <USBH_MSC_Process+0x4de>
 800a388:	a201      	add	r2, pc, #4	; (adr r2, 800a390 <USBH_MSC_Process+0x7c>)
 800a38a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a38e:	bf00      	nop
 800a390:	0800a3b5 	.word	0x0800a3b5
 800a394:	0800a7f3 	.word	0x0800a7f3
 800a398:	0800a47d 	.word	0x0800a47d
 800a39c:	0800a601 	.word	0x0800a601
 800a3a0:	0800a3db 	.word	0x0800a3db
 800a3a4:	0800a6cd 	.word	0x0800a6cd
 800a3a8:	0800a7f3 	.word	0x0800a7f3
 800a3ac:	0800a7f3 	.word	0x0800a7f3
 800a3b0:	0800a7e1 	.word	0x0800a7e1
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	693a      	ldr	r2, [r7, #16]
 800a3be:	2334      	movs	r3, #52	; 0x34
 800a3c0:	fb03 f301 	mul.w	r3, r3, r1
 800a3c4:	4413      	add	r3, r2
 800a3c6:	3390      	adds	r3, #144	; 0x90
 800a3c8:	2204      	movs	r2, #4
 800a3ca:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800a3d8:	e214      	b.n	800a804 <USBH_MSC_Process+0x4f0>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a3e0:	b2d9      	uxtb	r1, r3
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a3e8:	461a      	mov	r2, r3
 800a3ea:	2334      	movs	r3, #52	; 0x34
 800a3ec:	fb03 f302 	mul.w	r3, r3, r2
 800a3f0:	3398      	adds	r3, #152	; 0x98
 800a3f2:	693a      	ldr	r2, [r7, #16]
 800a3f4:	4413      	add	r3, r2
 800a3f6:	3307      	adds	r3, #7
 800a3f8:	461a      	mov	r2, r3
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f001 f836 	bl	800b46c <USBH_MSC_SCSI_Inquiry>
 800a400:	4603      	mov	r3, r0
 800a402:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800a404:	7bfb      	ldrb	r3, [r7, #15]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d10b      	bne.n	800a422 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a410:	4619      	mov	r1, r3
 800a412:	693a      	ldr	r2, [r7, #16]
 800a414:	2334      	movs	r3, #52	; 0x34
 800a416:	fb03 f301 	mul.w	r3, r3, r1
 800a41a:	4413      	add	r3, r2
 800a41c:	3390      	adds	r3, #144	; 0x90
 800a41e:	2202      	movs	r2, #2
 800a420:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800a422:	7bfb      	ldrb	r3, [r7, #15]
 800a424:	2b02      	cmp	r3, #2
 800a426:	d10c      	bne.n	800a442 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a42e:	4619      	mov	r1, r3
 800a430:	693a      	ldr	r2, [r7, #16]
 800a432:	2334      	movs	r3, #52	; 0x34
 800a434:	fb03 f301 	mul.w	r3, r3, r1
 800a438:	4413      	add	r3, r2
 800a43a:	3390      	adds	r3, #144	; 0x90
 800a43c:	2205      	movs	r2, #5
 800a43e:	701a      	strb	r2, [r3, #0]
            break;
 800a440:	e1d9      	b.n	800a7f6 <USBH_MSC_Process+0x4e2>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a442:	7bfb      	ldrb	r3, [r7, #15]
 800a444:	2b04      	cmp	r3, #4
 800a446:	f040 81d6 	bne.w	800a7f6 <USBH_MSC_Process+0x4e2>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a450:	4619      	mov	r1, r3
 800a452:	693a      	ldr	r2, [r7, #16]
 800a454:	2334      	movs	r3, #52	; 0x34
 800a456:	fb03 f301 	mul.w	r3, r3, r1
 800a45a:	4413      	add	r3, r2
 800a45c:	3390      	adds	r3, #144	; 0x90
 800a45e:	2201      	movs	r2, #1
 800a460:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a462:	693b      	ldr	r3, [r7, #16]
 800a464:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a468:	4619      	mov	r1, r3
 800a46a:	693a      	ldr	r2, [r7, #16]
 800a46c:	2334      	movs	r3, #52	; 0x34
 800a46e:	fb03 f301 	mul.w	r3, r3, r1
 800a472:	4413      	add	r3, r2
 800a474:	3391      	adds	r3, #145	; 0x91
 800a476:	2202      	movs	r2, #2
 800a478:	701a      	strb	r2, [r3, #0]
            break;
 800a47a:	e1bc      	b.n	800a7f6 <USBH_MSC_Process+0x4e2>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a482:	b2db      	uxtb	r3, r3
 800a484:	4619      	mov	r1, r3
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f000 ff32 	bl	800b2f0 <USBH_MSC_SCSI_TestUnitReady>
 800a48c:	4603      	mov	r3, r0
 800a48e:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800a490:	7bbb      	ldrb	r3, [r7, #14]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d149      	bne.n	800a52a <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a49c:	4619      	mov	r1, r3
 800a49e:	693a      	ldr	r2, [r7, #16]
 800a4a0:	2334      	movs	r3, #52	; 0x34
 800a4a2:	fb03 f301 	mul.w	r3, r3, r1
 800a4a6:	4413      	add	r3, r2
 800a4a8:	3392      	adds	r3, #146	; 0x92
 800a4aa:	781b      	ldrb	r3, [r3, #0]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d00c      	beq.n	800a4ca <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a4b6:	4619      	mov	r1, r3
 800a4b8:	693a      	ldr	r2, [r7, #16]
 800a4ba:	2334      	movs	r3, #52	; 0x34
 800a4bc:	fb03 f301 	mul.w	r3, r3, r1
 800a4c0:	4413      	add	r3, r2
 800a4c2:	33c1      	adds	r3, #193	; 0xc1
 800a4c4:	2201      	movs	r2, #1
 800a4c6:	701a      	strb	r2, [r3, #0]
 800a4c8:	e00b      	b.n	800a4e2 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	693a      	ldr	r2, [r7, #16]
 800a4d4:	2334      	movs	r3, #52	; 0x34
 800a4d6:	fb03 f301 	mul.w	r3, r3, r1
 800a4da:	4413      	add	r3, r2
 800a4dc:	33c1      	adds	r3, #193	; 0xc1
 800a4de:	2200      	movs	r2, #0
 800a4e0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	693a      	ldr	r2, [r7, #16]
 800a4ec:	2334      	movs	r3, #52	; 0x34
 800a4ee:	fb03 f301 	mul.w	r3, r3, r1
 800a4f2:	4413      	add	r3, r2
 800a4f4:	3390      	adds	r3, #144	; 0x90
 800a4f6:	2203      	movs	r2, #3
 800a4f8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a500:	4619      	mov	r1, r3
 800a502:	693a      	ldr	r2, [r7, #16]
 800a504:	2334      	movs	r3, #52	; 0x34
 800a506:	fb03 f301 	mul.w	r3, r3, r1
 800a50a:	4413      	add	r3, r2
 800a50c:	3391      	adds	r3, #145	; 0x91
 800a50e:	2200      	movs	r2, #0
 800a510:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a518:	4619      	mov	r1, r3
 800a51a:	693a      	ldr	r2, [r7, #16]
 800a51c:	2334      	movs	r3, #52	; 0x34
 800a51e:	fb03 f301 	mul.w	r3, r3, r1
 800a522:	4413      	add	r3, r2
 800a524:	3392      	adds	r3, #146	; 0x92
 800a526:	2200      	movs	r2, #0
 800a528:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800a52a:	7bbb      	ldrb	r3, [r7, #14]
 800a52c:	2b02      	cmp	r3, #2
 800a52e:	d14a      	bne.n	800a5c6 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a536:	4619      	mov	r1, r3
 800a538:	693a      	ldr	r2, [r7, #16]
 800a53a:	2334      	movs	r3, #52	; 0x34
 800a53c:	fb03 f301 	mul.w	r3, r3, r1
 800a540:	4413      	add	r3, r2
 800a542:	3392      	adds	r3, #146	; 0x92
 800a544:	781b      	ldrb	r3, [r3, #0]
 800a546:	2b02      	cmp	r3, #2
 800a548:	d00c      	beq.n	800a564 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a550:	4619      	mov	r1, r3
 800a552:	693a      	ldr	r2, [r7, #16]
 800a554:	2334      	movs	r3, #52	; 0x34
 800a556:	fb03 f301 	mul.w	r3, r3, r1
 800a55a:	4413      	add	r3, r2
 800a55c:	33c1      	adds	r3, #193	; 0xc1
 800a55e:	2201      	movs	r2, #1
 800a560:	701a      	strb	r2, [r3, #0]
 800a562:	e00b      	b.n	800a57c <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a56a:	4619      	mov	r1, r3
 800a56c:	693a      	ldr	r2, [r7, #16]
 800a56e:	2334      	movs	r3, #52	; 0x34
 800a570:	fb03 f301 	mul.w	r3, r3, r1
 800a574:	4413      	add	r3, r2
 800a576:	33c1      	adds	r3, #193	; 0xc1
 800a578:	2200      	movs	r2, #0
 800a57a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a582:	4619      	mov	r1, r3
 800a584:	693a      	ldr	r2, [r7, #16]
 800a586:	2334      	movs	r3, #52	; 0x34
 800a588:	fb03 f301 	mul.w	r3, r3, r1
 800a58c:	4413      	add	r3, r2
 800a58e:	3390      	adds	r3, #144	; 0x90
 800a590:	2205      	movs	r2, #5
 800a592:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a59a:	4619      	mov	r1, r3
 800a59c:	693a      	ldr	r2, [r7, #16]
 800a59e:	2334      	movs	r3, #52	; 0x34
 800a5a0:	fb03 f301 	mul.w	r3, r3, r1
 800a5a4:	4413      	add	r3, r2
 800a5a6:	3391      	adds	r3, #145	; 0x91
 800a5a8:	2201      	movs	r2, #1
 800a5aa:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	693a      	ldr	r2, [r7, #16]
 800a5b6:	2334      	movs	r3, #52	; 0x34
 800a5b8:	fb03 f301 	mul.w	r3, r3, r1
 800a5bc:	4413      	add	r3, r2
 800a5be:	3392      	adds	r3, #146	; 0x92
 800a5c0:	2202      	movs	r2, #2
 800a5c2:	701a      	strb	r2, [r3, #0]
            break;
 800a5c4:	e119      	b.n	800a7fa <USBH_MSC_Process+0x4e6>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800a5c6:	7bbb      	ldrb	r3, [r7, #14]
 800a5c8:	2b04      	cmp	r3, #4
 800a5ca:	f040 8116 	bne.w	800a7fa <USBH_MSC_Process+0x4e6>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a5ce:	693b      	ldr	r3, [r7, #16]
 800a5d0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a5d4:	4619      	mov	r1, r3
 800a5d6:	693a      	ldr	r2, [r7, #16]
 800a5d8:	2334      	movs	r3, #52	; 0x34
 800a5da:	fb03 f301 	mul.w	r3, r3, r1
 800a5de:	4413      	add	r3, r2
 800a5e0:	3390      	adds	r3, #144	; 0x90
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	693a      	ldr	r2, [r7, #16]
 800a5f0:	2334      	movs	r3, #52	; 0x34
 800a5f2:	fb03 f301 	mul.w	r3, r3, r1
 800a5f6:	4413      	add	r3, r2
 800a5f8:	3391      	adds	r3, #145	; 0x91
 800a5fa:	2202      	movs	r2, #2
 800a5fc:	701a      	strb	r2, [r3, #0]
            break;
 800a5fe:	e0fc      	b.n	800a7fa <USBH_MSC_Process+0x4e6>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a606:	b2d9      	uxtb	r1, r3
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a60e:	461a      	mov	r2, r3
 800a610:	2334      	movs	r3, #52	; 0x34
 800a612:	fb03 f302 	mul.w	r3, r3, r2
 800a616:	3390      	adds	r3, #144	; 0x90
 800a618:	693a      	ldr	r2, [r7, #16]
 800a61a:	4413      	add	r3, r2
 800a61c:	3304      	adds	r3, #4
 800a61e:	461a      	mov	r2, r3
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f000 fea8 	bl	800b376 <USBH_MSC_SCSI_ReadCapacity>
 800a626:	4603      	mov	r3, r0
 800a628:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800a62a:	7bfb      	ldrb	r3, [r7, #15]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d120      	bne.n	800a672 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a636:	4619      	mov	r1, r3
 800a638:	693a      	ldr	r2, [r7, #16]
 800a63a:	2334      	movs	r3, #52	; 0x34
 800a63c:	fb03 f301 	mul.w	r3, r3, r1
 800a640:	4413      	add	r3, r2
 800a642:	3390      	adds	r3, #144	; 0x90
 800a644:	2201      	movs	r2, #1
 800a646:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a64e:	4619      	mov	r1, r3
 800a650:	693a      	ldr	r2, [r7, #16]
 800a652:	2334      	movs	r3, #52	; 0x34
 800a654:	fb03 f301 	mul.w	r3, r3, r1
 800a658:	4413      	add	r3, r2
 800a65a:	3391      	adds	r3, #145	; 0x91
 800a65c:	2200      	movs	r2, #0
 800a65e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a666:	3301      	adds	r3, #1
 800a668:	b29a      	uxth	r2, r3
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800a670:	e0c5      	b.n	800a7fe <USBH_MSC_Process+0x4ea>
            else if (scsi_status == USBH_FAIL)
 800a672:	7bfb      	ldrb	r3, [r7, #15]
 800a674:	2b02      	cmp	r3, #2
 800a676:	d10c      	bne.n	800a692 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a67e:	4619      	mov	r1, r3
 800a680:	693a      	ldr	r2, [r7, #16]
 800a682:	2334      	movs	r3, #52	; 0x34
 800a684:	fb03 f301 	mul.w	r3, r3, r1
 800a688:	4413      	add	r3, r2
 800a68a:	3390      	adds	r3, #144	; 0x90
 800a68c:	2205      	movs	r2, #5
 800a68e:	701a      	strb	r2, [r3, #0]
            break;
 800a690:	e0b5      	b.n	800a7fe <USBH_MSC_Process+0x4ea>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a692:	7bfb      	ldrb	r3, [r7, #15]
 800a694:	2b04      	cmp	r3, #4
 800a696:	f040 80b2 	bne.w	800a7fe <USBH_MSC_Process+0x4ea>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a6a0:	4619      	mov	r1, r3
 800a6a2:	693a      	ldr	r2, [r7, #16]
 800a6a4:	2334      	movs	r3, #52	; 0x34
 800a6a6:	fb03 f301 	mul.w	r3, r3, r1
 800a6aa:	4413      	add	r3, r2
 800a6ac:	3390      	adds	r3, #144	; 0x90
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a6b8:	4619      	mov	r1, r3
 800a6ba:	693a      	ldr	r2, [r7, #16]
 800a6bc:	2334      	movs	r3, #52	; 0x34
 800a6be:	fb03 f301 	mul.w	r3, r3, r1
 800a6c2:	4413      	add	r3, r2
 800a6c4:	3391      	adds	r3, #145	; 0x91
 800a6c6:	2202      	movs	r2, #2
 800a6c8:	701a      	strb	r2, [r3, #0]
            break;
 800a6ca:	e098      	b.n	800a7fe <USBH_MSC_Process+0x4ea>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a6d2:	b2d9      	uxtb	r1, r3
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a6da:	461a      	mov	r2, r3
 800a6dc:	2334      	movs	r3, #52	; 0x34
 800a6de:	fb03 f302 	mul.w	r3, r3, r2
 800a6e2:	3398      	adds	r3, #152	; 0x98
 800a6e4:	693a      	ldr	r2, [r7, #16]
 800a6e6:	4413      	add	r3, r2
 800a6e8:	3304      	adds	r3, #4
 800a6ea:	461a      	mov	r2, r3
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f000 ff62 	bl	800b5b6 <USBH_MSC_SCSI_RequestSense>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800a6f6:	7bfb      	ldrb	r3, [r7, #15]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d145      	bne.n	800a788 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a702:	4619      	mov	r1, r3
 800a704:	693a      	ldr	r2, [r7, #16]
 800a706:	2334      	movs	r3, #52	; 0x34
 800a708:	fb03 f301 	mul.w	r3, r3, r1
 800a70c:	4413      	add	r3, r2
 800a70e:	339c      	adds	r3, #156	; 0x9c
 800a710:	781b      	ldrb	r3, [r3, #0]
 800a712:	2b06      	cmp	r3, #6
 800a714:	d00c      	beq.n	800a730 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a71c:	4619      	mov	r1, r3
 800a71e:	693a      	ldr	r2, [r7, #16]
 800a720:	2334      	movs	r3, #52	; 0x34
 800a722:	fb03 f301 	mul.w	r3, r3, r1
 800a726:	4413      	add	r3, r2
 800a728:	339c      	adds	r3, #156	; 0x9c
 800a72a:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800a72c:	2b02      	cmp	r3, #2
 800a72e:	d117      	bne.n	800a760 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800a73c:	1ad3      	subs	r3, r2, r3
 800a73e:	f242 720f 	movw	r2, #9999	; 0x270f
 800a742:	4293      	cmp	r3, r2
 800a744:	d80c      	bhi.n	800a760 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a74c:	4619      	mov	r1, r3
 800a74e:	693a      	ldr	r2, [r7, #16]
 800a750:	2334      	movs	r3, #52	; 0x34
 800a752:	fb03 f301 	mul.w	r3, r3, r1
 800a756:	4413      	add	r3, r2
 800a758:	3390      	adds	r3, #144	; 0x90
 800a75a:	2202      	movs	r2, #2
 800a75c:	701a      	strb	r2, [r3, #0]
                  break;
 800a75e:	e051      	b.n	800a804 <USBH_MSC_Process+0x4f0>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a766:	4619      	mov	r1, r3
 800a768:	693a      	ldr	r2, [r7, #16]
 800a76a:	2334      	movs	r3, #52	; 0x34
 800a76c:	fb03 f301 	mul.w	r3, r3, r1
 800a770:	4413      	add	r3, r2
 800a772:	3390      	adds	r3, #144	; 0x90
 800a774:	2201      	movs	r2, #1
 800a776:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a77e:	3301      	adds	r3, #1
 800a780:	b29a      	uxth	r2, r3
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800a788:	7bfb      	ldrb	r3, [r7, #15]
 800a78a:	2b02      	cmp	r3, #2
 800a78c:	d10c      	bne.n	800a7a8 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a794:	4619      	mov	r1, r3
 800a796:	693a      	ldr	r2, [r7, #16]
 800a798:	2334      	movs	r3, #52	; 0x34
 800a79a:	fb03 f301 	mul.w	r3, r3, r1
 800a79e:	4413      	add	r3, r2
 800a7a0:	3390      	adds	r3, #144	; 0x90
 800a7a2:	2208      	movs	r2, #8
 800a7a4:	701a      	strb	r2, [r3, #0]
            break;
 800a7a6:	e02c      	b.n	800a802 <USBH_MSC_Process+0x4ee>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a7a8:	7bfb      	ldrb	r3, [r7, #15]
 800a7aa:	2b04      	cmp	r3, #4
 800a7ac:	d129      	bne.n	800a802 <USBH_MSC_Process+0x4ee>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a7b4:	4619      	mov	r1, r3
 800a7b6:	693a      	ldr	r2, [r7, #16]
 800a7b8:	2334      	movs	r3, #52	; 0x34
 800a7ba:	fb03 f301 	mul.w	r3, r3, r1
 800a7be:	4413      	add	r3, r2
 800a7c0:	3390      	adds	r3, #144	; 0x90
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a7cc:	4619      	mov	r1, r3
 800a7ce:	693a      	ldr	r2, [r7, #16]
 800a7d0:	2334      	movs	r3, #52	; 0x34
 800a7d2:	fb03 f301 	mul.w	r3, r3, r1
 800a7d6:	4413      	add	r3, r2
 800a7d8:	3391      	adds	r3, #145	; 0x91
 800a7da:	2202      	movs	r2, #2
 800a7dc:	701a      	strb	r2, [r3, #0]
            break;
 800a7de:	e010      	b.n	800a802 <USBH_MSC_Process+0x4ee>
            MSC_Handle->current_lun++;
 800a7e0:	693b      	ldr	r3, [r7, #16]
 800a7e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a7e6:	3301      	adds	r3, #1
 800a7e8:	b29a      	uxth	r2, r3
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800a7f0:	e008      	b.n	800a804 <USBH_MSC_Process+0x4f0>
            break;
 800a7f2:	bf00      	nop
 800a7f4:	e006      	b.n	800a804 <USBH_MSC_Process+0x4f0>
            break;
 800a7f6:	bf00      	nop
 800a7f8:	e004      	b.n	800a804 <USBH_MSC_Process+0x4f0>
            break;
 800a7fa:	bf00      	nop
 800a7fc:	e002      	b.n	800a804 <USBH_MSC_Process+0x4f0>
            break;
 800a7fe:	bf00      	nop
 800a800:	e000      	b.n	800a804 <USBH_MSC_Process+0x4f0>
            break;
 800a802:	bf00      	nop
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2204      	movs	r2, #4
 800a808:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a818:	2300      	movs	r3, #0
 800a81a:	2200      	movs	r2, #0
 800a81c:	f003 f926 	bl	800da6c <osMessageQueuePut>
      break;
 800a820:	e01e      	b.n	800a860 <USBH_MSC_Process+0x54c>
        MSC_Handle->current_lun = 0U;
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	2200      	movs	r2, #0
 800a826:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	2201      	movs	r2, #1
 800a82e:	731a      	strb	r2, [r3, #12]
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2204      	movs	r2, #4
 800a834:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a844:	2300      	movs	r3, #0
 800a846:	2200      	movs	r2, #0
 800a848:	f003 f910 	bl	800da6c <osMessageQueuePut>
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a852:	2102      	movs	r1, #2
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	4798      	blx	r3
      break;
 800a858:	e002      	b.n	800a860 <USBH_MSC_Process+0x54c>
      error = USBH_OK;
 800a85a:	2300      	movs	r3, #0
 800a85c:	75fb      	strb	r3, [r7, #23]
      break;
 800a85e:	bf00      	nop
  }
  return error;
 800a860:	7dfb      	ldrb	r3, [r7, #23]
}
 800a862:	4618      	mov	r0, r3
 800a864:	3718      	adds	r7, #24
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}
 800a86a:	bf00      	nop

0800a86c <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a86c:	b480      	push	{r7}
 800a86e:	b083      	sub	sp, #12
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a874:	2300      	movs	r3, #0
}
 800a876:	4618      	mov	r0, r3
 800a878:	370c      	adds	r7, #12
 800a87a:	46bd      	mov	sp, r7
 800a87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a880:	4770      	bx	lr

0800a882 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a882:	b580      	push	{r7, lr}
 800a884:	b088      	sub	sp, #32
 800a886:	af02      	add	r7, sp, #8
 800a888:	6078      	str	r0, [r7, #4]
 800a88a:	460b      	mov	r3, r1
 800a88c:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a894:	69db      	ldr	r3, [r3, #28]
 800a896:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800a898:	2301      	movs	r3, #1
 800a89a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800a89c:	2301      	movs	r3, #1
 800a89e:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800a8a0:	78fb      	ldrb	r3, [r7, #3]
 800a8a2:	693a      	ldr	r2, [r7, #16]
 800a8a4:	2134      	movs	r1, #52	; 0x34
 800a8a6:	fb01 f303 	mul.w	r3, r1, r3
 800a8aa:	4413      	add	r3, r2
 800a8ac:	3390      	adds	r3, #144	; 0x90
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	2b06      	cmp	r3, #6
 800a8b2:	d005      	beq.n	800a8c0 <USBH_MSC_RdWrProcess+0x3e>
 800a8b4:	2b07      	cmp	r3, #7
 800a8b6:	d046      	beq.n	800a946 <USBH_MSC_RdWrProcess+0xc4>
 800a8b8:	2b05      	cmp	r3, #5
 800a8ba:	f000 8087 	beq.w	800a9cc <USBH_MSC_RdWrProcess+0x14a>
#endif
#endif
      break;

    default:
      break;
 800a8be:	e0cb      	b.n	800aa58 <USBH_MSC_RdWrProcess+0x1d6>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800a8c0:	78f9      	ldrb	r1, [r7, #3]
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	9300      	str	r3, [sp, #0]
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f000 ff57 	bl	800b77e <USBH_MSC_SCSI_Read>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 800a8d4:	7bfb      	ldrb	r3, [r7, #15]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d10b      	bne.n	800a8f2 <USBH_MSC_RdWrProcess+0x70>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a8da:	78fb      	ldrb	r3, [r7, #3]
 800a8dc:	693a      	ldr	r2, [r7, #16]
 800a8de:	2134      	movs	r1, #52	; 0x34
 800a8e0:	fb01 f303 	mul.w	r3, r1, r3
 800a8e4:	4413      	add	r3, r2
 800a8e6:	3390      	adds	r3, #144	; 0x90
 800a8e8:	2201      	movs	r2, #1
 800a8ea:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	75fb      	strb	r3, [r7, #23]
 800a8f0:	e01a      	b.n	800a928 <USBH_MSC_RdWrProcess+0xa6>
      else if (scsi_status == USBH_FAIL)
 800a8f2:	7bfb      	ldrb	r3, [r7, #15]
 800a8f4:	2b02      	cmp	r3, #2
 800a8f6:	d109      	bne.n	800a90c <USBH_MSC_RdWrProcess+0x8a>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800a8f8:	78fb      	ldrb	r3, [r7, #3]
 800a8fa:	693a      	ldr	r2, [r7, #16]
 800a8fc:	2134      	movs	r1, #52	; 0x34
 800a8fe:	fb01 f303 	mul.w	r3, r1, r3
 800a902:	4413      	add	r3, r2
 800a904:	3390      	adds	r3, #144	; 0x90
 800a906:	2205      	movs	r2, #5
 800a908:	701a      	strb	r2, [r3, #0]
 800a90a:	e00d      	b.n	800a928 <USBH_MSC_RdWrProcess+0xa6>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a90c:	7bfb      	ldrb	r3, [r7, #15]
 800a90e:	2b04      	cmp	r3, #4
 800a910:	d10a      	bne.n	800a928 <USBH_MSC_RdWrProcess+0xa6>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a912:	78fb      	ldrb	r3, [r7, #3]
 800a914:	693a      	ldr	r2, [r7, #16]
 800a916:	2134      	movs	r1, #52	; 0x34
 800a918:	fb01 f303 	mul.w	r3, r1, r3
 800a91c:	4413      	add	r3, r2
 800a91e:	3390      	adds	r3, #144	; 0x90
 800a920:	2208      	movs	r2, #8
 800a922:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a924:	2302      	movs	r3, #2
 800a926:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2204      	movs	r2, #4
 800a92c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a93c:	2300      	movs	r3, #0
 800a93e:	2200      	movs	r2, #0
 800a940:	f003 f894 	bl	800da6c <osMessageQueuePut>
      break;
 800a944:	e088      	b.n	800aa58 <USBH_MSC_RdWrProcess+0x1d6>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800a946:	78f9      	ldrb	r1, [r7, #3]
 800a948:	2300      	movs	r3, #0
 800a94a:	9300      	str	r3, [sp, #0]
 800a94c:	2300      	movs	r3, #0
 800a94e:	2200      	movs	r2, #0
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f000 fea9 	bl	800b6a8 <USBH_MSC_SCSI_Write>
 800a956:	4603      	mov	r3, r0
 800a958:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 800a95a:	7bfb      	ldrb	r3, [r7, #15]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d10b      	bne.n	800a978 <USBH_MSC_RdWrProcess+0xf6>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a960:	78fb      	ldrb	r3, [r7, #3]
 800a962:	693a      	ldr	r2, [r7, #16]
 800a964:	2134      	movs	r1, #52	; 0x34
 800a966:	fb01 f303 	mul.w	r3, r1, r3
 800a96a:	4413      	add	r3, r2
 800a96c:	3390      	adds	r3, #144	; 0x90
 800a96e:	2201      	movs	r2, #1
 800a970:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800a972:	2300      	movs	r3, #0
 800a974:	75fb      	strb	r3, [r7, #23]
 800a976:	e01a      	b.n	800a9ae <USBH_MSC_RdWrProcess+0x12c>
      else if (scsi_status == USBH_FAIL)
 800a978:	7bfb      	ldrb	r3, [r7, #15]
 800a97a:	2b02      	cmp	r3, #2
 800a97c:	d109      	bne.n	800a992 <USBH_MSC_RdWrProcess+0x110>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800a97e:	78fb      	ldrb	r3, [r7, #3]
 800a980:	693a      	ldr	r2, [r7, #16]
 800a982:	2134      	movs	r1, #52	; 0x34
 800a984:	fb01 f303 	mul.w	r3, r1, r3
 800a988:	4413      	add	r3, r2
 800a98a:	3390      	adds	r3, #144	; 0x90
 800a98c:	2205      	movs	r2, #5
 800a98e:	701a      	strb	r2, [r3, #0]
 800a990:	e00d      	b.n	800a9ae <USBH_MSC_RdWrProcess+0x12c>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a992:	7bfb      	ldrb	r3, [r7, #15]
 800a994:	2b04      	cmp	r3, #4
 800a996:	d10a      	bne.n	800a9ae <USBH_MSC_RdWrProcess+0x12c>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a998:	78fb      	ldrb	r3, [r7, #3]
 800a99a:	693a      	ldr	r2, [r7, #16]
 800a99c:	2134      	movs	r1, #52	; 0x34
 800a99e:	fb01 f303 	mul.w	r3, r1, r3
 800a9a2:	4413      	add	r3, r2
 800a9a4:	3390      	adds	r3, #144	; 0x90
 800a9a6:	2208      	movs	r2, #8
 800a9a8:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a9aa:	2302      	movs	r3, #2
 800a9ac:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2204      	movs	r2, #4
 800a9b2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	f003 f851 	bl	800da6c <osMessageQueuePut>
      break;
 800a9ca:	e045      	b.n	800aa58 <USBH_MSC_RdWrProcess+0x1d6>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800a9cc:	78fb      	ldrb	r3, [r7, #3]
 800a9ce:	2234      	movs	r2, #52	; 0x34
 800a9d0:	fb02 f303 	mul.w	r3, r2, r3
 800a9d4:	3398      	adds	r3, #152	; 0x98
 800a9d6:	693a      	ldr	r2, [r7, #16]
 800a9d8:	4413      	add	r3, r2
 800a9da:	1d1a      	adds	r2, r3, #4
 800a9dc:	78fb      	ldrb	r3, [r7, #3]
 800a9de:	4619      	mov	r1, r3
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f000 fde8 	bl	800b5b6 <USBH_MSC_SCSI_RequestSense>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 800a9ea:	7bfb      	ldrb	r3, [r7, #15]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d113      	bne.n	800aa18 <USBH_MSC_RdWrProcess+0x196>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a9f0:	78fb      	ldrb	r3, [r7, #3]
 800a9f2:	693a      	ldr	r2, [r7, #16]
 800a9f4:	2134      	movs	r1, #52	; 0x34
 800a9f6:	fb01 f303 	mul.w	r3, r1, r3
 800a9fa:	4413      	add	r3, r2
 800a9fc:	3390      	adds	r3, #144	; 0x90
 800a9fe:	2201      	movs	r2, #1
 800aa00:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800aa02:	78fb      	ldrb	r3, [r7, #3]
 800aa04:	693a      	ldr	r2, [r7, #16]
 800aa06:	2134      	movs	r1, #52	; 0x34
 800aa08:	fb01 f303 	mul.w	r3, r1, r3
 800aa0c:	4413      	add	r3, r2
 800aa0e:	3391      	adds	r3, #145	; 0x91
 800aa10:	2202      	movs	r2, #2
 800aa12:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 800aa14:	2302      	movs	r3, #2
 800aa16:	75fb      	strb	r3, [r7, #23]
      if (scsi_status == USBH_FAIL)
 800aa18:	7bfb      	ldrb	r3, [r7, #15]
 800aa1a:	2b02      	cmp	r3, #2
 800aa1c:	d00d      	beq.n	800aa3a <USBH_MSC_RdWrProcess+0x1b8>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800aa1e:	7bfb      	ldrb	r3, [r7, #15]
 800aa20:	2b04      	cmp	r3, #4
 800aa22:	d10a      	bne.n	800aa3a <USBH_MSC_RdWrProcess+0x1b8>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800aa24:	78fb      	ldrb	r3, [r7, #3]
 800aa26:	693a      	ldr	r2, [r7, #16]
 800aa28:	2134      	movs	r1, #52	; 0x34
 800aa2a:	fb01 f303 	mul.w	r3, r1, r3
 800aa2e:	4413      	add	r3, r2
 800aa30:	3390      	adds	r3, #144	; 0x90
 800aa32:	2208      	movs	r2, #8
 800aa34:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800aa36:	2302      	movs	r3, #2
 800aa38:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2204      	movs	r2, #4
 800aa3e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800aa4e:	2300      	movs	r3, #0
 800aa50:	2200      	movs	r2, #0
 800aa52:	f003 f80b 	bl	800da6c <osMessageQueuePut>
      break;
 800aa56:	bf00      	nop

  }
  return error;
 800aa58:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3718      	adds	r7, #24
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}

0800aa62 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800aa62:	b480      	push	{r7}
 800aa64:	b085      	sub	sp, #20
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	6078      	str	r0, [r7, #4]
 800aa6a:	460b      	mov	r3, r1
 800aa6c:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa74:	69db      	ldr	r3, [r3, #28]
 800aa76:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	781b      	ldrb	r3, [r3, #0]
 800aa7c:	b2db      	uxtb	r3, r3
 800aa7e:	2b0b      	cmp	r3, #11
 800aa80:	d10c      	bne.n	800aa9c <USBH_MSC_UnitIsReady+0x3a>
 800aa82:	78fb      	ldrb	r3, [r7, #3]
 800aa84:	68ba      	ldr	r2, [r7, #8]
 800aa86:	2134      	movs	r1, #52	; 0x34
 800aa88:	fb01 f303 	mul.w	r3, r1, r3
 800aa8c:	4413      	add	r3, r2
 800aa8e:	3391      	adds	r3, #145	; 0x91
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d102      	bne.n	800aa9c <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800aa96:	2301      	movs	r3, #1
 800aa98:	73fb      	strb	r3, [r7, #15]
 800aa9a:	e001      	b.n	800aaa0 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800aaa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3714      	adds	r7, #20
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaac:	4770      	bx	lr

0800aaae <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800aaae:	b580      	push	{r7, lr}
 800aab0:	b086      	sub	sp, #24
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	60f8      	str	r0, [r7, #12]
 800aab6:	460b      	mov	r3, r1
 800aab8:	607a      	str	r2, [r7, #4]
 800aaba:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aac2:	69db      	ldr	r3, [r3, #28]
 800aac4:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	b2db      	uxtb	r3, r3
 800aacc:	2b0b      	cmp	r3, #11
 800aace:	d10d      	bne.n	800aaec <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800aad0:	7afb      	ldrb	r3, [r7, #11]
 800aad2:	2234      	movs	r2, #52	; 0x34
 800aad4:	fb02 f303 	mul.w	r3, r2, r3
 800aad8:	3390      	adds	r3, #144	; 0x90
 800aada:	697a      	ldr	r2, [r7, #20]
 800aadc:	4413      	add	r3, r2
 800aade:	2234      	movs	r2, #52	; 0x34
 800aae0:	4619      	mov	r1, r3
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f006 fdd6 	bl	8011694 <memcpy>
    return USBH_OK;
 800aae8:	2300      	movs	r3, #0
 800aaea:	e000      	b.n	800aaee <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800aaec:	2302      	movs	r3, #2
  }
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3718      	adds	r7, #24
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}

0800aaf6 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800aaf6:	b580      	push	{r7, lr}
 800aaf8:	b088      	sub	sp, #32
 800aafa:	af02      	add	r7, sp, #8
 800aafc:	60f8      	str	r0, [r7, #12]
 800aafe:	607a      	str	r2, [r7, #4]
 800ab00:	603b      	str	r3, [r7, #0]
 800ab02:	460b      	mov	r3, r1
 800ab04:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab0c:	69db      	ldr	r3, [r3, #28]
 800ab0e:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800ab16:	b2db      	uxtb	r3, r3
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d00e      	beq.n	800ab3a <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	781b      	ldrb	r3, [r3, #0]
 800ab20:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800ab22:	2b0b      	cmp	r3, #11
 800ab24:	d109      	bne.n	800ab3a <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800ab26:	7afb      	ldrb	r3, [r7, #11]
 800ab28:	697a      	ldr	r2, [r7, #20]
 800ab2a:	2134      	movs	r1, #52	; 0x34
 800ab2c:	fb01 f303 	mul.w	r3, r1, r3
 800ab30:	4413      	add	r3, r2
 800ab32:	3390      	adds	r3, #144	; 0x90
 800ab34:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800ab36:	2b01      	cmp	r3, #1
 800ab38:	d001      	beq.n	800ab3e <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800ab3a:	2302      	movs	r3, #2
 800ab3c:	e040      	b.n	800abc0 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	2206      	movs	r2, #6
 800ab42:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800ab44:	7afb      	ldrb	r3, [r7, #11]
 800ab46:	697a      	ldr	r2, [r7, #20]
 800ab48:	2134      	movs	r1, #52	; 0x34
 800ab4a:	fb01 f303 	mul.w	r3, r1, r3
 800ab4e:	4413      	add	r3, r2
 800ab50:	3390      	adds	r3, #144	; 0x90
 800ab52:	2206      	movs	r2, #6
 800ab54:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800ab56:	7afb      	ldrb	r3, [r7, #11]
 800ab58:	b29a      	uxth	r2, r3
 800ab5a:	697b      	ldr	r3, [r7, #20]
 800ab5c:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800ab60:	7af9      	ldrb	r1, [r7, #11]
 800ab62:	6a3b      	ldr	r3, [r7, #32]
 800ab64:	9300      	str	r3, [sp, #0]
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	687a      	ldr	r2, [r7, #4]
 800ab6a:	68f8      	ldr	r0, [r7, #12]
 800ab6c:	f000 fe07 	bl	800b77e <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ab76:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800ab78:	e016      	b.n	800aba8 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	1ad2      	subs	r2, r2, r3
 800ab84:	6a3b      	ldr	r3, [r7, #32]
 800ab86:	f242 7110 	movw	r1, #10000	; 0x2710
 800ab8a:	fb01 f303 	mul.w	r3, r1, r3
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d805      	bhi.n	800ab9e <USBH_MSC_Read+0xa8>
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800ab98:	b2db      	uxtb	r3, r3
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d104      	bne.n	800aba8 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	2201      	movs	r2, #1
 800aba2:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800aba4:	2302      	movs	r3, #2
 800aba6:	e00b      	b.n	800abc0 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800aba8:	7afb      	ldrb	r3, [r7, #11]
 800abaa:	4619      	mov	r1, r3
 800abac:	68f8      	ldr	r0, [r7, #12]
 800abae:	f7ff fe68 	bl	800a882 <USBH_MSC_RdWrProcess>
 800abb2:	4603      	mov	r3, r0
 800abb4:	2b01      	cmp	r3, #1
 800abb6:	d0e0      	beq.n	800ab7a <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	2201      	movs	r2, #1
 800abbc:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800abbe:	2300      	movs	r3, #0
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3718      	adds	r7, #24
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b088      	sub	sp, #32
 800abcc:	af02      	add	r7, sp, #8
 800abce:	60f8      	str	r0, [r7, #12]
 800abd0:	607a      	str	r2, [r7, #4]
 800abd2:	603b      	str	r3, [r7, #0]
 800abd4:	460b      	mov	r3, r1
 800abd6:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800abde:	69db      	ldr	r3, [r3, #28]
 800abe0:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800abe8:	b2db      	uxtb	r3, r3
 800abea:	2b00      	cmp	r3, #0
 800abec:	d00e      	beq.n	800ac0c <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	781b      	ldrb	r3, [r3, #0]
 800abf2:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800abf4:	2b0b      	cmp	r3, #11
 800abf6:	d109      	bne.n	800ac0c <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800abf8:	7afb      	ldrb	r3, [r7, #11]
 800abfa:	697a      	ldr	r2, [r7, #20]
 800abfc:	2134      	movs	r1, #52	; 0x34
 800abfe:	fb01 f303 	mul.w	r3, r1, r3
 800ac02:	4413      	add	r3, r2
 800ac04:	3390      	adds	r3, #144	; 0x90
 800ac06:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800ac08:	2b01      	cmp	r3, #1
 800ac0a:	d001      	beq.n	800ac10 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800ac0c:	2302      	movs	r3, #2
 800ac0e:	e040      	b.n	800ac92 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	2207      	movs	r2, #7
 800ac14:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800ac16:	7afb      	ldrb	r3, [r7, #11]
 800ac18:	697a      	ldr	r2, [r7, #20]
 800ac1a:	2134      	movs	r1, #52	; 0x34
 800ac1c:	fb01 f303 	mul.w	r3, r1, r3
 800ac20:	4413      	add	r3, r2
 800ac22:	3390      	adds	r3, #144	; 0x90
 800ac24:	2207      	movs	r2, #7
 800ac26:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800ac28:	7afb      	ldrb	r3, [r7, #11]
 800ac2a:	b29a      	uxth	r2, r3
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800ac32:	7af9      	ldrb	r1, [r7, #11]
 800ac34:	6a3b      	ldr	r3, [r7, #32]
 800ac36:	9300      	str	r3, [sp, #0]
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	687a      	ldr	r2, [r7, #4]
 800ac3c:	68f8      	ldr	r0, [r7, #12]
 800ac3e:	f000 fd33 	bl	800b6a8 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ac48:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800ac4a:	e016      	b.n	800ac7a <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800ac52:	693b      	ldr	r3, [r7, #16]
 800ac54:	1ad2      	subs	r2, r2, r3
 800ac56:	6a3b      	ldr	r3, [r7, #32]
 800ac58:	f242 7110 	movw	r1, #10000	; 0x2710
 800ac5c:	fb01 f303 	mul.w	r3, r1, r3
 800ac60:	429a      	cmp	r2, r3
 800ac62:	d805      	bhi.n	800ac70 <USBH_MSC_Write+0xa8>
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800ac6a:	b2db      	uxtb	r3, r3
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d104      	bne.n	800ac7a <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	2201      	movs	r2, #1
 800ac74:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800ac76:	2302      	movs	r3, #2
 800ac78:	e00b      	b.n	800ac92 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800ac7a:	7afb      	ldrb	r3, [r7, #11]
 800ac7c:	4619      	mov	r1, r3
 800ac7e:	68f8      	ldr	r0, [r7, #12]
 800ac80:	f7ff fdff 	bl	800a882 <USBH_MSC_RdWrProcess>
 800ac84:	4603      	mov	r3, r0
 800ac86:	2b01      	cmp	r3, #1
 800ac88:	d0e0      	beq.n	800ac4c <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	2201      	movs	r2, #1
 800ac8e:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800ac90:	2300      	movs	r3, #0
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3718      	adds	r7, #24
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}

0800ac9a <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800ac9a:	b580      	push	{r7, lr}
 800ac9c:	b082      	sub	sp, #8
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2221      	movs	r2, #33	; 0x21
 800aca6:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	22ff      	movs	r2, #255	; 0xff
 800acac:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2200      	movs	r2, #0
 800acb2:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2200      	movs	r2, #0
 800acb8:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2200      	movs	r2, #0
 800acbe:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 800acc0:	2200      	movs	r2, #0
 800acc2:	2100      	movs	r1, #0
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f001 ff7a 	bl	800cbbe <USBH_CtlReq>
 800acca:	4603      	mov	r3, r0
}
 800accc:	4618      	mov	r0, r3
 800acce:	3708      	adds	r7, #8
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}

0800acd4 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b082      	sub	sp, #8
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
 800acdc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	22a1      	movs	r2, #161	; 0xa1
 800ace2:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	22fe      	movs	r2, #254	; 0xfe
 800ace8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2200      	movs	r2, #0
 800acee:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2200      	movs	r2, #0
 800acf4:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2201      	movs	r2, #1
 800acfa:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800acfc:	2201      	movs	r2, #1
 800acfe:	6839      	ldr	r1, [r7, #0]
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f001 ff5c 	bl	800cbbe <USBH_CtlReq>
 800ad06:	4603      	mov	r3, r0
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3708      	adds	r7, #8
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}

0800ad10 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b085      	sub	sp, #20
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad1e:	69db      	ldr	r3, [r3, #28]
 800ad20:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	4a09      	ldr	r2, [pc, #36]	; (800ad4c <USBH_MSC_BOT_Init+0x3c>)
 800ad26:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	4a09      	ldr	r2, [pc, #36]	; (800ad50 <USBH_MSC_BOT_Init+0x40>)
 800ad2c:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	2201      	movs	r2, #1
 800ad32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	2201      	movs	r2, #1
 800ad3a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800ad3e:	2300      	movs	r3, #0
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3714      	adds	r7, #20
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr
 800ad4c:	43425355 	.word	0x43425355
 800ad50:	20304050 	.word	0x20304050

0800ad54 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b088      	sub	sp, #32
 800ad58:	af02      	add	r7, sp, #8
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	460b      	mov	r3, r1
 800ad5e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800ad60:	2301      	movs	r3, #1
 800ad62:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800ad64:	2301      	movs	r3, #1
 800ad66:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800ad68:	2301      	movs	r3, #1
 800ad6a:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad76:	69db      	ldr	r3, [r3, #28]
 800ad78:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ad84:	3b01      	subs	r3, #1
 800ad86:	2b0a      	cmp	r3, #10
 800ad88:	f200 822d 	bhi.w	800b1e6 <USBH_MSC_BOT_Process+0x492>
 800ad8c:	a201      	add	r2, pc, #4	; (adr r2, 800ad94 <USBH_MSC_BOT_Process+0x40>)
 800ad8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad92:	bf00      	nop
 800ad94:	0800adc1 	.word	0x0800adc1
 800ad98:	0800adeb 	.word	0x0800adeb
 800ad9c:	0800aea9 	.word	0x0800aea9
 800ada0:	0800aec7 	.word	0x0800aec7
 800ada4:	0800af83 	.word	0x0800af83
 800ada8:	0800afa7 	.word	0x0800afa7
 800adac:	0800b095 	.word	0x0800b095
 800adb0:	0800b0b1 	.word	0x0800b0b1
 800adb4:	0800b13b 	.word	0x0800b13b
 800adb8:	0800b16b 	.word	0x0800b16b
 800adbc:	0800b1cd 	.word	0x0800b1cd
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800adc0:	693b      	ldr	r3, [r7, #16]
 800adc2:	78fa      	ldrb	r2, [r7, #3]
 800adc4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	2202      	movs	r2, #2
 800adcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800add0:	693b      	ldr	r3, [r7, #16]
 800add2:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800add6:	693b      	ldr	r3, [r7, #16]
 800add8:	795a      	ldrb	r2, [r3, #5]
 800adda:	2301      	movs	r3, #1
 800addc:	9300      	str	r3, [sp, #0]
 800adde:	4613      	mov	r3, r2
 800ade0:	221f      	movs	r2, #31
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f002 f9eb 	bl	800d1be <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800ade8:	e20c      	b.n	800b204 <USBH_MSC_BOT_Process+0x4b0>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	795b      	ldrb	r3, [r3, #5]
 800adee:	4619      	mov	r1, r3
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f006 fb31 	bl	8011458 <USBH_LL_GetURBState>
 800adf6:	4603      	mov	r3, r0
 800adf8:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800adfa:	7d3b      	ldrb	r3, [r7, #20]
 800adfc:	2b01      	cmp	r3, #1
 800adfe:	d126      	bne.n	800ae4e <USBH_MSC_BOT_Process+0xfa>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d00f      	beq.n	800ae28 <USBH_MSC_BOT_Process+0xd4>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800ae0e:	b25b      	sxtb	r3, r3
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	da04      	bge.n	800ae1e <USBH_MSC_BOT_Process+0xca>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	2203      	movs	r2, #3
 800ae18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800ae1c:	e008      	b.n	800ae30 <USBH_MSC_BOT_Process+0xdc>
          }
          else
          {
            /* Data Direction is OUT */
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	2205      	movs	r2, #5
 800ae22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800ae26:	e003      	b.n	800ae30 <USBH_MSC_BOT_Process+0xdc>
        }

        else
        {
          /* If there is NO Data Transfer Stage */
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	2207      	movs	r2, #7
 800ae2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2202      	movs	r2, #2
 800ae34:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ae44:	2300      	movs	r3, #0
 800ae46:	2200      	movs	r2, #0
 800ae48:	f002 fe10 	bl	800da6c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ae4c:	e1cd      	b.n	800b1ea <USBH_MSC_BOT_Process+0x496>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ae4e:	7d3b      	ldrb	r3, [r7, #20]
 800ae50:	2b02      	cmp	r3, #2
 800ae52:	d112      	bne.n	800ae7a <USBH_MSC_BOT_Process+0x126>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	2201      	movs	r2, #1
 800ae58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2202      	movs	r2, #2
 800ae60:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ae70:	2300      	movs	r3, #0
 800ae72:	2200      	movs	r2, #0
 800ae74:	f002 fdfa 	bl	800da6c <osMessageQueuePut>
      break;
 800ae78:	e1b7      	b.n	800b1ea <USBH_MSC_BOT_Process+0x496>
        if (URB_Status == USBH_URB_STALL)
 800ae7a:	7d3b      	ldrb	r3, [r7, #20]
 800ae7c:	2b05      	cmp	r3, #5
 800ae7e:	f040 81b4 	bne.w	800b1ea <USBH_MSC_BOT_Process+0x496>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800ae82:	693b      	ldr	r3, [r7, #16]
 800ae84:	220a      	movs	r2, #10
 800ae86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2202      	movs	r2, #2
 800ae8e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ae9e:	2300      	movs	r3, #0
 800aea0:	2200      	movs	r2, #0
 800aea2:	f002 fde3 	bl	800da6c <osMessageQueuePut>
      break;
 800aea6:	e1a0      	b.n	800b1ea <USBH_MSC_BOT_Process+0x496>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	895a      	ldrh	r2, [r3, #10]
 800aeb2:	693b      	ldr	r3, [r7, #16]
 800aeb4:	791b      	ldrb	r3, [r3, #4]
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f002 f9a6 	bl	800d208 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	2204      	movs	r2, #4
 800aec0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800aec4:	e19e      	b.n	800b204 <USBH_MSC_BOT_Process+0x4b0>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800aec6:	693b      	ldr	r3, [r7, #16]
 800aec8:	791b      	ldrb	r3, [r3, #4]
 800aeca:	4619      	mov	r1, r3
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f006 fac3 	bl	8011458 <USBH_LL_GetURBState>
 800aed2:	4603      	mov	r3, r0
 800aed4:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800aed6:	7d3b      	ldrb	r3, [r7, #20]
 800aed8:	2b01      	cmp	r3, #1
 800aeda:	d13b      	bne.n	800af54 <USBH_MSC_BOT_Process+0x200>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aee0:	693a      	ldr	r2, [r7, #16]
 800aee2:	8952      	ldrh	r2, [r2, #10]
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d910      	bls.n	800af0a <USBH_MSC_BOT_Process+0x1b6>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aeee:	693a      	ldr	r2, [r7, #16]
 800aef0:	8952      	ldrh	r2, [r2, #10]
 800aef2:	441a      	add	r2, r3
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aefe:	693a      	ldr	r2, [r7, #16]
 800af00:	8952      	ldrh	r2, [r2, #10]
 800af02:	1a9a      	subs	r2, r3, r2
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	65da      	str	r2, [r3, #92]	; 0x5c
 800af08:	e002      	b.n	800af10 <USBH_MSC_BOT_Process+0x1bc>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800af0a:	693b      	ldr	r3, [r7, #16]
 800af0c:	2200      	movs	r2, #0
 800af0e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800af10:	693b      	ldr	r3, [r7, #16]
 800af12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af14:	2b00      	cmp	r3, #0
 800af16:	d00a      	beq.n	800af2e <USBH_MSC_BOT_Process+0x1da>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800af18:	693b      	ldr	r3, [r7, #16]
 800af1a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800af1e:	693b      	ldr	r3, [r7, #16]
 800af20:	895a      	ldrh	r2, [r3, #10]
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	791b      	ldrb	r3, [r3, #4]
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f002 f96e 	bl	800d208 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800af2c:	e15f      	b.n	800b1ee <USBH_MSC_BOT_Process+0x49a>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800af2e:	693b      	ldr	r3, [r7, #16]
 800af30:	2207      	movs	r2, #7
 800af32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2202      	movs	r2, #2
 800af3a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800af4a:	2300      	movs	r3, #0
 800af4c:	2200      	movs	r2, #0
 800af4e:	f002 fd8d 	bl	800da6c <osMessageQueuePut>
      break;
 800af52:	e14c      	b.n	800b1ee <USBH_MSC_BOT_Process+0x49a>
      else if (URB_Status == USBH_URB_STALL)
 800af54:	7d3b      	ldrb	r3, [r7, #20]
 800af56:	2b05      	cmp	r3, #5
 800af58:	f040 8149 	bne.w	800b1ee <USBH_MSC_BOT_Process+0x49a>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	2209      	movs	r2, #9
 800af60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2202      	movs	r2, #2
 800af68:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800af78:	2300      	movs	r3, #0
 800af7a:	2200      	movs	r2, #0
 800af7c:	f002 fd76 	bl	800da6c <osMessageQueuePut>
      break;
 800af80:	e135      	b.n	800b1ee <USBH_MSC_BOT_Process+0x49a>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	891a      	ldrh	r2, [r3, #8]
 800af8c:	693b      	ldr	r3, [r7, #16]
 800af8e:	7958      	ldrb	r0, [r3, #5]
 800af90:	2301      	movs	r3, #1
 800af92:	9300      	str	r3, [sp, #0]
 800af94:	4603      	mov	r3, r0
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f002 f911 	bl	800d1be <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	2206      	movs	r2, #6
 800afa0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800afa4:	e12e      	b.n	800b204 <USBH_MSC_BOT_Process+0x4b0>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	795b      	ldrb	r3, [r3, #5]
 800afaa:	4619      	mov	r1, r3
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f006 fa53 	bl	8011458 <USBH_LL_GetURBState>
 800afb2:	4603      	mov	r3, r0
 800afb4:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800afb6:	7d3b      	ldrb	r3, [r7, #20]
 800afb8:	2b01      	cmp	r3, #1
 800afba:	d13e      	bne.n	800b03a <USBH_MSC_BOT_Process+0x2e6>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800afc0:	693a      	ldr	r2, [r7, #16]
 800afc2:	8912      	ldrh	r2, [r2, #8]
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d910      	bls.n	800afea <USBH_MSC_BOT_Process+0x296>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800afce:	693a      	ldr	r2, [r7, #16]
 800afd0:	8912      	ldrh	r2, [r2, #8]
 800afd2:	441a      	add	r2, r3
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800afde:	693a      	ldr	r2, [r7, #16]
 800afe0:	8912      	ldrh	r2, [r2, #8]
 800afe2:	1a9a      	subs	r2, r3, r2
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	65da      	str	r2, [r3, #92]	; 0x5c
 800afe8:	e002      	b.n	800aff0 <USBH_MSC_BOT_Process+0x29c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	2200      	movs	r2, #0
 800afee:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d00d      	beq.n	800b014 <USBH_MSC_BOT_Process+0x2c0>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800affe:	693b      	ldr	r3, [r7, #16]
 800b000:	891a      	ldrh	r2, [r3, #8]
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	7958      	ldrb	r0, [r3, #5]
 800b006:	2301      	movs	r3, #1
 800b008:	9300      	str	r3, [sp, #0]
 800b00a:	4603      	mov	r3, r0
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f002 f8d6 	bl	800d1be <USBH_BulkSendData>
 800b012:	e003      	b.n	800b01c <USBH_MSC_BOT_Process+0x2c8>
                            MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);
        }
        else
        {
          /* If value was 0, and successful transfer, then change the state */
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	2207      	movs	r2, #7
 800b018:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2202      	movs	r2, #2
 800b020:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b030:	2300      	movs	r3, #0
 800b032:	2200      	movs	r2, #0
 800b034:	f002 fd1a 	bl	800da6c <osMessageQueuePut>
#endif
      }
      else
      {
      }
      break;
 800b038:	e0db      	b.n	800b1f2 <USBH_MSC_BOT_Process+0x49e>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b03a:	7d3b      	ldrb	r3, [r7, #20]
 800b03c:	2b02      	cmp	r3, #2
 800b03e:	d112      	bne.n	800b066 <USBH_MSC_BOT_Process+0x312>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	2205      	movs	r2, #5
 800b044:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2202      	movs	r2, #2
 800b04c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b05c:	2300      	movs	r3, #0
 800b05e:	2200      	movs	r2, #0
 800b060:	f002 fd04 	bl	800da6c <osMessageQueuePut>
      break;
 800b064:	e0c5      	b.n	800b1f2 <USBH_MSC_BOT_Process+0x49e>
      else if (URB_Status == USBH_URB_STALL)
 800b066:	7d3b      	ldrb	r3, [r7, #20]
 800b068:	2b05      	cmp	r3, #5
 800b06a:	f040 80c2 	bne.w	800b1f2 <USBH_MSC_BOT_Process+0x49e>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	220a      	movs	r2, #10
 800b072:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2202      	movs	r2, #2
 800b07a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b08a:	2300      	movs	r3, #0
 800b08c:	2200      	movs	r2, #0
 800b08e:	f002 fced 	bl	800da6c <osMessageQueuePut>
      break;
 800b092:	e0ae      	b.n	800b1f2 <USBH_MSC_BOT_Process+0x49e>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800b094:	693b      	ldr	r3, [r7, #16]
 800b096:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	791b      	ldrb	r3, [r3, #4]
 800b09e:	220d      	movs	r2, #13
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f002 f8b1 	bl	800d208 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	2208      	movs	r2, #8
 800b0aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b0ae:	e0a9      	b.n	800b204 <USBH_MSC_BOT_Process+0x4b0>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800b0b0:	693b      	ldr	r3, [r7, #16]
 800b0b2:	791b      	ldrb	r3, [r3, #4]
 800b0b4:	4619      	mov	r1, r3
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f006 f9ce 	bl	8011458 <USBH_LL_GetURBState>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800b0c0:	7d3b      	ldrb	r3, [r7, #20]
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	d123      	bne.n	800b10e <USBH_MSC_BOT_Process+0x3ba>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	2201      	movs	r2, #1
 800b0ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800b0ce:	693b      	ldr	r3, [r7, #16]
 800b0d0:	2201      	movs	r2, #1
 800b0d2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f000 f8c6 	bl	800b268 <USBH_MSC_DecodeCSW>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800b0e0:	7d7b      	ldrb	r3, [r7, #21]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d102      	bne.n	800b0ec <USBH_MSC_BOT_Process+0x398>
        {
          status = USBH_OK;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	75fb      	strb	r3, [r7, #23]
 800b0ea:	e001      	b.n	800b0f0 <USBH_MSC_BOT_Process+0x39c>
        }
        else
        {
          status = USBH_FAIL;
 800b0ec:	2302      	movs	r3, #2
 800b0ee:	75fb      	strb	r3, [r7, #23]
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2202      	movs	r2, #2
 800b0f4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b104:	2300      	movs	r3, #0
 800b106:	2200      	movs	r2, #0
 800b108:	f002 fcb0 	bl	800da6c <osMessageQueuePut>
#endif
      }
      else
      {
      }
      break;
 800b10c:	e073      	b.n	800b1f6 <USBH_MSC_BOT_Process+0x4a2>
      else if (URB_Status == USBH_URB_STALL)
 800b10e:	7d3b      	ldrb	r3, [r7, #20]
 800b110:	2b05      	cmp	r3, #5
 800b112:	d170      	bne.n	800b1f6 <USBH_MSC_BOT_Process+0x4a2>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	2209      	movs	r2, #9
 800b118:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2202      	movs	r2, #2
 800b120:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800b130:	2300      	movs	r3, #0
 800b132:	2200      	movs	r2, #0
 800b134:	f002 fc9a 	bl	800da6c <osMessageQueuePut>
      break;
 800b138:	e05d      	b.n	800b1f6 <USBH_MSC_BOT_Process+0x4a2>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800b13a:	78fb      	ldrb	r3, [r7, #3]
 800b13c:	2200      	movs	r2, #0
 800b13e:	4619      	mov	r1, r3
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f000 f865 	bl	800b210 <USBH_MSC_BOT_Abort>
 800b146:	4603      	mov	r3, r0
 800b148:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800b14a:	7dbb      	ldrb	r3, [r7, #22]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d104      	bne.n	800b15a <USBH_MSC_BOT_Process+0x406>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800b150:	693b      	ldr	r3, [r7, #16]
 800b152:	2207      	movs	r2, #7
 800b154:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800b158:	e04f      	b.n	800b1fa <USBH_MSC_BOT_Process+0x4a6>
      else if (error == USBH_UNRECOVERED_ERROR)
 800b15a:	7dbb      	ldrb	r3, [r7, #22]
 800b15c:	2b04      	cmp	r3, #4
 800b15e:	d14c      	bne.n	800b1fa <USBH_MSC_BOT_Process+0x4a6>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	220b      	movs	r2, #11
 800b164:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b168:	e047      	b.n	800b1fa <USBH_MSC_BOT_Process+0x4a6>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800b16a:	78fb      	ldrb	r3, [r7, #3]
 800b16c:	2201      	movs	r2, #1
 800b16e:	4619      	mov	r1, r3
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f000 f84d 	bl	800b210 <USBH_MSC_BOT_Abort>
 800b176:	4603      	mov	r3, r0
 800b178:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800b17a:	7dbb      	ldrb	r3, [r7, #22]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d11d      	bne.n	800b1bc <USBH_MSC_BOT_Process+0x468>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	795b      	ldrb	r3, [r3, #5]
 800b184:	4619      	mov	r1, r3
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f006 f9c3 	bl	8011512 <USBH_LL_GetToggle>
 800b18c:	4603      	mov	r3, r0
 800b18e:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800b190:	693b      	ldr	r3, [r7, #16]
 800b192:	7959      	ldrb	r1, [r3, #5]
 800b194:	7bfb      	ldrb	r3, [r7, #15]
 800b196:	f1c3 0301 	rsb	r3, r3, #1
 800b19a:	b2db      	uxtb	r3, r3
 800b19c:	461a      	mov	r2, r3
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f006 f984 	bl	80114ac <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800b1a4:	693b      	ldr	r3, [r7, #16]
 800b1a6:	791b      	ldrb	r3, [r3, #4]
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	4619      	mov	r1, r3
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f006 f97d 	bl	80114ac <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800b1b2:	693b      	ldr	r3, [r7, #16]
 800b1b4:	2209      	movs	r2, #9
 800b1b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800b1ba:	e020      	b.n	800b1fe <USBH_MSC_BOT_Process+0x4aa>
        if (error == USBH_UNRECOVERED_ERROR)
 800b1bc:	7dbb      	ldrb	r3, [r7, #22]
 800b1be:	2b04      	cmp	r3, #4
 800b1c0:	d11d      	bne.n	800b1fe <USBH_MSC_BOT_Process+0x4aa>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	220b      	movs	r2, #11
 800b1c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b1ca:	e018      	b.n	800b1fe <USBH_MSC_BOT_Process+0x4aa>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f7ff fd64 	bl	800ac9a <USBH_MSC_BOT_REQ_Reset>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800b1d6:	7dfb      	ldrb	r3, [r7, #23]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d112      	bne.n	800b202 <USBH_MSC_BOT_Process+0x4ae>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	2201      	movs	r2, #1
 800b1e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800b1e4:	e00d      	b.n	800b202 <USBH_MSC_BOT_Process+0x4ae>

    default:
      break;
 800b1e6:	bf00      	nop
 800b1e8:	e00c      	b.n	800b204 <USBH_MSC_BOT_Process+0x4b0>
      break;
 800b1ea:	bf00      	nop
 800b1ec:	e00a      	b.n	800b204 <USBH_MSC_BOT_Process+0x4b0>
      break;
 800b1ee:	bf00      	nop
 800b1f0:	e008      	b.n	800b204 <USBH_MSC_BOT_Process+0x4b0>
      break;
 800b1f2:	bf00      	nop
 800b1f4:	e006      	b.n	800b204 <USBH_MSC_BOT_Process+0x4b0>
      break;
 800b1f6:	bf00      	nop
 800b1f8:	e004      	b.n	800b204 <USBH_MSC_BOT_Process+0x4b0>
      break;
 800b1fa:	bf00      	nop
 800b1fc:	e002      	b.n	800b204 <USBH_MSC_BOT_Process+0x4b0>
      break;
 800b1fe:	bf00      	nop
 800b200:	e000      	b.n	800b204 <USBH_MSC_BOT_Process+0x4b0>
      break;
 800b202:	bf00      	nop
  }
  return status;
 800b204:	7dfb      	ldrb	r3, [r7, #23]
}
 800b206:	4618      	mov	r0, r3
 800b208:	3718      	adds	r7, #24
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}
 800b20e:	bf00      	nop

0800b210 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b084      	sub	sp, #16
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
 800b218:	460b      	mov	r3, r1
 800b21a:	70fb      	strb	r3, [r7, #3]
 800b21c:	4613      	mov	r3, r2
 800b21e:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800b220:	2302      	movs	r3, #2
 800b222:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b22a:	69db      	ldr	r3, [r3, #28]
 800b22c:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800b22e:	78bb      	ldrb	r3, [r7, #2]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d002      	beq.n	800b23a <USBH_MSC_BOT_Abort+0x2a>
 800b234:	2b01      	cmp	r3, #1
 800b236:	d009      	beq.n	800b24c <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800b238:	e011      	b.n	800b25e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	79db      	ldrb	r3, [r3, #7]
 800b23e:	4619      	mov	r1, r3
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f001 fadc 	bl	800c7fe <USBH_ClrFeature>
 800b246:	4603      	mov	r3, r0
 800b248:	73fb      	strb	r3, [r7, #15]
      break;
 800b24a:	e008      	b.n	800b25e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	799b      	ldrb	r3, [r3, #6]
 800b250:	4619      	mov	r1, r3
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f001 fad3 	bl	800c7fe <USBH_ClrFeature>
 800b258:	4603      	mov	r3, r0
 800b25a:	73fb      	strb	r3, [r7, #15]
      break;
 800b25c:	bf00      	nop
  }
  return status;
 800b25e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b260:	4618      	mov	r0, r3
 800b262:	3710      	adds	r7, #16
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b084      	sub	sp, #16
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b276:	69db      	ldr	r3, [r3, #28]
 800b278:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800b27a:	2301      	movs	r3, #1
 800b27c:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	791b      	ldrb	r3, [r3, #4]
 800b282:	4619      	mov	r1, r3
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f006 f855 	bl	8011334 <USBH_LL_GetLastXferSize>
 800b28a:	4603      	mov	r3, r0
 800b28c:	2b0d      	cmp	r3, #13
 800b28e:	d002      	beq.n	800b296 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800b290:	2302      	movs	r3, #2
 800b292:	73fb      	strb	r3, [r7, #15]
 800b294:	e024      	b.n	800b2e0 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b29a:	4a14      	ldr	r2, [pc, #80]	; (800b2ec <USBH_MSC_DecodeCSW+0x84>)
 800b29c:	4293      	cmp	r3, r2
 800b29e:	d11d      	bne.n	800b2dc <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2a8:	429a      	cmp	r2, r3
 800b2aa:	d119      	bne.n	800b2e0 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d102      	bne.n	800b2bc <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	73fb      	strb	r3, [r7, #15]
 800b2ba:	e011      	b.n	800b2e0 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b2c2:	2b01      	cmp	r3, #1
 800b2c4:	d102      	bne.n	800b2cc <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	73fb      	strb	r3, [r7, #15]
 800b2ca:	e009      	b.n	800b2e0 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b2d2:	2b02      	cmp	r3, #2
 800b2d4:	d104      	bne.n	800b2e0 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800b2d6:	2302      	movs	r3, #2
 800b2d8:	73fb      	strb	r3, [r7, #15]
 800b2da:	e001      	b.n	800b2e0 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800b2dc:	2302      	movs	r3, #2
 800b2de:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800b2e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3710      	adds	r7, #16
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}
 800b2ea:	bf00      	nop
 800b2ec:	53425355 	.word	0x53425355

0800b2f0 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b084      	sub	sp, #16
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
 800b2f8:	460b      	mov	r3, r1
 800b2fa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b2fc:	2302      	movs	r3, #2
 800b2fe:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b306:	69db      	ldr	r3, [r3, #28]
 800b308:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b310:	2b01      	cmp	r3, #1
 800b312:	d002      	beq.n	800b31a <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800b314:	2b02      	cmp	r3, #2
 800b316:	d021      	beq.n	800b35c <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800b318:	e028      	b.n	800b36c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	2200      	movs	r2, #0
 800b31e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	2200      	movs	r2, #0
 800b324:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	220a      	movs	r2, #10
 800b32c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	3363      	adds	r3, #99	; 0x63
 800b334:	2210      	movs	r2, #16
 800b336:	2100      	movs	r1, #0
 800b338:	4618      	mov	r0, r3
 800b33a:	f006 f9b6 	bl	80116aa <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	2200      	movs	r2, #0
 800b342:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	2201      	movs	r2, #1
 800b34a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	2202      	movs	r2, #2
 800b352:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800b356:	2301      	movs	r3, #1
 800b358:	73fb      	strb	r3, [r7, #15]
      break;
 800b35a:	e007      	b.n	800b36c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b35c:	78fb      	ldrb	r3, [r7, #3]
 800b35e:	4619      	mov	r1, r3
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f7ff fcf7 	bl	800ad54 <USBH_MSC_BOT_Process>
 800b366:	4603      	mov	r3, r0
 800b368:	73fb      	strb	r3, [r7, #15]
      break;
 800b36a:	bf00      	nop
  }

  return error;
 800b36c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b36e:	4618      	mov	r0, r3
 800b370:	3710      	adds	r7, #16
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}

0800b376 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800b376:	b580      	push	{r7, lr}
 800b378:	b086      	sub	sp, #24
 800b37a:	af00      	add	r7, sp, #0
 800b37c:	60f8      	str	r0, [r7, #12]
 800b37e:	460b      	mov	r3, r1
 800b380:	607a      	str	r2, [r7, #4]
 800b382:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800b384:	2301      	movs	r3, #1
 800b386:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b38e:	69db      	ldr	r3, [r3, #28]
 800b390:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b398:	2b01      	cmp	r3, #1
 800b39a:	d002      	beq.n	800b3a2 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800b39c:	2b02      	cmp	r3, #2
 800b39e:	d027      	beq.n	800b3f0 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800b3a0:	e05f      	b.n	800b462 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800b3a2:	693b      	ldr	r3, [r7, #16]
 800b3a4:	2208      	movs	r2, #8
 800b3a6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b3a8:	693b      	ldr	r3, [r7, #16]
 800b3aa:	2280      	movs	r2, #128	; 0x80
 800b3ac:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b3b0:	693b      	ldr	r3, [r7, #16]
 800b3b2:	220a      	movs	r2, #10
 800b3b4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b3b8:	693b      	ldr	r3, [r7, #16]
 800b3ba:	3363      	adds	r3, #99	; 0x63
 800b3bc:	2210      	movs	r2, #16
 800b3be:	2100      	movs	r1, #0
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f006 f972 	bl	80116aa <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800b3c6:	693b      	ldr	r3, [r7, #16]
 800b3c8:	2225      	movs	r2, #37	; 0x25
 800b3ca:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b3ce:	693b      	ldr	r3, [r7, #16]
 800b3d0:	2201      	movs	r2, #1
 800b3d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b3d6:	693b      	ldr	r3, [r7, #16]
 800b3d8:	2202      	movs	r2, #2
 800b3da:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800b3de:	693b      	ldr	r3, [r7, #16]
 800b3e0:	f103 0210 	add.w	r2, r3, #16
 800b3e4:	693b      	ldr	r3, [r7, #16]
 800b3e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	75fb      	strb	r3, [r7, #23]
      break;
 800b3ee:	e038      	b.n	800b462 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b3f0:	7afb      	ldrb	r3, [r7, #11]
 800b3f2:	4619      	mov	r1, r3
 800b3f4:	68f8      	ldr	r0, [r7, #12]
 800b3f6:	f7ff fcad 	bl	800ad54 <USBH_MSC_BOT_Process>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800b3fe:	7dfb      	ldrb	r3, [r7, #23]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d12d      	bne.n	800b460 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b40a:	3303      	adds	r3, #3
 800b40c:	781b      	ldrb	r3, [r3, #0]
 800b40e:	461a      	mov	r2, r3
 800b410:	693b      	ldr	r3, [r7, #16]
 800b412:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b416:	3302      	adds	r3, #2
 800b418:	781b      	ldrb	r3, [r3, #0]
 800b41a:	021b      	lsls	r3, r3, #8
 800b41c:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800b41e:	693b      	ldr	r3, [r7, #16]
 800b420:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b424:	3301      	adds	r3, #1
 800b426:	781b      	ldrb	r3, [r3, #0]
 800b428:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800b42a:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b432:	781b      	ldrb	r3, [r3, #0]
 800b434:	061b      	lsls	r3, r3, #24
 800b436:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b442:	3307      	adds	r3, #7
 800b444:	781b      	ldrb	r3, [r3, #0]
 800b446:	b29a      	uxth	r2, r3
 800b448:	693b      	ldr	r3, [r7, #16]
 800b44a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b44e:	3306      	adds	r3, #6
 800b450:	781b      	ldrb	r3, [r3, #0]
 800b452:	b29b      	uxth	r3, r3
 800b454:	021b      	lsls	r3, r3, #8
 800b456:	b29b      	uxth	r3, r3
 800b458:	4313      	orrs	r3, r2
 800b45a:	b29a      	uxth	r2, r3
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	809a      	strh	r2, [r3, #4]
      break;
 800b460:	bf00      	nop
  }

  return error;
 800b462:	7dfb      	ldrb	r3, [r7, #23]
}
 800b464:	4618      	mov	r0, r3
 800b466:	3718      	adds	r7, #24
 800b468:	46bd      	mov	sp, r7
 800b46a:	bd80      	pop	{r7, pc}

0800b46c <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b086      	sub	sp, #24
 800b470:	af00      	add	r7, sp, #0
 800b472:	60f8      	str	r0, [r7, #12]
 800b474:	460b      	mov	r3, r1
 800b476:	607a      	str	r2, [r7, #4]
 800b478:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800b47a:	2302      	movs	r3, #2
 800b47c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b484:	69db      	ldr	r3, [r3, #28]
 800b486:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b48e:	2b01      	cmp	r3, #1
 800b490:	d002      	beq.n	800b498 <USBH_MSC_SCSI_Inquiry+0x2c>
 800b492:	2b02      	cmp	r3, #2
 800b494:	d03d      	beq.n	800b512 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800b496:	e089      	b.n	800b5ac <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800b498:	693b      	ldr	r3, [r7, #16]
 800b49a:	2224      	movs	r2, #36	; 0x24
 800b49c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b49e:	693b      	ldr	r3, [r7, #16]
 800b4a0:	2280      	movs	r2, #128	; 0x80
 800b4a2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b4a6:	693b      	ldr	r3, [r7, #16]
 800b4a8:	220a      	movs	r2, #10
 800b4aa:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	3363      	adds	r3, #99	; 0x63
 800b4b2:	220a      	movs	r2, #10
 800b4b4:	2100      	movs	r1, #0
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f006 f8f7 	bl	80116aa <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800b4bc:	693b      	ldr	r3, [r7, #16]
 800b4be:	2212      	movs	r2, #18
 800b4c0:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800b4c4:	7afb      	ldrb	r3, [r7, #11]
 800b4c6:	015b      	lsls	r3, r3, #5
 800b4c8:	b2da      	uxtb	r2, r3
 800b4ca:	693b      	ldr	r3, [r7, #16]
 800b4cc:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800b4e0:	693b      	ldr	r3, [r7, #16]
 800b4e2:	2224      	movs	r2, #36	; 0x24
 800b4e4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b4f0:	693b      	ldr	r3, [r7, #16]
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b4f8:	693b      	ldr	r3, [r7, #16]
 800b4fa:	2202      	movs	r2, #2
 800b4fc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800b500:	693b      	ldr	r3, [r7, #16]
 800b502:	f103 0210 	add.w	r2, r3, #16
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b50c:	2301      	movs	r3, #1
 800b50e:	75fb      	strb	r3, [r7, #23]
      break;
 800b510:	e04c      	b.n	800b5ac <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b512:	7afb      	ldrb	r3, [r7, #11]
 800b514:	4619      	mov	r1, r3
 800b516:	68f8      	ldr	r0, [r7, #12]
 800b518:	f7ff fc1c 	bl	800ad54 <USBH_MSC_BOT_Process>
 800b51c:	4603      	mov	r3, r0
 800b51e:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800b520:	7dfb      	ldrb	r3, [r7, #23]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d141      	bne.n	800b5aa <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800b526:	2222      	movs	r2, #34	; 0x22
 800b528:	2100      	movs	r1, #0
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f006 f8bd 	bl	80116aa <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800b530:	693b      	ldr	r3, [r7, #16]
 800b532:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b536:	781b      	ldrb	r3, [r3, #0]
 800b538:	f003 031f 	and.w	r3, r3, #31
 800b53c:	b2da      	uxtb	r2, r3
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800b542:	693b      	ldr	r3, [r7, #16]
 800b544:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b548:	781b      	ldrb	r3, [r3, #0]
 800b54a:	095b      	lsrs	r3, r3, #5
 800b54c:	b2da      	uxtb	r2, r3
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800b552:	693b      	ldr	r3, [r7, #16]
 800b554:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b558:	3301      	adds	r3, #1
 800b55a:	781b      	ldrb	r3, [r3, #0]
 800b55c:	b25b      	sxtb	r3, r3
 800b55e:	2b00      	cmp	r3, #0
 800b560:	da03      	bge.n	800b56a <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2201      	movs	r2, #1
 800b566:	709a      	strb	r2, [r3, #2]
 800b568:	e002      	b.n	800b570 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2200      	movs	r2, #0
 800b56e:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	1cd8      	adds	r0, r3, #3
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b57a:	3308      	adds	r3, #8
 800b57c:	2208      	movs	r2, #8
 800b57e:	4619      	mov	r1, r3
 800b580:	f006 f888 	bl	8011694 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f103 000c 	add.w	r0, r3, #12
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b590:	3310      	adds	r3, #16
 800b592:	2210      	movs	r2, #16
 800b594:	4619      	mov	r1, r3
 800b596:	f006 f87d 	bl	8011694 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	331d      	adds	r3, #29
 800b59e:	693a      	ldr	r2, [r7, #16]
 800b5a0:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800b5a4:	3220      	adds	r2, #32
 800b5a6:	6812      	ldr	r2, [r2, #0]
 800b5a8:	601a      	str	r2, [r3, #0]
      break;
 800b5aa:	bf00      	nop
  }

  return error;
 800b5ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3718      	adds	r7, #24
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}

0800b5b6 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800b5b6:	b580      	push	{r7, lr}
 800b5b8:	b086      	sub	sp, #24
 800b5ba:	af00      	add	r7, sp, #0
 800b5bc:	60f8      	str	r0, [r7, #12]
 800b5be:	460b      	mov	r3, r1
 800b5c0:	607a      	str	r2, [r7, #4]
 800b5c2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b5c4:	2302      	movs	r3, #2
 800b5c6:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b5ce:	69db      	ldr	r3, [r3, #28]
 800b5d0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b5d2:	693b      	ldr	r3, [r7, #16]
 800b5d4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b5d8:	2b01      	cmp	r3, #1
 800b5da:	d002      	beq.n	800b5e2 <USBH_MSC_SCSI_RequestSense+0x2c>
 800b5dc:	2b02      	cmp	r3, #2
 800b5de:	d03d      	beq.n	800b65c <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800b5e0:	e05d      	b.n	800b69e <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	220e      	movs	r2, #14
 800b5e6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b5e8:	693b      	ldr	r3, [r7, #16]
 800b5ea:	2280      	movs	r2, #128	; 0x80
 800b5ec:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b5f0:	693b      	ldr	r3, [r7, #16]
 800b5f2:	220a      	movs	r2, #10
 800b5f4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	3363      	adds	r3, #99	; 0x63
 800b5fc:	2210      	movs	r2, #16
 800b5fe:	2100      	movs	r1, #0
 800b600:	4618      	mov	r0, r3
 800b602:	f006 f852 	bl	80116aa <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	2203      	movs	r2, #3
 800b60a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800b60e:	7afb      	ldrb	r3, [r7, #11]
 800b610:	015b      	lsls	r3, r3, #5
 800b612:	b2da      	uxtb	r2, r3
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800b61a:	693b      	ldr	r3, [r7, #16]
 800b61c:	2200      	movs	r2, #0
 800b61e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800b622:	693b      	ldr	r3, [r7, #16]
 800b624:	2200      	movs	r2, #0
 800b626:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800b62a:	693b      	ldr	r3, [r7, #16]
 800b62c:	220e      	movs	r2, #14
 800b62e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800b632:	693b      	ldr	r3, [r7, #16]
 800b634:	2200      	movs	r2, #0
 800b636:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	2201      	movs	r2, #1
 800b63e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b642:	693b      	ldr	r3, [r7, #16]
 800b644:	2202      	movs	r2, #2
 800b646:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	f103 0210 	add.w	r2, r3, #16
 800b650:	693b      	ldr	r3, [r7, #16]
 800b652:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b656:	2301      	movs	r3, #1
 800b658:	75fb      	strb	r3, [r7, #23]
      break;
 800b65a:	e020      	b.n	800b69e <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b65c:	7afb      	ldrb	r3, [r7, #11]
 800b65e:	4619      	mov	r1, r3
 800b660:	68f8      	ldr	r0, [r7, #12]
 800b662:	f7ff fb77 	bl	800ad54 <USBH_MSC_BOT_Process>
 800b666:	4603      	mov	r3, r0
 800b668:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800b66a:	7dfb      	ldrb	r3, [r7, #23]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d115      	bne.n	800b69c <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b676:	3302      	adds	r3, #2
 800b678:	781b      	ldrb	r3, [r3, #0]
 800b67a:	f003 030f 	and.w	r3, r3, #15
 800b67e:	b2da      	uxtb	r2, r3
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800b684:	693b      	ldr	r3, [r7, #16]
 800b686:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b68a:	7b1a      	ldrb	r2, [r3, #12]
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b696:	7b5a      	ldrb	r2, [r3, #13]
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	709a      	strb	r2, [r3, #2]
      break;
 800b69c:	bf00      	nop
  }

  return error;
 800b69e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	3718      	adds	r7, #24
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}

0800b6a8 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b086      	sub	sp, #24
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	60f8      	str	r0, [r7, #12]
 800b6b0:	607a      	str	r2, [r7, #4]
 800b6b2:	603b      	str	r3, [r7, #0]
 800b6b4:	460b      	mov	r3, r1
 800b6b6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b6b8:	2302      	movs	r3, #2
 800b6ba:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b6c2:	69db      	ldr	r3, [r3, #28]
 800b6c4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b6cc:	2b01      	cmp	r3, #1
 800b6ce:	d002      	beq.n	800b6d6 <USBH_MSC_SCSI_Write+0x2e>
 800b6d0:	2b02      	cmp	r3, #2
 800b6d2:	d047      	beq.n	800b764 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800b6d4:	e04e      	b.n	800b774 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800b6d6:	693b      	ldr	r3, [r7, #16]
 800b6d8:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800b6dc:	461a      	mov	r2, r3
 800b6de:	6a3b      	ldr	r3, [r7, #32]
 800b6e0:	fb03 f202 	mul.w	r2, r3, r2
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	220a      	movs	r2, #10
 800b6f4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	3363      	adds	r3, #99	; 0x63
 800b6fc:	2210      	movs	r2, #16
 800b6fe:	2100      	movs	r1, #0
 800b700:	4618      	mov	r0, r3
 800b702:	f005 ffd2 	bl	80116aa <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800b706:	693b      	ldr	r3, [r7, #16]
 800b708:	222a      	movs	r2, #42	; 0x2a
 800b70a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800b70e:	79fa      	ldrb	r2, [r7, #7]
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800b716:	79ba      	ldrb	r2, [r7, #6]
 800b718:	693b      	ldr	r3, [r7, #16]
 800b71a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800b71e:	797a      	ldrb	r2, [r7, #5]
 800b720:	693b      	ldr	r3, [r7, #16]
 800b722:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800b726:	1d3b      	adds	r3, r7, #4
 800b728:	781a      	ldrb	r2, [r3, #0]
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800b730:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800b73a:	f107 0320 	add.w	r3, r7, #32
 800b73e:	781a      	ldrb	r2, [r3, #0]
 800b740:	693b      	ldr	r3, [r7, #16]
 800b742:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	2201      	movs	r2, #1
 800b74a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b74e:	693b      	ldr	r3, [r7, #16]
 800b750:	2202      	movs	r2, #2
 800b752:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800b756:	693b      	ldr	r3, [r7, #16]
 800b758:	683a      	ldr	r2, [r7, #0]
 800b75a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b75e:	2301      	movs	r3, #1
 800b760:	75fb      	strb	r3, [r7, #23]
      break;
 800b762:	e007      	b.n	800b774 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b764:	7afb      	ldrb	r3, [r7, #11]
 800b766:	4619      	mov	r1, r3
 800b768:	68f8      	ldr	r0, [r7, #12]
 800b76a:	f7ff faf3 	bl	800ad54 <USBH_MSC_BOT_Process>
 800b76e:	4603      	mov	r3, r0
 800b770:	75fb      	strb	r3, [r7, #23]
      break;
 800b772:	bf00      	nop
  }

  return error;
 800b774:	7dfb      	ldrb	r3, [r7, #23]
}
 800b776:	4618      	mov	r0, r3
 800b778:	3718      	adds	r7, #24
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}

0800b77e <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800b77e:	b580      	push	{r7, lr}
 800b780:	b086      	sub	sp, #24
 800b782:	af00      	add	r7, sp, #0
 800b784:	60f8      	str	r0, [r7, #12]
 800b786:	607a      	str	r2, [r7, #4]
 800b788:	603b      	str	r3, [r7, #0]
 800b78a:	460b      	mov	r3, r1
 800b78c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b78e:	2302      	movs	r3, #2
 800b790:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b798:	69db      	ldr	r3, [r3, #28]
 800b79a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b79c:	693b      	ldr	r3, [r7, #16]
 800b79e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b7a2:	2b01      	cmp	r3, #1
 800b7a4:	d002      	beq.n	800b7ac <USBH_MSC_SCSI_Read+0x2e>
 800b7a6:	2b02      	cmp	r3, #2
 800b7a8:	d047      	beq.n	800b83a <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800b7aa:	e04e      	b.n	800b84a <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800b7ac:	693b      	ldr	r3, [r7, #16]
 800b7ae:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800b7b2:	461a      	mov	r2, r3
 800b7b4:	6a3b      	ldr	r3, [r7, #32]
 800b7b6:	fb03 f202 	mul.w	r2, r3, r2
 800b7ba:	693b      	ldr	r3, [r7, #16]
 800b7bc:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b7be:	693b      	ldr	r3, [r7, #16]
 800b7c0:	2280      	movs	r2, #128	; 0x80
 800b7c2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b7c6:	693b      	ldr	r3, [r7, #16]
 800b7c8:	220a      	movs	r2, #10
 800b7ca:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b7ce:	693b      	ldr	r3, [r7, #16]
 800b7d0:	3363      	adds	r3, #99	; 0x63
 800b7d2:	2210      	movs	r2, #16
 800b7d4:	2100      	movs	r1, #0
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f005 ff67 	bl	80116aa <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800b7dc:	693b      	ldr	r3, [r7, #16]
 800b7de:	2228      	movs	r2, #40	; 0x28
 800b7e0:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800b7e4:	79fa      	ldrb	r2, [r7, #7]
 800b7e6:	693b      	ldr	r3, [r7, #16]
 800b7e8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800b7ec:	79ba      	ldrb	r2, [r7, #6]
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800b7f4:	797a      	ldrb	r2, [r7, #5]
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800b7fc:	1d3b      	adds	r3, r7, #4
 800b7fe:	781a      	ldrb	r2, [r3, #0]
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800b806:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b80a:	693b      	ldr	r3, [r7, #16]
 800b80c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800b810:	f107 0320 	add.w	r3, r7, #32
 800b814:	781a      	ldrb	r2, [r3, #0]
 800b816:	693b      	ldr	r3, [r7, #16]
 800b818:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b81c:	693b      	ldr	r3, [r7, #16]
 800b81e:	2201      	movs	r2, #1
 800b820:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b824:	693b      	ldr	r3, [r7, #16]
 800b826:	2202      	movs	r2, #2
 800b828:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	683a      	ldr	r2, [r7, #0]
 800b830:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b834:	2301      	movs	r3, #1
 800b836:	75fb      	strb	r3, [r7, #23]
      break;
 800b838:	e007      	b.n	800b84a <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b83a:	7afb      	ldrb	r3, [r7, #11]
 800b83c:	4619      	mov	r1, r3
 800b83e:	68f8      	ldr	r0, [r7, #12]
 800b840:	f7ff fa88 	bl	800ad54 <USBH_MSC_BOT_Process>
 800b844:	4603      	mov	r3, r0
 800b846:	75fb      	strb	r3, [r7, #23]
      break;
 800b848:	bf00      	nop
  }

  return error;
 800b84a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	3718      	adds	r7, #24
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}

0800b854 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b084      	sub	sp, #16
 800b858:	af00      	add	r7, sp, #0
 800b85a:	60f8      	str	r0, [r7, #12]
 800b85c:	60b9      	str	r1, [r7, #8]
 800b85e:	4613      	mov	r3, r2
 800b860:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d101      	bne.n	800b86c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800b868:	2302      	movs	r3, #2
 800b86a:	e044      	b.n	800b8f6 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	79fa      	ldrb	r2, [r7, #7]
 800b870:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	2200      	movs	r2, #0
 800b878:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	2200      	movs	r2, #0
 800b880:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800b884:	68f8      	ldr	r0, [r7, #12]
 800b886:	f000 f841 	bl	800b90c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	2200      	movs	r2, #0
 800b88e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	2200      	movs	r2, #0
 800b896:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	2200      	movs	r2, #0
 800b89e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d003      	beq.n	800b8b8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	68ba      	ldr	r2, [r7, #8]
 800b8b4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	2104      	movs	r1, #4
 800b8bc:	2010      	movs	r0, #16
 800b8be:	f002 f84f 	bl	800d960 <osMessageQueueNew>
 800b8c2:	4602      	mov	r2, r0
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800b8ca:	4b0d      	ldr	r3, [pc, #52]	; (800b900 <USBH_Init+0xac>)
 800b8cc:	4a0d      	ldr	r2, [pc, #52]	; (800b904 <USBH_Init+0xb0>)
 800b8ce:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800b8d0:	4b0b      	ldr	r3, [pc, #44]	; (800b900 <USBH_Init+0xac>)
 800b8d2:	2280      	movs	r2, #128	; 0x80
 800b8d4:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800b8d6:	4b0a      	ldr	r3, [pc, #40]	; (800b900 <USBH_Init+0xac>)
 800b8d8:	2218      	movs	r2, #24
 800b8da:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800b8dc:	4a08      	ldr	r2, [pc, #32]	; (800b900 <USBH_Init+0xac>)
 800b8de:	68f9      	ldr	r1, [r7, #12]
 800b8e0:	4809      	ldr	r0, [pc, #36]	; (800b908 <USBH_Init+0xb4>)
 800b8e2:	f001 fe0d 	bl	800d500 <osThreadNew>
 800b8e6:	4602      	mov	r2, r0
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800b8ee:	68f8      	ldr	r0, [r7, #12]
 800b8f0:	f005 fc6e 	bl	80111d0 <USBH_LL_Init>

  return USBH_OK;
 800b8f4:	2300      	movs	r3, #0
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3710      	adds	r7, #16
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}
 800b8fe:	bf00      	nop
 800b900:	20007154 	.word	0x20007154
 800b904:	08011be4 	.word	0x08011be4
 800b908:	0800c575 	.word	0x0800c575

0800b90c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800b90c:	b480      	push	{r7}
 800b90e:	b085      	sub	sp, #20
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800b914:	2300      	movs	r3, #0
 800b916:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b918:	2300      	movs	r3, #0
 800b91a:	60fb      	str	r3, [r7, #12]
 800b91c:	e009      	b.n	800b932 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800b91e:	687a      	ldr	r2, [r7, #4]
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	33e0      	adds	r3, #224	; 0xe0
 800b924:	009b      	lsls	r3, r3, #2
 800b926:	4413      	add	r3, r2
 800b928:	2200      	movs	r2, #0
 800b92a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	3301      	adds	r3, #1
 800b930:	60fb      	str	r3, [r7, #12]
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	2b0e      	cmp	r3, #14
 800b936:	d9f2      	bls.n	800b91e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b938:	2300      	movs	r3, #0
 800b93a:	60fb      	str	r3, [r7, #12]
 800b93c:	e009      	b.n	800b952 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800b93e:	687a      	ldr	r2, [r7, #4]
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	4413      	add	r3, r2
 800b944:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b948:	2200      	movs	r2, #0
 800b94a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	3301      	adds	r3, #1
 800b950:	60fb      	str	r3, [r7, #12]
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b958:	d3f1      	bcc.n	800b93e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2200      	movs	r2, #0
 800b95e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2200      	movs	r2, #0
 800b964:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2201      	movs	r2, #1
 800b96a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2200      	movs	r2, #0
 800b970:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2201      	movs	r2, #1
 800b978:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2240      	movs	r2, #64	; 0x40
 800b97e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2200      	movs	r2, #0
 800b984:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2200      	movs	r2, #0
 800b98a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2201      	movs	r2, #1
 800b992:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2200      	movs	r2, #0
 800b99a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800b9a6:	2300      	movs	r3, #0
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	3714      	adds	r7, #20
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b2:	4770      	bx	lr

0800b9b4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b085      	sub	sp, #20
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
 800b9bc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b9be:	2300      	movs	r3, #0
 800b9c0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d016      	beq.n	800b9f6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d10e      	bne.n	800b9f0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b9d8:	1c59      	adds	r1, r3, #1
 800b9da:	687a      	ldr	r2, [r7, #4]
 800b9dc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800b9e0:	687a      	ldr	r2, [r7, #4]
 800b9e2:	33de      	adds	r3, #222	; 0xde
 800b9e4:	6839      	ldr	r1, [r7, #0]
 800b9e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	73fb      	strb	r3, [r7, #15]
 800b9ee:	e004      	b.n	800b9fa <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800b9f0:	2302      	movs	r3, #2
 800b9f2:	73fb      	strb	r3, [r7, #15]
 800b9f4:	e001      	b.n	800b9fa <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800b9f6:	2302      	movs	r3, #2
 800b9f8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b9fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3714      	adds	r7, #20
 800ba00:	46bd      	mov	sp, r7
 800ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba06:	4770      	bx	lr

0800ba08 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b085      	sub	sp, #20
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
 800ba10:	460b      	mov	r3, r1
 800ba12:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800ba14:	2300      	movs	r3, #0
 800ba16:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800ba1e:	78fa      	ldrb	r2, [r7, #3]
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d204      	bcs.n	800ba2e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	78fa      	ldrb	r2, [r7, #3]
 800ba28:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800ba2c:	e001      	b.n	800ba32 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800ba2e:	2302      	movs	r3, #2
 800ba30:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ba32:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	3714      	adds	r7, #20
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3e:	4770      	bx	lr

0800ba40 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800ba40:	b480      	push	{r7}
 800ba42:	b087      	sub	sp, #28
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
 800ba48:	4608      	mov	r0, r1
 800ba4a:	4611      	mov	r1, r2
 800ba4c:	461a      	mov	r2, r3
 800ba4e:	4603      	mov	r3, r0
 800ba50:	70fb      	strb	r3, [r7, #3]
 800ba52:	460b      	mov	r3, r1
 800ba54:	70bb      	strb	r3, [r7, #2]
 800ba56:	4613      	mov	r3, r2
 800ba58:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ba68:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ba6a:	e025      	b.n	800bab8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800ba6c:	7dfb      	ldrb	r3, [r7, #23]
 800ba6e:	221a      	movs	r2, #26
 800ba70:	fb02 f303 	mul.w	r3, r2, r3
 800ba74:	3308      	adds	r3, #8
 800ba76:	68fa      	ldr	r2, [r7, #12]
 800ba78:	4413      	add	r3, r2
 800ba7a:	3302      	adds	r3, #2
 800ba7c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ba7e:	693b      	ldr	r3, [r7, #16]
 800ba80:	795b      	ldrb	r3, [r3, #5]
 800ba82:	78fa      	ldrb	r2, [r7, #3]
 800ba84:	429a      	cmp	r2, r3
 800ba86:	d002      	beq.n	800ba8e <USBH_FindInterface+0x4e>
 800ba88:	78fb      	ldrb	r3, [r7, #3]
 800ba8a:	2bff      	cmp	r3, #255	; 0xff
 800ba8c:	d111      	bne.n	800bab2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ba8e:	693b      	ldr	r3, [r7, #16]
 800ba90:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ba92:	78ba      	ldrb	r2, [r7, #2]
 800ba94:	429a      	cmp	r2, r3
 800ba96:	d002      	beq.n	800ba9e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ba98:	78bb      	ldrb	r3, [r7, #2]
 800ba9a:	2bff      	cmp	r3, #255	; 0xff
 800ba9c:	d109      	bne.n	800bab2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ba9e:	693b      	ldr	r3, [r7, #16]
 800baa0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800baa2:	787a      	ldrb	r2, [r7, #1]
 800baa4:	429a      	cmp	r2, r3
 800baa6:	d002      	beq.n	800baae <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800baa8:	787b      	ldrb	r3, [r7, #1]
 800baaa:	2bff      	cmp	r3, #255	; 0xff
 800baac:	d101      	bne.n	800bab2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800baae:	7dfb      	ldrb	r3, [r7, #23]
 800bab0:	e006      	b.n	800bac0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800bab2:	7dfb      	ldrb	r3, [r7, #23]
 800bab4:	3301      	adds	r3, #1
 800bab6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800bab8:	7dfb      	ldrb	r3, [r7, #23]
 800baba:	2b01      	cmp	r3, #1
 800babc:	d9d6      	bls.n	800ba6c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800babe:	23ff      	movs	r3, #255	; 0xff
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	371c      	adds	r7, #28
 800bac4:	46bd      	mov	sp, r7
 800bac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baca:	4770      	bx	lr

0800bacc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b082      	sub	sp, #8
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f005 fbb7 	bl	8011248 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800bada:	2101      	movs	r1, #1
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	f005 fcce 	bl	801147e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800bae2:	2300      	movs	r3, #0
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3708      	adds	r7, #8
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}

0800baec <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b088      	sub	sp, #32
 800baf0:	af04      	add	r7, sp, #16
 800baf2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800baf4:	2302      	movs	r3, #2
 800baf6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800baf8:	2300      	movs	r3, #0
 800bafa:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800bb02:	b2db      	uxtb	r3, r3
 800bb04:	2b01      	cmp	r3, #1
 800bb06:	d102      	bne.n	800bb0e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2203      	movs	r2, #3
 800bb0c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	781b      	ldrb	r3, [r3, #0]
 800bb12:	b2db      	uxtb	r3, r3
 800bb14:	2b0b      	cmp	r3, #11
 800bb16:	f200 823c 	bhi.w	800bf92 <USBH_Process+0x4a6>
 800bb1a:	a201      	add	r2, pc, #4	; (adr r2, 800bb20 <USBH_Process+0x34>)
 800bb1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb20:	0800bb51 	.word	0x0800bb51
 800bb24:	0800bb9f 	.word	0x0800bb9f
 800bb28:	0800bc23 	.word	0x0800bc23
 800bb2c:	0800bf11 	.word	0x0800bf11
 800bb30:	0800bf93 	.word	0x0800bf93
 800bb34:	0800bce3 	.word	0x0800bce3
 800bb38:	0800be9b 	.word	0x0800be9b
 800bb3c:	0800bd35 	.word	0x0800bd35
 800bb40:	0800bd71 	.word	0x0800bd71
 800bb44:	0800bdab 	.word	0x0800bdab
 800bb48:	0800bdf3 	.word	0x0800bdf3
 800bb4c:	0800bef9 	.word	0x0800bef9
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800bb56:	b2db      	uxtb	r3, r3
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	f000 821c 	beq.w	800bf96 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2201      	movs	r2, #1
 800bb62:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800bb64:	20c8      	movs	r0, #200	; 0xc8
 800bb66:	f005 fd07 	bl	8011578 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f005 fbc7 	bl	80112fe <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2200      	movs	r2, #0
 800bb74:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2201      	movs	r2, #1
 800bb84:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bb94:	2300      	movs	r3, #0
 800bb96:	2200      	movs	r2, #0
 800bb98:	f001 ff68 	bl	800da6c <osMessageQueuePut>
#endif
#endif
      }
      break;
 800bb9c:	e1fb      	b.n	800bf96 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800bba4:	2b01      	cmp	r3, #1
 800bba6:	d107      	bne.n	800bbb8 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2202      	movs	r2, #2
 800bbb4:	701a      	strb	r2, [r3, #0]
 800bbb6:	e025      	b.n	800bc04 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800bbbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bbc2:	d914      	bls.n	800bbee <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800bbca:	3301      	adds	r3, #1
 800bbcc:	b2da      	uxtb	r2, r3
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800bbda:	2b03      	cmp	r3, #3
 800bbdc:	d903      	bls.n	800bbe6 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	220d      	movs	r2, #13
 800bbe2:	701a      	strb	r2, [r3, #0]
 800bbe4:	e00e      	b.n	800bc04 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	701a      	strb	r2, [r3, #0]
 800bbec:	e00a      	b.n	800bc04 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800bbf4:	f103 020a 	add.w	r2, r3, #10
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800bbfe:	200a      	movs	r0, #10
 800bc00:	f005 fcba 	bl	8011578 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2201      	movs	r2, #1
 800bc08:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bc18:	2300      	movs	r3, #0
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	f001 ff26 	bl	800da6c <osMessageQueuePut>
#endif
#endif
      break;
 800bc20:	e1c0      	b.n	800bfa4 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d005      	beq.n	800bc38 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bc32:	2104      	movs	r1, #4
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800bc38:	2064      	movs	r0, #100	; 0x64
 800bc3a:	f005 fc9d 	bl	8011578 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	f005 fb38 	bl	80112b4 <USBH_LL_GetSpeed>
 800bc44:	4603      	mov	r3, r0
 800bc46:	461a      	mov	r2, r3
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2205      	movs	r2, #5
 800bc52:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800bc54:	2100      	movs	r1, #0
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f001 fb23 	bl	800d2a2 <USBH_AllocPipe>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	461a      	mov	r2, r3
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800bc64:	2180      	movs	r1, #128	; 0x80
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	f001 fb1b 	bl	800d2a2 <USBH_AllocPipe>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	461a      	mov	r2, r3
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	7919      	ldrb	r1, [r3, #4]
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800bc84:	687a      	ldr	r2, [r7, #4]
 800bc86:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800bc88:	b292      	uxth	r2, r2
 800bc8a:	9202      	str	r2, [sp, #8]
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	9201      	str	r2, [sp, #4]
 800bc90:	9300      	str	r3, [sp, #0]
 800bc92:	4603      	mov	r3, r0
 800bc94:	2280      	movs	r2, #128	; 0x80
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f001 fad4 	bl	800d244 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	7959      	ldrb	r1, [r3, #5]
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800bcac:	687a      	ldr	r2, [r7, #4]
 800bcae:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800bcb0:	b292      	uxth	r2, r2
 800bcb2:	9202      	str	r2, [sp, #8]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	9201      	str	r2, [sp, #4]
 800bcb8:	9300      	str	r3, [sp, #0]
 800bcba:	4603      	mov	r3, r0
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f001 fac0 	bl	800d244 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2201      	movs	r2, #1
 800bcc8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bcd8:	2300      	movs	r3, #0
 800bcda:	2200      	movs	r2, #0
 800bcdc:	f001 fec6 	bl	800da6c <osMessageQueuePut>
#endif
#endif
      break;
 800bce0:	e160      	b.n	800bfa4 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f000 f964 	bl	800bfb0 <USBH_HandleEnum>
 800bce8:	4603      	mov	r3, r0
 800bcea:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800bcec:	7bbb      	ldrb	r3, [r7, #14]
 800bcee:	b2db      	uxtb	r3, r3
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	f040 8152 	bne.w	800bf9a <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800bd04:	2b01      	cmp	r3, #1
 800bd06:	d103      	bne.n	800bd10 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2208      	movs	r2, #8
 800bd0c:	701a      	strb	r2, [r3, #0]
 800bd0e:	e002      	b.n	800bd16 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2207      	movs	r2, #7
 800bd14:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2205      	movs	r2, #5
 800bd1a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	f001 fe9d 	bl	800da6c <osMessageQueuePut>
#endif
#endif
      }
      break;
 800bd32:	e132      	b.n	800bf9a <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	f000 812f 	beq.w	800bf9e <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bd46:	2101      	movs	r1, #1
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2208      	movs	r2, #8
 800bd50:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2205      	movs	r2, #5
 800bd56:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bd66:	2300      	movs	r3, #0
 800bd68:	2200      	movs	r2, #0
 800bd6a:	f001 fe7f 	bl	800da6c <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800bd6e:	e116      	b.n	800bf9e <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800bd76:	b29b      	uxth	r3, r3
 800bd78:	4619      	mov	r1, r3
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f000 fcf8 	bl	800c770 <USBH_SetCfg>
 800bd80:	4603      	mov	r3, r0
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d102      	bne.n	800bd8c <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	2209      	movs	r2, #9
 800bd8a:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2201      	movs	r2, #1
 800bd90:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bda0:	2300      	movs	r3, #0
 800bda2:	2200      	movs	r2, #0
 800bda4:	f001 fe62 	bl	800da6c <osMessageQueuePut>
#endif
#endif
      break;
 800bda8:	e0fc      	b.n	800bfa4 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800bdb0:	f003 0320 	and.w	r3, r3, #32
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d00a      	beq.n	800bdce <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800bdb8:	2101      	movs	r1, #1
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f000 fcfb 	bl	800c7b6 <USBH_SetFeature>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d106      	bne.n	800bdd4 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	220a      	movs	r2, #10
 800bdca:	701a      	strb	r2, [r3, #0]
 800bdcc:	e002      	b.n	800bdd4 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	220a      	movs	r2, #10
 800bdd2:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2201      	movs	r2, #1
 800bdd8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bde8:	2300      	movs	r3, #0
 800bdea:	2200      	movs	r2, #0
 800bdec:	f001 fe3e 	bl	800da6c <osMessageQueuePut>
#endif
#endif
      break;
 800bdf0:	e0d8      	b.n	800bfa4 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d03f      	beq.n	800be7c <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2200      	movs	r2, #0
 800be00:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800be04:	2300      	movs	r3, #0
 800be06:	73fb      	strb	r3, [r7, #15]
 800be08:	e016      	b.n	800be38 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800be0a:	7bfa      	ldrb	r2, [r7, #15]
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	32de      	adds	r2, #222	; 0xde
 800be10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be14:	791a      	ldrb	r2, [r3, #4]
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800be1c:	429a      	cmp	r2, r3
 800be1e:	d108      	bne.n	800be32 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800be20:	7bfa      	ldrb	r2, [r7, #15]
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	32de      	adds	r2, #222	; 0xde
 800be26:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800be30:	e005      	b.n	800be3e <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800be32:	7bfb      	ldrb	r3, [r7, #15]
 800be34:	3301      	adds	r3, #1
 800be36:	73fb      	strb	r3, [r7, #15]
 800be38:	7bfb      	ldrb	r3, [r7, #15]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d0e5      	beq.n	800be0a <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800be44:	2b00      	cmp	r3, #0
 800be46:	d016      	beq.n	800be76 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800be4e:	689b      	ldr	r3, [r3, #8]
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	4798      	blx	r3
 800be54:	4603      	mov	r3, r0
 800be56:	2b00      	cmp	r3, #0
 800be58:	d109      	bne.n	800be6e <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2206      	movs	r2, #6
 800be5e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800be66:	2103      	movs	r1, #3
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	4798      	blx	r3
 800be6c:	e006      	b.n	800be7c <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	220d      	movs	r2, #13
 800be72:	701a      	strb	r2, [r3, #0]
 800be74:	e002      	b.n	800be7c <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	220d      	movs	r2, #13
 800be7a:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2205      	movs	r2, #5
 800be80:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800be90:	2300      	movs	r3, #0
 800be92:	2200      	movs	r2, #0
 800be94:	f001 fdea 	bl	800da6c <osMessageQueuePut>
#endif
#endif
      break;
 800be98:	e084      	b.n	800bfa4 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d017      	beq.n	800bed4 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800beaa:	691b      	ldr	r3, [r3, #16]
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	4798      	blx	r3
 800beb0:	4603      	mov	r3, r0
 800beb2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800beb4:	7bbb      	ldrb	r3, [r7, #14]
 800beb6:	b2db      	uxtb	r3, r3
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d103      	bne.n	800bec4 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	220b      	movs	r2, #11
 800bec0:	701a      	strb	r2, [r3, #0]
 800bec2:	e00a      	b.n	800beda <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800bec4:	7bbb      	ldrb	r3, [r7, #14]
 800bec6:	b2db      	uxtb	r3, r3
 800bec8:	2b02      	cmp	r3, #2
 800beca:	d106      	bne.n	800beda <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	220d      	movs	r2, #13
 800bed0:	701a      	strb	r2, [r3, #0]
 800bed2:	e002      	b.n	800beda <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	220d      	movs	r2, #13
 800bed8:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	2205      	movs	r2, #5
 800bede:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800beee:	2300      	movs	r3, #0
 800bef0:	2200      	movs	r2, #0
 800bef2:	f001 fdbb 	bl	800da6c <osMessageQueuePut>
#endif
#endif
      break;
 800bef6:	e055      	b.n	800bfa4 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d04f      	beq.n	800bfa2 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf08:	695b      	ldr	r3, [r3, #20]
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	4798      	blx	r3
      }
      break;
 800bf0e:	e048      	b.n	800bfa2 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2200      	movs	r2, #0
 800bf14:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f7ff fcf7 	bl	800b90c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d009      	beq.n	800bf3c <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf2e:	68db      	ldr	r3, [r3, #12]
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2200      	movs	r2, #0
 800bf38:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d005      	beq.n	800bf52 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bf4c:	2105      	movs	r1, #5
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800bf58:	b2db      	uxtb	r3, r3
 800bf5a:	2b01      	cmp	r3, #1
 800bf5c:	d107      	bne.n	800bf6e <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2200      	movs	r2, #0
 800bf62:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f7ff fdb0 	bl	800bacc <USBH_Start>
 800bf6c:	e002      	b.n	800bf74 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f005 f96a 	bl	8011248 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2201      	movs	r2, #1
 800bf78:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bf88:	2300      	movs	r3, #0
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	f001 fd6e 	bl	800da6c <osMessageQueuePut>
#endif
#endif
      break;
 800bf90:	e008      	b.n	800bfa4 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800bf92:	bf00      	nop
 800bf94:	e006      	b.n	800bfa4 <USBH_Process+0x4b8>
      break;
 800bf96:	bf00      	nop
 800bf98:	e004      	b.n	800bfa4 <USBH_Process+0x4b8>
      break;
 800bf9a:	bf00      	nop
 800bf9c:	e002      	b.n	800bfa4 <USBH_Process+0x4b8>
    break;
 800bf9e:	bf00      	nop
 800bfa0:	e000      	b.n	800bfa4 <USBH_Process+0x4b8>
      break;
 800bfa2:	bf00      	nop
  }
  return USBH_OK;
 800bfa4:	2300      	movs	r3, #0
}
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	3710      	adds	r7, #16
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bd80      	pop	{r7, pc}
 800bfae:	bf00      	nop

0800bfb0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b088      	sub	sp, #32
 800bfb4:	af04      	add	r7, sp, #16
 800bfb6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800bfb8:	2301      	movs	r3, #1
 800bfba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	785b      	ldrb	r3, [r3, #1]
 800bfc4:	2b07      	cmp	r3, #7
 800bfc6:	f200 8208 	bhi.w	800c3da <USBH_HandleEnum+0x42a>
 800bfca:	a201      	add	r2, pc, #4	; (adr r2, 800bfd0 <USBH_HandleEnum+0x20>)
 800bfcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfd0:	0800bff1 	.word	0x0800bff1
 800bfd4:	0800c0af 	.word	0x0800c0af
 800bfd8:	0800c119 	.word	0x0800c119
 800bfdc:	0800c1a7 	.word	0x0800c1a7
 800bfe0:	0800c211 	.word	0x0800c211
 800bfe4:	0800c281 	.word	0x0800c281
 800bfe8:	0800c31d 	.word	0x0800c31d
 800bfec:	0800c39b 	.word	0x0800c39b
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800bff0:	2108      	movs	r1, #8
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f000 faec 	bl	800c5d0 <USBH_Get_DevDesc>
 800bff8:	4603      	mov	r3, r0
 800bffa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bffc:	7bbb      	ldrb	r3, [r7, #14]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d130      	bne.n	800c064 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2201      	movs	r2, #1
 800c010:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	7919      	ldrb	r1, [r3, #4]
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c022:	687a      	ldr	r2, [r7, #4]
 800c024:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c026:	b292      	uxth	r2, r2
 800c028:	9202      	str	r2, [sp, #8]
 800c02a:	2200      	movs	r2, #0
 800c02c:	9201      	str	r2, [sp, #4]
 800c02e:	9300      	str	r3, [sp, #0]
 800c030:	4603      	mov	r3, r0
 800c032:	2280      	movs	r2, #128	; 0x80
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f001 f905 	bl	800d244 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	7959      	ldrb	r1, [r3, #5]
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c04a:	687a      	ldr	r2, [r7, #4]
 800c04c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c04e:	b292      	uxth	r2, r2
 800c050:	9202      	str	r2, [sp, #8]
 800c052:	2200      	movs	r2, #0
 800c054:	9201      	str	r2, [sp, #4]
 800c056:	9300      	str	r3, [sp, #0]
 800c058:	4603      	mov	r3, r0
 800c05a:	2200      	movs	r2, #0
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f001 f8f1 	bl	800d244 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c062:	e1bc      	b.n	800c3de <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c064:	7bbb      	ldrb	r3, [r7, #14]
 800c066:	2b03      	cmp	r3, #3
 800c068:	f040 81b9 	bne.w	800c3de <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c072:	3301      	adds	r3, #1
 800c074:	b2da      	uxtb	r2, r3
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c082:	2b03      	cmp	r3, #3
 800c084:	d903      	bls.n	800c08e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	220d      	movs	r2, #13
 800c08a:	701a      	strb	r2, [r3, #0]
      break;
 800c08c:	e1a7      	b.n	800c3de <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	795b      	ldrb	r3, [r3, #5]
 800c092:	4619      	mov	r1, r3
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f001 f925 	bl	800d2e4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	791b      	ldrb	r3, [r3, #4]
 800c09e:	4619      	mov	r1, r3
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f001 f91f 	bl	800d2e4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	701a      	strb	r2, [r3, #0]
      break;
 800c0ac:	e197      	b.n	800c3de <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800c0ae:	2112      	movs	r1, #18
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f000 fa8d 	bl	800c5d0 <USBH_Get_DevDesc>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c0ba:	7bbb      	ldrb	r3, [r7, #14]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d103      	bne.n	800c0c8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2202      	movs	r2, #2
 800c0c4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c0c6:	e18c      	b.n	800c3e2 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c0c8:	7bbb      	ldrb	r3, [r7, #14]
 800c0ca:	2b03      	cmp	r3, #3
 800c0cc:	f040 8189 	bne.w	800c3e2 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c0d6:	3301      	adds	r3, #1
 800c0d8:	b2da      	uxtb	r2, r3
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c0e6:	2b03      	cmp	r3, #3
 800c0e8:	d903      	bls.n	800c0f2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	220d      	movs	r2, #13
 800c0ee:	701a      	strb	r2, [r3, #0]
      break;
 800c0f0:	e177      	b.n	800c3e2 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	795b      	ldrb	r3, [r3, #5]
 800c0f6:	4619      	mov	r1, r3
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	f001 f8f3 	bl	800d2e4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	791b      	ldrb	r3, [r3, #4]
 800c102:	4619      	mov	r1, r3
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f001 f8ed 	bl	800d2e4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2200      	movs	r2, #0
 800c10e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2200      	movs	r2, #0
 800c114:	701a      	strb	r2, [r3, #0]
      break;
 800c116:	e164      	b.n	800c3e2 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800c118:	2101      	movs	r1, #1
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f000 fb04 	bl	800c728 <USBH_SetAddress>
 800c120:	4603      	mov	r3, r0
 800c122:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c124:	7bbb      	ldrb	r3, [r7, #14]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d132      	bne.n	800c190 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800c12a:	2002      	movs	r0, #2
 800c12c:	f005 fa24 	bl	8011578 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2201      	movs	r2, #1
 800c134:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2203      	movs	r2, #3
 800c13c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	7919      	ldrb	r1, [r3, #4]
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c14e:	687a      	ldr	r2, [r7, #4]
 800c150:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c152:	b292      	uxth	r2, r2
 800c154:	9202      	str	r2, [sp, #8]
 800c156:	2200      	movs	r2, #0
 800c158:	9201      	str	r2, [sp, #4]
 800c15a:	9300      	str	r3, [sp, #0]
 800c15c:	4603      	mov	r3, r0
 800c15e:	2280      	movs	r2, #128	; 0x80
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f001 f86f 	bl	800d244 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	7959      	ldrb	r1, [r3, #5]
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c176:	687a      	ldr	r2, [r7, #4]
 800c178:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c17a:	b292      	uxth	r2, r2
 800c17c:	9202      	str	r2, [sp, #8]
 800c17e:	2200      	movs	r2, #0
 800c180:	9201      	str	r2, [sp, #4]
 800c182:	9300      	str	r3, [sp, #0]
 800c184:	4603      	mov	r3, r0
 800c186:	2200      	movs	r2, #0
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f001 f85b 	bl	800d244 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c18e:	e12a      	b.n	800c3e6 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c190:	7bbb      	ldrb	r3, [r7, #14]
 800c192:	2b03      	cmp	r3, #3
 800c194:	f040 8127 	bne.w	800c3e6 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	220d      	movs	r2, #13
 800c19c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	705a      	strb	r2, [r3, #1]
      break;
 800c1a4:	e11f      	b.n	800c3e6 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800c1a6:	2109      	movs	r1, #9
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f000 fa39 	bl	800c620 <USBH_Get_CfgDesc>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c1b2:	7bbb      	ldrb	r3, [r7, #14]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d103      	bne.n	800c1c0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2204      	movs	r2, #4
 800c1bc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c1be:	e114      	b.n	800c3ea <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c1c0:	7bbb      	ldrb	r3, [r7, #14]
 800c1c2:	2b03      	cmp	r3, #3
 800c1c4:	f040 8111 	bne.w	800c3ea <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c1ce:	3301      	adds	r3, #1
 800c1d0:	b2da      	uxtb	r2, r3
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c1de:	2b03      	cmp	r3, #3
 800c1e0:	d903      	bls.n	800c1ea <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	220d      	movs	r2, #13
 800c1e6:	701a      	strb	r2, [r3, #0]
      break;
 800c1e8:	e0ff      	b.n	800c3ea <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	795b      	ldrb	r3, [r3, #5]
 800c1ee:	4619      	mov	r1, r3
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f001 f877 	bl	800d2e4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	791b      	ldrb	r3, [r3, #4]
 800c1fa:	4619      	mov	r1, r3
 800c1fc:	6878      	ldr	r0, [r7, #4]
 800c1fe:	f001 f871 	bl	800d2e4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2200      	movs	r2, #0
 800c206:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2200      	movs	r2, #0
 800c20c:	701a      	strb	r2, [r3, #0]
      break;
 800c20e:	e0ec      	b.n	800c3ea <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800c216:	4619      	mov	r1, r3
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f000 fa01 	bl	800c620 <USBH_Get_CfgDesc>
 800c21e:	4603      	mov	r3, r0
 800c220:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c222:	7bbb      	ldrb	r3, [r7, #14]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d103      	bne.n	800c230 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2205      	movs	r2, #5
 800c22c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c22e:	e0de      	b.n	800c3ee <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c230:	7bbb      	ldrb	r3, [r7, #14]
 800c232:	2b03      	cmp	r3, #3
 800c234:	f040 80db 	bne.w	800c3ee <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c23e:	3301      	adds	r3, #1
 800c240:	b2da      	uxtb	r2, r3
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c24e:	2b03      	cmp	r3, #3
 800c250:	d903      	bls.n	800c25a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	220d      	movs	r2, #13
 800c256:	701a      	strb	r2, [r3, #0]
      break;
 800c258:	e0c9      	b.n	800c3ee <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	795b      	ldrb	r3, [r3, #5]
 800c25e:	4619      	mov	r1, r3
 800c260:	6878      	ldr	r0, [r7, #4]
 800c262:	f001 f83f 	bl	800d2e4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	791b      	ldrb	r3, [r3, #4]
 800c26a:	4619      	mov	r1, r3
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	f001 f839 	bl	800d2e4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2200      	movs	r2, #0
 800c276:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2200      	movs	r2, #0
 800c27c:	701a      	strb	r2, [r3, #0]
      break;
 800c27e:	e0b6      	b.n	800c3ee <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800c286:	2b00      	cmp	r3, #0
 800c288:	d036      	beq.n	800c2f8 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c296:	23ff      	movs	r3, #255	; 0xff
 800c298:	6878      	ldr	r0, [r7, #4]
 800c29a:	f000 f9e5 	bl	800c668 <USBH_Get_StringDesc>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c2a2:	7bbb      	ldrb	r3, [r7, #14]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d111      	bne.n	800c2cc <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2206      	movs	r2, #6
 800c2ac:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2205      	movs	r2, #5
 800c2b2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	f001 fbd1 	bl	800da6c <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c2ca:	e092      	b.n	800c3f2 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c2cc:	7bbb      	ldrb	r3, [r7, #14]
 800c2ce:	2b03      	cmp	r3, #3
 800c2d0:	f040 808f 	bne.w	800c3f2 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2206      	movs	r2, #6
 800c2d8:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2205      	movs	r2, #5
 800c2de:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	f001 fbbb 	bl	800da6c <osMessageQueuePut>
      break;
 800c2f6:	e07c      	b.n	800c3f2 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2206      	movs	r2, #6
 800c2fc:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2205      	movs	r2, #5
 800c302:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c312:	2300      	movs	r3, #0
 800c314:	2200      	movs	r2, #0
 800c316:	f001 fba9 	bl	800da6c <osMessageQueuePut>
      break;
 800c31a:	e06a      	b.n	800c3f2 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800c322:	2b00      	cmp	r3, #0
 800c324:	d027      	beq.n	800c376 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c332:	23ff      	movs	r3, #255	; 0xff
 800c334:	6878      	ldr	r0, [r7, #4]
 800c336:	f000 f997 	bl	800c668 <USBH_Get_StringDesc>
 800c33a:	4603      	mov	r3, r0
 800c33c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c33e:	7bbb      	ldrb	r3, [r7, #14]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d103      	bne.n	800c34c <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2207      	movs	r2, #7
 800c348:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c34a:	e054      	b.n	800c3f6 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c34c:	7bbb      	ldrb	r3, [r7, #14]
 800c34e:	2b03      	cmp	r3, #3
 800c350:	d151      	bne.n	800c3f6 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	2207      	movs	r2, #7
 800c356:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2205      	movs	r2, #5
 800c35c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c36c:	2300      	movs	r3, #0
 800c36e:	2200      	movs	r2, #0
 800c370:	f001 fb7c 	bl	800da6c <osMessageQueuePut>
      break;
 800c374:	e03f      	b.n	800c3f6 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2207      	movs	r2, #7
 800c37a:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2205      	movs	r2, #5
 800c380:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c390:	2300      	movs	r3, #0
 800c392:	2200      	movs	r2, #0
 800c394:	f001 fb6a 	bl	800da6c <osMessageQueuePut>
      break;
 800c398:	e02d      	b.n	800c3f6 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d017      	beq.n	800c3d4 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c3b0:	23ff      	movs	r3, #255	; 0xff
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	f000 f958 	bl	800c668 <USBH_Get_StringDesc>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c3bc:	7bbb      	ldrb	r3, [r7, #14]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d102      	bne.n	800c3c8 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800c3c6:	e018      	b.n	800c3fa <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c3c8:	7bbb      	ldrb	r3, [r7, #14]
 800c3ca:	2b03      	cmp	r3, #3
 800c3cc:	d115      	bne.n	800c3fa <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	73fb      	strb	r3, [r7, #15]
      break;
 800c3d2:	e012      	b.n	800c3fa <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	73fb      	strb	r3, [r7, #15]
      break;
 800c3d8:	e00f      	b.n	800c3fa <USBH_HandleEnum+0x44a>

    default:
      break;
 800c3da:	bf00      	nop
 800c3dc:	e00e      	b.n	800c3fc <USBH_HandleEnum+0x44c>
      break;
 800c3de:	bf00      	nop
 800c3e0:	e00c      	b.n	800c3fc <USBH_HandleEnum+0x44c>
      break;
 800c3e2:	bf00      	nop
 800c3e4:	e00a      	b.n	800c3fc <USBH_HandleEnum+0x44c>
      break;
 800c3e6:	bf00      	nop
 800c3e8:	e008      	b.n	800c3fc <USBH_HandleEnum+0x44c>
      break;
 800c3ea:	bf00      	nop
 800c3ec:	e006      	b.n	800c3fc <USBH_HandleEnum+0x44c>
      break;
 800c3ee:	bf00      	nop
 800c3f0:	e004      	b.n	800c3fc <USBH_HandleEnum+0x44c>
      break;
 800c3f2:	bf00      	nop
 800c3f4:	e002      	b.n	800c3fc <USBH_HandleEnum+0x44c>
      break;
 800c3f6:	bf00      	nop
 800c3f8:	e000      	b.n	800c3fc <USBH_HandleEnum+0x44c>
      break;
 800c3fa:	bf00      	nop
  }
  return Status;
 800c3fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3fe:	4618      	mov	r0, r3
 800c400:	3710      	adds	r7, #16
 800c402:	46bd      	mov	sp, r7
 800c404:	bd80      	pop	{r7, pc}
 800c406:	bf00      	nop

0800c408 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800c408:	b480      	push	{r7}
 800c40a:	b083      	sub	sp, #12
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
 800c410:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	683a      	ldr	r2, [r7, #0]
 800c416:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800c41a:	bf00      	nop
 800c41c:	370c      	adds	r7, #12
 800c41e:	46bd      	mov	sp, r7
 800c420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c424:	4770      	bx	lr

0800c426 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800c426:	b580      	push	{r7, lr}
 800c428:	b082      	sub	sp, #8
 800c42a:	af00      	add	r7, sp, #0
 800c42c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c434:	1c5a      	adds	r2, r3, #1
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800c43c:	6878      	ldr	r0, [r7, #4]
 800c43e:	f000 f804 	bl	800c44a <USBH_HandleSof>
}
 800c442:	bf00      	nop
 800c444:	3708      	adds	r7, #8
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}

0800c44a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800c44a:	b580      	push	{r7, lr}
 800c44c:	b082      	sub	sp, #8
 800c44e:	af00      	add	r7, sp, #0
 800c450:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	781b      	ldrb	r3, [r3, #0]
 800c456:	b2db      	uxtb	r3, r3
 800c458:	2b0b      	cmp	r3, #11
 800c45a:	d10a      	bne.n	800c472 <USBH_HandleSof+0x28>
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c462:	2b00      	cmp	r3, #0
 800c464:	d005      	beq.n	800c472 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c46c:	699b      	ldr	r3, [r3, #24]
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	4798      	blx	r3
  }
}
 800c472:	bf00      	nop
 800c474:	3708      	adds	r7, #8
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}

0800c47a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800c47a:	b580      	push	{r7, lr}
 800c47c:	b082      	sub	sp, #8
 800c47e:	af00      	add	r7, sp, #0
 800c480:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2201      	movs	r2, #1
 800c486:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2201      	movs	r2, #1
 800c48e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c49e:	2300      	movs	r3, #0
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	f001 fae3 	bl	800da6c <osMessageQueuePut>
#endif
#endif

  return;
 800c4a6:	bf00      	nop
}
 800c4a8:	3708      	adds	r7, #8
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}

0800c4ae <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800c4ae:	b480      	push	{r7}
 800c4b0:	b083      	sub	sp, #12
 800c4b2:	af00      	add	r7, sp, #0
 800c4b4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800c4be:	bf00      	nop
}
 800c4c0:	370c      	adds	r7, #12
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c8:	4770      	bx	lr

0800c4ca <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800c4ca:	b580      	push	{r7, lr}
 800c4cc:	b082      	sub	sp, #8
 800c4ce:	af00      	add	r7, sp, #0
 800c4d0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2201      	movs	r2, #1
 800c4d6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2200      	movs	r2, #0
 800c4de:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	2201      	movs	r2, #1
 800c4ee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c4fe:	2300      	movs	r3, #0
 800c500:	2200      	movs	r2, #0
 800c502:	f001 fab3 	bl	800da6c <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800c506:	2300      	movs	r3, #0
}
 800c508:	4618      	mov	r0, r3
 800c50a:	3708      	adds	r7, #8
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}

0800c510 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b082      	sub	sp, #8
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2201      	movs	r2, #1
 800c51c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2200      	movs	r2, #0
 800c524:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2200      	movs	r2, #0
 800c52c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	f004 fea4 	bl	801127e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	791b      	ldrb	r3, [r3, #4]
 800c53a:	4619      	mov	r1, r3
 800c53c:	6878      	ldr	r0, [r7, #4]
 800c53e:	f000 fed1 	bl	800d2e4 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	795b      	ldrb	r3, [r3, #5]
 800c546:	4619      	mov	r1, r3
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	f000 fecb 	bl	800d2e4 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	2201      	movs	r2, #1
 800c552:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c562:	2300      	movs	r3, #0
 800c564:	2200      	movs	r2, #0
 800c566:	f001 fa81 	bl	800da6c <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800c56a:	2300      	movs	r3, #0
}
 800c56c:	4618      	mov	r0, r3
 800c56e:	3708      	adds	r7, #8
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}

0800c574 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b084      	sub	sp, #16
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800c588:	f04f 33ff 	mov.w	r3, #4294967295
 800c58c:	2200      	movs	r2, #0
 800c58e:	f001 fae1 	bl	800db54 <osMessageQueueGet>
 800c592:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d1f0      	bne.n	800c57c <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800c59a:	6878      	ldr	r0, [r7, #4]
 800c59c:	f7ff faa6 	bl	800baec <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800c5a0:	e7ec      	b.n	800c57c <USBH_Process_OS+0x8>

0800c5a2 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800c5a2:	b580      	push	{r7, lr}
 800c5a4:	b082      	sub	sp, #8
 800c5a6:	af00      	add	r7, sp, #0
 800c5a8:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2201      	movs	r2, #1
 800c5ae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c5be:	2300      	movs	r3, #0
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	f001 fa53 	bl	800da6c <osMessageQueuePut>
#endif

  return USBH_OK;
 800c5c6:	2300      	movs	r3, #0
}
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	3708      	adds	r7, #8
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bd80      	pop	{r7, pc}

0800c5d0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b086      	sub	sp, #24
 800c5d4:	af02      	add	r7, sp, #8
 800c5d6:	6078      	str	r0, [r7, #4]
 800c5d8:	460b      	mov	r3, r1
 800c5da:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800c5e2:	78fb      	ldrb	r3, [r7, #3]
 800c5e4:	b29b      	uxth	r3, r3
 800c5e6:	9300      	str	r3, [sp, #0]
 800c5e8:	4613      	mov	r3, r2
 800c5ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c5ee:	2100      	movs	r1, #0
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f000 f864 	bl	800c6be <USBH_GetDescriptor>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	73fb      	strb	r3, [r7, #15]
 800c5fa:	7bfb      	ldrb	r3, [r7, #15]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d10a      	bne.n	800c616 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	f203 3026 	addw	r0, r3, #806	; 0x326
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c60c:	78fa      	ldrb	r2, [r7, #3]
 800c60e:	b292      	uxth	r2, r2
 800c610:	4619      	mov	r1, r3
 800c612:	f000 f918 	bl	800c846 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800c616:	7bfb      	ldrb	r3, [r7, #15]
}
 800c618:	4618      	mov	r0, r3
 800c61a:	3710      	adds	r7, #16
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bd80      	pop	{r7, pc}

0800c620 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800c620:	b580      	push	{r7, lr}
 800c622:	b086      	sub	sp, #24
 800c624:	af02      	add	r7, sp, #8
 800c626:	6078      	str	r0, [r7, #4]
 800c628:	460b      	mov	r3, r1
 800c62a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	331c      	adds	r3, #28
 800c630:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800c632:	887b      	ldrh	r3, [r7, #2]
 800c634:	9300      	str	r3, [sp, #0]
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c63c:	2100      	movs	r1, #0
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f000 f83d 	bl	800c6be <USBH_GetDescriptor>
 800c644:	4603      	mov	r3, r0
 800c646:	72fb      	strb	r3, [r7, #11]
 800c648:	7afb      	ldrb	r3, [r7, #11]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d107      	bne.n	800c65e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c654:	887a      	ldrh	r2, [r7, #2]
 800c656:	68f9      	ldr	r1, [r7, #12]
 800c658:	4618      	mov	r0, r3
 800c65a:	f000 f964 	bl	800c926 <USBH_ParseCfgDesc>
  }

  return status;
 800c65e:	7afb      	ldrb	r3, [r7, #11]
}
 800c660:	4618      	mov	r0, r3
 800c662:	3710      	adds	r7, #16
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}

0800c668 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b088      	sub	sp, #32
 800c66c:	af02      	add	r7, sp, #8
 800c66e:	60f8      	str	r0, [r7, #12]
 800c670:	607a      	str	r2, [r7, #4]
 800c672:	461a      	mov	r2, r3
 800c674:	460b      	mov	r3, r1
 800c676:	72fb      	strb	r3, [r7, #11]
 800c678:	4613      	mov	r3, r2
 800c67a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800c67c:	7afb      	ldrb	r3, [r7, #11]
 800c67e:	b29b      	uxth	r3, r3
 800c680:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c684:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800c68c:	893b      	ldrh	r3, [r7, #8]
 800c68e:	9300      	str	r3, [sp, #0]
 800c690:	460b      	mov	r3, r1
 800c692:	2100      	movs	r1, #0
 800c694:	68f8      	ldr	r0, [r7, #12]
 800c696:	f000 f812 	bl	800c6be <USBH_GetDescriptor>
 800c69a:	4603      	mov	r3, r0
 800c69c:	75fb      	strb	r3, [r7, #23]
 800c69e:	7dfb      	ldrb	r3, [r7, #23]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d107      	bne.n	800c6b4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c6aa:	893a      	ldrh	r2, [r7, #8]
 800c6ac:	6879      	ldr	r1, [r7, #4]
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f000 fa37 	bl	800cb22 <USBH_ParseStringDesc>
  }

  return status;
 800c6b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	3718      	adds	r7, #24
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	bd80      	pop	{r7, pc}

0800c6be <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800c6be:	b580      	push	{r7, lr}
 800c6c0:	b084      	sub	sp, #16
 800c6c2:	af00      	add	r7, sp, #0
 800c6c4:	60f8      	str	r0, [r7, #12]
 800c6c6:	607b      	str	r3, [r7, #4]
 800c6c8:	460b      	mov	r3, r1
 800c6ca:	72fb      	strb	r3, [r7, #11]
 800c6cc:	4613      	mov	r3, r2
 800c6ce:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	789b      	ldrb	r3, [r3, #2]
 800c6d4:	2b01      	cmp	r3, #1
 800c6d6:	d11c      	bne.n	800c712 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800c6d8:	7afb      	ldrb	r3, [r7, #11]
 800c6da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c6de:	b2da      	uxtb	r2, r3
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	2206      	movs	r2, #6
 800c6e8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	893a      	ldrh	r2, [r7, #8]
 800c6ee:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800c6f0:	893b      	ldrh	r3, [r7, #8]
 800c6f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c6f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c6fa:	d104      	bne.n	800c706 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	f240 4209 	movw	r2, #1033	; 0x409
 800c702:	829a      	strh	r2, [r3, #20]
 800c704:	e002      	b.n	800c70c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	2200      	movs	r2, #0
 800c70a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	8b3a      	ldrh	r2, [r7, #24]
 800c710:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800c712:	8b3b      	ldrh	r3, [r7, #24]
 800c714:	461a      	mov	r2, r3
 800c716:	6879      	ldr	r1, [r7, #4]
 800c718:	68f8      	ldr	r0, [r7, #12]
 800c71a:	f000 fa50 	bl	800cbbe <USBH_CtlReq>
 800c71e:	4603      	mov	r3, r0
}
 800c720:	4618      	mov	r0, r3
 800c722:	3710      	adds	r7, #16
 800c724:	46bd      	mov	sp, r7
 800c726:	bd80      	pop	{r7, pc}

0800c728 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b082      	sub	sp, #8
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
 800c730:	460b      	mov	r3, r1
 800c732:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	789b      	ldrb	r3, [r3, #2]
 800c738:	2b01      	cmp	r3, #1
 800c73a:	d10f      	bne.n	800c75c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2200      	movs	r2, #0
 800c740:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2205      	movs	r2, #5
 800c746:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800c748:	78fb      	ldrb	r3, [r7, #3]
 800c74a:	b29a      	uxth	r2, r3
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2200      	movs	r2, #0
 800c754:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2200      	movs	r2, #0
 800c75a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800c75c:	2200      	movs	r2, #0
 800c75e:	2100      	movs	r1, #0
 800c760:	6878      	ldr	r0, [r7, #4]
 800c762:	f000 fa2c 	bl	800cbbe <USBH_CtlReq>
 800c766:	4603      	mov	r3, r0
}
 800c768:	4618      	mov	r0, r3
 800c76a:	3708      	adds	r7, #8
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}

0800c770 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b082      	sub	sp, #8
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
 800c778:	460b      	mov	r3, r1
 800c77a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	789b      	ldrb	r3, [r3, #2]
 800c780:	2b01      	cmp	r3, #1
 800c782:	d10e      	bne.n	800c7a2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2200      	movs	r2, #0
 800c788:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2209      	movs	r2, #9
 800c78e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	887a      	ldrh	r2, [r7, #2]
 800c794:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	2200      	movs	r2, #0
 800c79a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2200      	movs	r2, #0
 800c7a0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	2100      	movs	r1, #0
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f000 fa09 	bl	800cbbe <USBH_CtlReq>
 800c7ac:	4603      	mov	r3, r0
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	3708      	adds	r7, #8
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}

0800c7b6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800c7b6:	b580      	push	{r7, lr}
 800c7b8:	b082      	sub	sp, #8
 800c7ba:	af00      	add	r7, sp, #0
 800c7bc:	6078      	str	r0, [r7, #4]
 800c7be:	460b      	mov	r3, r1
 800c7c0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	789b      	ldrb	r3, [r3, #2]
 800c7c6:	2b01      	cmp	r3, #1
 800c7c8:	d10f      	bne.n	800c7ea <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2203      	movs	r2, #3
 800c7d4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800c7d6:	78fb      	ldrb	r3, [r7, #3]
 800c7d8:	b29a      	uxth	r2, r3
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	2100      	movs	r1, #0
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f000 f9e5 	bl	800cbbe <USBH_CtlReq>
 800c7f4:	4603      	mov	r3, r0
}
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	3708      	adds	r7, #8
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd80      	pop	{r7, pc}

0800c7fe <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800c7fe:	b580      	push	{r7, lr}
 800c800:	b082      	sub	sp, #8
 800c802:	af00      	add	r7, sp, #0
 800c804:	6078      	str	r0, [r7, #4]
 800c806:	460b      	mov	r3, r1
 800c808:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	789b      	ldrb	r3, [r3, #2]
 800c80e:	2b01      	cmp	r3, #1
 800c810:	d10f      	bne.n	800c832 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2202      	movs	r2, #2
 800c816:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2201      	movs	r2, #1
 800c81c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	2200      	movs	r2, #0
 800c822:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800c824:	78fb      	ldrb	r3, [r7, #3]
 800c826:	b29a      	uxth	r2, r3
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2200      	movs	r2, #0
 800c830:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800c832:	2200      	movs	r2, #0
 800c834:	2100      	movs	r1, #0
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f000 f9c1 	bl	800cbbe <USBH_CtlReq>
 800c83c:	4603      	mov	r3, r0
}
 800c83e:	4618      	mov	r0, r3
 800c840:	3708      	adds	r7, #8
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}

0800c846 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800c846:	b480      	push	{r7}
 800c848:	b085      	sub	sp, #20
 800c84a:	af00      	add	r7, sp, #0
 800c84c:	60f8      	str	r0, [r7, #12]
 800c84e:	60b9      	str	r1, [r7, #8]
 800c850:	4613      	mov	r3, r2
 800c852:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	781a      	ldrb	r2, [r3, #0]
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800c85c:	68bb      	ldr	r3, [r7, #8]
 800c85e:	785a      	ldrb	r2, [r3, #1]
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800c864:	68bb      	ldr	r3, [r7, #8]
 800c866:	3302      	adds	r3, #2
 800c868:	781b      	ldrb	r3, [r3, #0]
 800c86a:	b29a      	uxth	r2, r3
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	3303      	adds	r3, #3
 800c870:	781b      	ldrb	r3, [r3, #0]
 800c872:	b29b      	uxth	r3, r3
 800c874:	021b      	lsls	r3, r3, #8
 800c876:	b29b      	uxth	r3, r3
 800c878:	4313      	orrs	r3, r2
 800c87a:	b29a      	uxth	r2, r3
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	791a      	ldrb	r2, [r3, #4]
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	795a      	ldrb	r2, [r3, #5]
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	799a      	ldrb	r2, [r3, #6]
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	79da      	ldrb	r2, [r3, #7]
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800c8a0:	88fb      	ldrh	r3, [r7, #6]
 800c8a2:	2b08      	cmp	r3, #8
 800c8a4:	d939      	bls.n	800c91a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	3308      	adds	r3, #8
 800c8aa:	781b      	ldrb	r3, [r3, #0]
 800c8ac:	b29a      	uxth	r2, r3
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	3309      	adds	r3, #9
 800c8b2:	781b      	ldrb	r3, [r3, #0]
 800c8b4:	b29b      	uxth	r3, r3
 800c8b6:	021b      	lsls	r3, r3, #8
 800c8b8:	b29b      	uxth	r3, r3
 800c8ba:	4313      	orrs	r3, r2
 800c8bc:	b29a      	uxth	r2, r3
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	330a      	adds	r3, #10
 800c8c6:	781b      	ldrb	r3, [r3, #0]
 800c8c8:	b29a      	uxth	r2, r3
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	330b      	adds	r3, #11
 800c8ce:	781b      	ldrb	r3, [r3, #0]
 800c8d0:	b29b      	uxth	r3, r3
 800c8d2:	021b      	lsls	r3, r3, #8
 800c8d4:	b29b      	uxth	r3, r3
 800c8d6:	4313      	orrs	r3, r2
 800c8d8:	b29a      	uxth	r2, r3
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800c8de:	68bb      	ldr	r3, [r7, #8]
 800c8e0:	330c      	adds	r3, #12
 800c8e2:	781b      	ldrb	r3, [r3, #0]
 800c8e4:	b29a      	uxth	r2, r3
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	330d      	adds	r3, #13
 800c8ea:	781b      	ldrb	r3, [r3, #0]
 800c8ec:	b29b      	uxth	r3, r3
 800c8ee:	021b      	lsls	r3, r3, #8
 800c8f0:	b29b      	uxth	r3, r3
 800c8f2:	4313      	orrs	r3, r2
 800c8f4:	b29a      	uxth	r2, r3
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800c8fa:	68bb      	ldr	r3, [r7, #8]
 800c8fc:	7b9a      	ldrb	r2, [r3, #14]
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800c902:	68bb      	ldr	r3, [r7, #8]
 800c904:	7bda      	ldrb	r2, [r3, #15]
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800c90a:	68bb      	ldr	r3, [r7, #8]
 800c90c:	7c1a      	ldrb	r2, [r3, #16]
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	7c5a      	ldrb	r2, [r3, #17]
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	745a      	strb	r2, [r3, #17]
  }
}
 800c91a:	bf00      	nop
 800c91c:	3714      	adds	r7, #20
 800c91e:	46bd      	mov	sp, r7
 800c920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c924:	4770      	bx	lr

0800c926 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800c926:	b580      	push	{r7, lr}
 800c928:	b08a      	sub	sp, #40	; 0x28
 800c92a:	af00      	add	r7, sp, #0
 800c92c:	60f8      	str	r0, [r7, #12]
 800c92e:	60b9      	str	r1, [r7, #8]
 800c930:	4613      	mov	r3, r2
 800c932:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800c938:	2300      	movs	r3, #0
 800c93a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800c93e:	2300      	movs	r3, #0
 800c940:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	781a      	ldrb	r2, [r3, #0]
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	785a      	ldrb	r2, [r3, #1]
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800c958:	68bb      	ldr	r3, [r7, #8]
 800c95a:	3302      	adds	r3, #2
 800c95c:	781b      	ldrb	r3, [r3, #0]
 800c95e:	b29a      	uxth	r2, r3
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	3303      	adds	r3, #3
 800c964:	781b      	ldrb	r3, [r3, #0]
 800c966:	b29b      	uxth	r3, r3
 800c968:	021b      	lsls	r3, r3, #8
 800c96a:	b29b      	uxth	r3, r3
 800c96c:	4313      	orrs	r3, r2
 800c96e:	b29a      	uxth	r2, r3
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	791a      	ldrb	r2, [r3, #4]
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800c97c:	68bb      	ldr	r3, [r7, #8]
 800c97e:	795a      	ldrb	r2, [r3, #5]
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	799a      	ldrb	r2, [r3, #6]
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	79da      	ldrb	r2, [r3, #7]
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800c994:	68bb      	ldr	r3, [r7, #8]
 800c996:	7a1a      	ldrb	r2, [r3, #8]
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800c99c:	88fb      	ldrh	r3, [r7, #6]
 800c99e:	2b09      	cmp	r3, #9
 800c9a0:	d95f      	bls.n	800ca62 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800c9a2:	2309      	movs	r3, #9
 800c9a4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c9aa:	e051      	b.n	800ca50 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c9ac:	f107 0316 	add.w	r3, r7, #22
 800c9b0:	4619      	mov	r1, r3
 800c9b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c9b4:	f000 f8e8 	bl	800cb88 <USBH_GetNextDesc>
 800c9b8:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800c9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9bc:	785b      	ldrb	r3, [r3, #1]
 800c9be:	2b04      	cmp	r3, #4
 800c9c0:	d146      	bne.n	800ca50 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800c9c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c9c6:	221a      	movs	r2, #26
 800c9c8:	fb02 f303 	mul.w	r3, r2, r3
 800c9cc:	3308      	adds	r3, #8
 800c9ce:	68fa      	ldr	r2, [r7, #12]
 800c9d0:	4413      	add	r3, r2
 800c9d2:	3302      	adds	r3, #2
 800c9d4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800c9d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c9d8:	69f8      	ldr	r0, [r7, #28]
 800c9da:	f000 f846 	bl	800ca6a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800c9de:	2300      	movs	r3, #0
 800c9e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c9e8:	e022      	b.n	800ca30 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c9ea:	f107 0316 	add.w	r3, r7, #22
 800c9ee:	4619      	mov	r1, r3
 800c9f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c9f2:	f000 f8c9 	bl	800cb88 <USBH_GetNextDesc>
 800c9f6:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800c9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9fa:	785b      	ldrb	r3, [r3, #1]
 800c9fc:	2b05      	cmp	r3, #5
 800c9fe:	d117      	bne.n	800ca30 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ca00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ca04:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ca08:	3201      	adds	r2, #1
 800ca0a:	00d2      	lsls	r2, r2, #3
 800ca0c:	211a      	movs	r1, #26
 800ca0e:	fb01 f303 	mul.w	r3, r1, r3
 800ca12:	4413      	add	r3, r2
 800ca14:	3308      	adds	r3, #8
 800ca16:	68fa      	ldr	r2, [r7, #12]
 800ca18:	4413      	add	r3, r2
 800ca1a:	3304      	adds	r3, #4
 800ca1c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800ca1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ca20:	69b8      	ldr	r0, [r7, #24]
 800ca22:	f000 f851 	bl	800cac8 <USBH_ParseEPDesc>
            ep_ix++;
 800ca26:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ca2a:	3301      	adds	r3, #1
 800ca2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ca30:	69fb      	ldr	r3, [r7, #28]
 800ca32:	791b      	ldrb	r3, [r3, #4]
 800ca34:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ca38:	429a      	cmp	r2, r3
 800ca3a:	d204      	bcs.n	800ca46 <USBH_ParseCfgDesc+0x120>
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	885a      	ldrh	r2, [r3, #2]
 800ca40:	8afb      	ldrh	r3, [r7, #22]
 800ca42:	429a      	cmp	r2, r3
 800ca44:	d8d1      	bhi.n	800c9ea <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800ca46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ca4a:	3301      	adds	r3, #1
 800ca4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ca50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ca54:	2b01      	cmp	r3, #1
 800ca56:	d804      	bhi.n	800ca62 <USBH_ParseCfgDesc+0x13c>
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	885a      	ldrh	r2, [r3, #2]
 800ca5c:	8afb      	ldrh	r3, [r7, #22]
 800ca5e:	429a      	cmp	r2, r3
 800ca60:	d8a4      	bhi.n	800c9ac <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800ca62:	bf00      	nop
 800ca64:	3728      	adds	r7, #40	; 0x28
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}

0800ca6a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800ca6a:	b480      	push	{r7}
 800ca6c:	b083      	sub	sp, #12
 800ca6e:	af00      	add	r7, sp, #0
 800ca70:	6078      	str	r0, [r7, #4]
 800ca72:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	781a      	ldrb	r2, [r3, #0]
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	785a      	ldrb	r2, [r3, #1]
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	789a      	ldrb	r2, [r3, #2]
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	78da      	ldrb	r2, [r3, #3]
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	791a      	ldrb	r2, [r3, #4]
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	795a      	ldrb	r2, [r3, #5]
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	799a      	ldrb	r2, [r3, #6]
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	79da      	ldrb	r2, [r3, #7]
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	7a1a      	ldrb	r2, [r3, #8]
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	721a      	strb	r2, [r3, #8]
}
 800cabc:	bf00      	nop
 800cabe:	370c      	adds	r7, #12
 800cac0:	46bd      	mov	sp, r7
 800cac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac6:	4770      	bx	lr

0800cac8 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800cac8:	b480      	push	{r7}
 800caca:	b083      	sub	sp, #12
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
 800cad0:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	781a      	ldrb	r2, [r3, #0]
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	785a      	ldrb	r2, [r3, #1]
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	789a      	ldrb	r2, [r3, #2]
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	78da      	ldrb	r2, [r3, #3]
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	3304      	adds	r3, #4
 800caf6:	781b      	ldrb	r3, [r3, #0]
 800caf8:	b29a      	uxth	r2, r3
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	3305      	adds	r3, #5
 800cafe:	781b      	ldrb	r3, [r3, #0]
 800cb00:	b29b      	uxth	r3, r3
 800cb02:	021b      	lsls	r3, r3, #8
 800cb04:	b29b      	uxth	r3, r3
 800cb06:	4313      	orrs	r3, r2
 800cb08:	b29a      	uxth	r2, r3
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	799a      	ldrb	r2, [r3, #6]
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	719a      	strb	r2, [r3, #6]
}
 800cb16:	bf00      	nop
 800cb18:	370c      	adds	r7, #12
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb20:	4770      	bx	lr

0800cb22 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800cb22:	b480      	push	{r7}
 800cb24:	b087      	sub	sp, #28
 800cb26:	af00      	add	r7, sp, #0
 800cb28:	60f8      	str	r0, [r7, #12]
 800cb2a:	60b9      	str	r1, [r7, #8]
 800cb2c:	4613      	mov	r3, r2
 800cb2e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	3301      	adds	r3, #1
 800cb34:	781b      	ldrb	r3, [r3, #0]
 800cb36:	2b03      	cmp	r3, #3
 800cb38:	d120      	bne.n	800cb7c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	781b      	ldrb	r3, [r3, #0]
 800cb3e:	1e9a      	subs	r2, r3, #2
 800cb40:	88fb      	ldrh	r3, [r7, #6]
 800cb42:	4293      	cmp	r3, r2
 800cb44:	bf28      	it	cs
 800cb46:	4613      	movcs	r3, r2
 800cb48:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	3302      	adds	r3, #2
 800cb4e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800cb50:	2300      	movs	r3, #0
 800cb52:	82fb      	strh	r3, [r7, #22]
 800cb54:	e00b      	b.n	800cb6e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800cb56:	8afb      	ldrh	r3, [r7, #22]
 800cb58:	68fa      	ldr	r2, [r7, #12]
 800cb5a:	4413      	add	r3, r2
 800cb5c:	781a      	ldrb	r2, [r3, #0]
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	701a      	strb	r2, [r3, #0]
      pdest++;
 800cb62:	68bb      	ldr	r3, [r7, #8]
 800cb64:	3301      	adds	r3, #1
 800cb66:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800cb68:	8afb      	ldrh	r3, [r7, #22]
 800cb6a:	3302      	adds	r3, #2
 800cb6c:	82fb      	strh	r3, [r7, #22]
 800cb6e:	8afa      	ldrh	r2, [r7, #22]
 800cb70:	8abb      	ldrh	r3, [r7, #20]
 800cb72:	429a      	cmp	r2, r3
 800cb74:	d3ef      	bcc.n	800cb56 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	2200      	movs	r2, #0
 800cb7a:	701a      	strb	r2, [r3, #0]
  }
}
 800cb7c:	bf00      	nop
 800cb7e:	371c      	adds	r7, #28
 800cb80:	46bd      	mov	sp, r7
 800cb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb86:	4770      	bx	lr

0800cb88 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800cb88:	b480      	push	{r7}
 800cb8a:	b085      	sub	sp, #20
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
 800cb90:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	881a      	ldrh	r2, [r3, #0]
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	781b      	ldrb	r3, [r3, #0]
 800cb9a:	b29b      	uxth	r3, r3
 800cb9c:	4413      	add	r3, r2
 800cb9e:	b29a      	uxth	r2, r3
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	781b      	ldrb	r3, [r3, #0]
 800cba8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	4413      	add	r3, r2
 800cbae:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cbb0:	68fb      	ldr	r3, [r7, #12]
}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	3714      	adds	r7, #20
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbc:	4770      	bx	lr

0800cbbe <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800cbbe:	b580      	push	{r7, lr}
 800cbc0:	b086      	sub	sp, #24
 800cbc2:	af00      	add	r7, sp, #0
 800cbc4:	60f8      	str	r0, [r7, #12]
 800cbc6:	60b9      	str	r1, [r7, #8]
 800cbc8:	4613      	mov	r3, r2
 800cbca:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800cbcc:	2301      	movs	r3, #1
 800cbce:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	789b      	ldrb	r3, [r3, #2]
 800cbd4:	2b01      	cmp	r3, #1
 800cbd6:	d002      	beq.n	800cbde <USBH_CtlReq+0x20>
 800cbd8:	2b02      	cmp	r3, #2
 800cbda:	d01d      	beq.n	800cc18 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800cbdc:	e043      	b.n	800cc66 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	68ba      	ldr	r2, [r7, #8]
 800cbe2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	88fa      	ldrh	r2, [r7, #6]
 800cbe8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	2201      	movs	r2, #1
 800cbee:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	2202      	movs	r2, #2
 800cbf4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	2203      	movs	r2, #3
 800cbfe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cc0e:	2300      	movs	r3, #0
 800cc10:	2200      	movs	r2, #0
 800cc12:	f000 ff2b 	bl	800da6c <osMessageQueuePut>
      break;
 800cc16:	e026      	b.n	800cc66 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800cc18:	68f8      	ldr	r0, [r7, #12]
 800cc1a:	f000 f829 	bl	800cc70 <USBH_HandleControl>
 800cc1e:	4603      	mov	r3, r0
 800cc20:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800cc22:	7dfb      	ldrb	r3, [r7, #23]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d002      	beq.n	800cc2e <USBH_CtlReq+0x70>
 800cc28:	7dfb      	ldrb	r3, [r7, #23]
 800cc2a:	2b03      	cmp	r3, #3
 800cc2c:	d106      	bne.n	800cc3c <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	2201      	movs	r2, #1
 800cc32:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	2200      	movs	r2, #0
 800cc38:	761a      	strb	r2, [r3, #24]
 800cc3a:	e005      	b.n	800cc48 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800cc3c:	7dfb      	ldrb	r3, [r7, #23]
 800cc3e:	2b02      	cmp	r3, #2
 800cc40:	d102      	bne.n	800cc48 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	2201      	movs	r2, #1
 800cc46:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	2203      	movs	r2, #3
 800cc4c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	2200      	movs	r2, #0
 800cc60:	f000 ff04 	bl	800da6c <osMessageQueuePut>
      break;
 800cc64:	bf00      	nop
  }
  return status;
 800cc66:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	3718      	adds	r7, #24
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}

0800cc70 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b086      	sub	sp, #24
 800cc74:	af02      	add	r7, sp, #8
 800cc76:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800cc78:	2301      	movs	r3, #1
 800cc7a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	7e1b      	ldrb	r3, [r3, #24]
 800cc84:	3b01      	subs	r3, #1
 800cc86:	2b0a      	cmp	r3, #10
 800cc88:	f200 822b 	bhi.w	800d0e2 <USBH_HandleControl+0x472>
 800cc8c:	a201      	add	r2, pc, #4	; (adr r2, 800cc94 <USBH_HandleControl+0x24>)
 800cc8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc92:	bf00      	nop
 800cc94:	0800ccc1 	.word	0x0800ccc1
 800cc98:	0800ccdb 	.word	0x0800ccdb
 800cc9c:	0800cd7d 	.word	0x0800cd7d
 800cca0:	0800cda3 	.word	0x0800cda3
 800cca4:	0800ce2f 	.word	0x0800ce2f
 800cca8:	0800ce5b 	.word	0x0800ce5b
 800ccac:	0800cf1d 	.word	0x0800cf1d
 800ccb0:	0800cf3f 	.word	0x0800cf3f
 800ccb4:	0800cfd1 	.word	0x0800cfd1
 800ccb8:	0800cff9 	.word	0x0800cff9
 800ccbc:	0800d08b 	.word	0x0800d08b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	f103 0110 	add.w	r1, r3, #16
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	795b      	ldrb	r3, [r3, #5]
 800ccca:	461a      	mov	r2, r3
 800cccc:	6878      	ldr	r0, [r7, #4]
 800ccce:	f000 fa19 	bl	800d104 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2202      	movs	r2, #2
 800ccd6:	761a      	strb	r2, [r3, #24]
      break;
 800ccd8:	e20e      	b.n	800d0f8 <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	795b      	ldrb	r3, [r3, #5]
 800ccde:	4619      	mov	r1, r3
 800cce0:	6878      	ldr	r0, [r7, #4]
 800cce2:	f004 fbb9 	bl	8011458 <USBH_LL_GetURBState>
 800cce6:	4603      	mov	r3, r0
 800cce8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800ccea:	7bbb      	ldrb	r3, [r7, #14]
 800ccec:	2b01      	cmp	r3, #1
 800ccee:	d12c      	bne.n	800cd4a <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	7c1b      	ldrb	r3, [r3, #16]
 800ccf4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ccf8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	8adb      	ldrh	r3, [r3, #22]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d00a      	beq.n	800cd18 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800cd02:	7b7b      	ldrb	r3, [r7, #13]
 800cd04:	2b80      	cmp	r3, #128	; 0x80
 800cd06:	d103      	bne.n	800cd10 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	2203      	movs	r2, #3
 800cd0c:	761a      	strb	r2, [r3, #24]
 800cd0e:	e00d      	b.n	800cd2c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2205      	movs	r2, #5
 800cd14:	761a      	strb	r2, [r3, #24]
 800cd16:	e009      	b.n	800cd2c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800cd18:	7b7b      	ldrb	r3, [r7, #13]
 800cd1a:	2b80      	cmp	r3, #128	; 0x80
 800cd1c:	d103      	bne.n	800cd26 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	2209      	movs	r2, #9
 800cd22:	761a      	strb	r2, [r3, #24]
 800cd24:	e002      	b.n	800cd2c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	2207      	movs	r2, #7
 800cd2a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2203      	movs	r2, #3
 800cd30:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cd40:	2300      	movs	r3, #0
 800cd42:	2200      	movs	r2, #0
 800cd44:	f000 fe92 	bl	800da6c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800cd48:	e1cd      	b.n	800d0e6 <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800cd4a:	7bbb      	ldrb	r3, [r7, #14]
 800cd4c:	2b04      	cmp	r3, #4
 800cd4e:	d003      	beq.n	800cd58 <USBH_HandleControl+0xe8>
 800cd50:	7bbb      	ldrb	r3, [r7, #14]
 800cd52:	2b02      	cmp	r3, #2
 800cd54:	f040 81c7 	bne.w	800d0e6 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	220b      	movs	r2, #11
 800cd5c:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	2203      	movs	r2, #3
 800cd62:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cd72:	2300      	movs	r3, #0
 800cd74:	2200      	movs	r2, #0
 800cd76:	f000 fe79 	bl	800da6c <osMessageQueuePut>
      break;
 800cd7a:	e1b4      	b.n	800d0e6 <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cd82:	b29a      	uxth	r2, r3
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	6899      	ldr	r1, [r3, #8]
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	899a      	ldrh	r2, [r3, #12]
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	791b      	ldrb	r3, [r3, #4]
 800cd94:	6878      	ldr	r0, [r7, #4]
 800cd96:	f000 f9f4 	bl	800d182 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2204      	movs	r2, #4
 800cd9e:	761a      	strb	r2, [r3, #24]
      break;
 800cda0:	e1aa      	b.n	800d0f8 <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	791b      	ldrb	r3, [r3, #4]
 800cda6:	4619      	mov	r1, r3
 800cda8:	6878      	ldr	r0, [r7, #4]
 800cdaa:	f004 fb55 	bl	8011458 <USBH_LL_GetURBState>
 800cdae:	4603      	mov	r3, r0
 800cdb0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800cdb2:	7bbb      	ldrb	r3, [r7, #14]
 800cdb4:	2b01      	cmp	r3, #1
 800cdb6:	d110      	bne.n	800cdda <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2209      	movs	r2, #9
 800cdbc:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	2203      	movs	r2, #3
 800cdc2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	f000 fe49 	bl	800da6c <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800cdda:	7bbb      	ldrb	r3, [r7, #14]
 800cddc:	2b05      	cmp	r3, #5
 800cdde:	d110      	bne.n	800ce02 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800cde0:	2303      	movs	r3, #3
 800cde2:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2203      	movs	r2, #3
 800cde8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	f000 fe36 	bl	800da6c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ce00:	e173      	b.n	800d0ea <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800ce02:	7bbb      	ldrb	r3, [r7, #14]
 800ce04:	2b04      	cmp	r3, #4
 800ce06:	f040 8170 	bne.w	800d0ea <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	220b      	movs	r2, #11
 800ce0e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2203      	movs	r2, #3
 800ce14:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ce24:	2300      	movs	r3, #0
 800ce26:	2200      	movs	r2, #0
 800ce28:	f000 fe20 	bl	800da6c <osMessageQueuePut>
      break;
 800ce2c:	e15d      	b.n	800d0ea <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	6899      	ldr	r1, [r3, #8]
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	899a      	ldrh	r2, [r3, #12]
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	7958      	ldrb	r0, [r3, #5]
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	9300      	str	r3, [sp, #0]
 800ce3e:	4603      	mov	r3, r0
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	f000 f979 	bl	800d138 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ce4c:	b29a      	uxth	r2, r3
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	2206      	movs	r2, #6
 800ce56:	761a      	strb	r2, [r3, #24]
      break;
 800ce58:	e14e      	b.n	800d0f8 <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	795b      	ldrb	r3, [r3, #5]
 800ce5e:	4619      	mov	r1, r3
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f004 faf9 	bl	8011458 <USBH_LL_GetURBState>
 800ce66:	4603      	mov	r3, r0
 800ce68:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ce6a:	7bbb      	ldrb	r3, [r7, #14]
 800ce6c:	2b01      	cmp	r3, #1
 800ce6e:	d111      	bne.n	800ce94 <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2207      	movs	r2, #7
 800ce74:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	2203      	movs	r2, #3
 800ce7a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	f000 fded 	bl	800da6c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ce92:	e12c      	b.n	800d0ee <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 800ce94:	7bbb      	ldrb	r3, [r7, #14]
 800ce96:	2b05      	cmp	r3, #5
 800ce98:	d113      	bne.n	800cec2 <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	220c      	movs	r2, #12
 800ce9e:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800cea0:	2303      	movs	r3, #3
 800cea2:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2203      	movs	r2, #3
 800cea8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ceb8:	2300      	movs	r3, #0
 800ceba:	2200      	movs	r2, #0
 800cebc:	f000 fdd6 	bl	800da6c <osMessageQueuePut>
      break;
 800cec0:	e115      	b.n	800d0ee <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 800cec2:	7bbb      	ldrb	r3, [r7, #14]
 800cec4:	2b02      	cmp	r3, #2
 800cec6:	d111      	bne.n	800ceec <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2205      	movs	r2, #5
 800cecc:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2203      	movs	r2, #3
 800ced2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cee2:	2300      	movs	r3, #0
 800cee4:	2200      	movs	r2, #0
 800cee6:	f000 fdc1 	bl	800da6c <osMessageQueuePut>
      break;
 800ceea:	e100      	b.n	800d0ee <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 800ceec:	7bbb      	ldrb	r3, [r7, #14]
 800ceee:	2b04      	cmp	r3, #4
 800cef0:	f040 80fd 	bne.w	800d0ee <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	220b      	movs	r2, #11
 800cef8:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800cefa:	2302      	movs	r3, #2
 800cefc:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2203      	movs	r2, #3
 800cf02:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cf12:	2300      	movs	r3, #0
 800cf14:	2200      	movs	r2, #0
 800cf16:	f000 fda9 	bl	800da6c <osMessageQueuePut>
      break;
 800cf1a:	e0e8      	b.n	800d0ee <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	791b      	ldrb	r3, [r3, #4]
 800cf20:	2200      	movs	r2, #0
 800cf22:	2100      	movs	r1, #0
 800cf24:	6878      	ldr	r0, [r7, #4]
 800cf26:	f000 f92c 	bl	800d182 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cf30:	b29a      	uxth	r2, r3
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2208      	movs	r2, #8
 800cf3a:	761a      	strb	r2, [r3, #24]

      break;
 800cf3c:	e0dc      	b.n	800d0f8 <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	791b      	ldrb	r3, [r3, #4]
 800cf42:	4619      	mov	r1, r3
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	f004 fa87 	bl	8011458 <USBH_LL_GetURBState>
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800cf4e:	7bbb      	ldrb	r3, [r7, #14]
 800cf50:	2b01      	cmp	r3, #1
 800cf52:	d113      	bne.n	800cf7c <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	220d      	movs	r2, #13
 800cf58:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2203      	movs	r2, #3
 800cf62:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cf72:	2300      	movs	r3, #0
 800cf74:	2200      	movs	r2, #0
 800cf76:	f000 fd79 	bl	800da6c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800cf7a:	e0ba      	b.n	800d0f2 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 800cf7c:	7bbb      	ldrb	r3, [r7, #14]
 800cf7e:	2b04      	cmp	r3, #4
 800cf80:	d111      	bne.n	800cfa6 <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	220b      	movs	r2, #11
 800cf86:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2203      	movs	r2, #3
 800cf8c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	f000 fd64 	bl	800da6c <osMessageQueuePut>
      break;
 800cfa4:	e0a5      	b.n	800d0f2 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 800cfa6:	7bbb      	ldrb	r3, [r7, #14]
 800cfa8:	2b05      	cmp	r3, #5
 800cfaa:	f040 80a2 	bne.w	800d0f2 <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 800cfae:	2303      	movs	r3, #3
 800cfb0:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	2203      	movs	r2, #3
 800cfb6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	2200      	movs	r2, #0
 800cfca:	f000 fd4f 	bl	800da6c <osMessageQueuePut>
      break;
 800cfce:	e090      	b.n	800d0f2 <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	795a      	ldrb	r2, [r3, #5]
 800cfd4:	2301      	movs	r3, #1
 800cfd6:	9300      	str	r3, [sp, #0]
 800cfd8:	4613      	mov	r3, r2
 800cfda:	2200      	movs	r2, #0
 800cfdc:	2100      	movs	r1, #0
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	f000 f8aa 	bl	800d138 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cfea:	b29a      	uxth	r2, r3
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	220a      	movs	r2, #10
 800cff4:	761a      	strb	r2, [r3, #24]
      break;
 800cff6:	e07f      	b.n	800d0f8 <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	795b      	ldrb	r3, [r3, #5]
 800cffc:	4619      	mov	r1, r3
 800cffe:	6878      	ldr	r0, [r7, #4]
 800d000:	f004 fa2a 	bl	8011458 <USBH_LL_GetURBState>
 800d004:	4603      	mov	r3, r0
 800d006:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800d008:	7bbb      	ldrb	r3, [r7, #14]
 800d00a:	2b01      	cmp	r3, #1
 800d00c:	d113      	bne.n	800d036 <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 800d00e:	2300      	movs	r3, #0
 800d010:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	220d      	movs	r2, #13
 800d016:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2203      	movs	r2, #3
 800d01c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d02c:	2300      	movs	r3, #0
 800d02e:	2200      	movs	r2, #0
 800d030:	f000 fd1c 	bl	800da6c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d034:	e05f      	b.n	800d0f6 <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d036:	7bbb      	ldrb	r3, [r7, #14]
 800d038:	2b02      	cmp	r3, #2
 800d03a:	d111      	bne.n	800d060 <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2209      	movs	r2, #9
 800d040:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	2203      	movs	r2, #3
 800d046:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d056:	2300      	movs	r3, #0
 800d058:	2200      	movs	r2, #0
 800d05a:	f000 fd07 	bl	800da6c <osMessageQueuePut>
      break;
 800d05e:	e04a      	b.n	800d0f6 <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 800d060:	7bbb      	ldrb	r3, [r7, #14]
 800d062:	2b04      	cmp	r3, #4
 800d064:	d147      	bne.n	800d0f6 <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	220b      	movs	r2, #11
 800d06a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2203      	movs	r2, #3
 800d070:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d080:	2300      	movs	r3, #0
 800d082:	2200      	movs	r2, #0
 800d084:	f000 fcf2 	bl	800da6c <osMessageQueuePut>
      break;
 800d088:	e035      	b.n	800d0f6 <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	7e5b      	ldrb	r3, [r3, #25]
 800d08e:	3301      	adds	r3, #1
 800d090:	b2da      	uxtb	r2, r3
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	765a      	strb	r2, [r3, #25]
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	7e5b      	ldrb	r3, [r3, #25]
 800d09a:	2b02      	cmp	r3, #2
 800d09c:	d806      	bhi.n	800d0ac <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	2201      	movs	r2, #1
 800d0a2:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2201      	movs	r2, #1
 800d0a8:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800d0aa:	e025      	b.n	800d0f8 <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d0b2:	2106      	movs	r1, #6
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	795b      	ldrb	r3, [r3, #5]
 800d0c2:	4619      	mov	r1, r3
 800d0c4:	6878      	ldr	r0, [r7, #4]
 800d0c6:	f000 f90d 	bl	800d2e4 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	791b      	ldrb	r3, [r3, #4]
 800d0ce:	4619      	mov	r1, r3
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f000 f907 	bl	800d2e4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2200      	movs	r2, #0
 800d0da:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800d0dc:	2302      	movs	r3, #2
 800d0de:	73fb      	strb	r3, [r7, #15]
      break;
 800d0e0:	e00a      	b.n	800d0f8 <USBH_HandleControl+0x488>

    default:
      break;
 800d0e2:	bf00      	nop
 800d0e4:	e008      	b.n	800d0f8 <USBH_HandleControl+0x488>
      break;
 800d0e6:	bf00      	nop
 800d0e8:	e006      	b.n	800d0f8 <USBH_HandleControl+0x488>
      break;
 800d0ea:	bf00      	nop
 800d0ec:	e004      	b.n	800d0f8 <USBH_HandleControl+0x488>
      break;
 800d0ee:	bf00      	nop
 800d0f0:	e002      	b.n	800d0f8 <USBH_HandleControl+0x488>
      break;
 800d0f2:	bf00      	nop
 800d0f4:	e000      	b.n	800d0f8 <USBH_HandleControl+0x488>
      break;
 800d0f6:	bf00      	nop
  }

  return status;
 800d0f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	3710      	adds	r7, #16
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}
 800d102:	bf00      	nop

0800d104 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b088      	sub	sp, #32
 800d108:	af04      	add	r7, sp, #16
 800d10a:	60f8      	str	r0, [r7, #12]
 800d10c:	60b9      	str	r1, [r7, #8]
 800d10e:	4613      	mov	r3, r2
 800d110:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d112:	79f9      	ldrb	r1, [r7, #7]
 800d114:	2300      	movs	r3, #0
 800d116:	9303      	str	r3, [sp, #12]
 800d118:	2308      	movs	r3, #8
 800d11a:	9302      	str	r3, [sp, #8]
 800d11c:	68bb      	ldr	r3, [r7, #8]
 800d11e:	9301      	str	r3, [sp, #4]
 800d120:	2300      	movs	r3, #0
 800d122:	9300      	str	r3, [sp, #0]
 800d124:	2300      	movs	r3, #0
 800d126:	2200      	movs	r2, #0
 800d128:	68f8      	ldr	r0, [r7, #12]
 800d12a:	f004 f964 	bl	80113f6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800d12e:	2300      	movs	r3, #0
}
 800d130:	4618      	mov	r0, r3
 800d132:	3710      	adds	r7, #16
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}

0800d138 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b088      	sub	sp, #32
 800d13c:	af04      	add	r7, sp, #16
 800d13e:	60f8      	str	r0, [r7, #12]
 800d140:	60b9      	str	r1, [r7, #8]
 800d142:	4611      	mov	r1, r2
 800d144:	461a      	mov	r2, r3
 800d146:	460b      	mov	r3, r1
 800d148:	80fb      	strh	r3, [r7, #6]
 800d14a:	4613      	mov	r3, r2
 800d14c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d154:	2b00      	cmp	r3, #0
 800d156:	d001      	beq.n	800d15c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800d158:	2300      	movs	r3, #0
 800d15a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d15c:	7979      	ldrb	r1, [r7, #5]
 800d15e:	7e3b      	ldrb	r3, [r7, #24]
 800d160:	9303      	str	r3, [sp, #12]
 800d162:	88fb      	ldrh	r3, [r7, #6]
 800d164:	9302      	str	r3, [sp, #8]
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	9301      	str	r3, [sp, #4]
 800d16a:	2301      	movs	r3, #1
 800d16c:	9300      	str	r3, [sp, #0]
 800d16e:	2300      	movs	r3, #0
 800d170:	2200      	movs	r2, #0
 800d172:	68f8      	ldr	r0, [r7, #12]
 800d174:	f004 f93f 	bl	80113f6 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800d178:	2300      	movs	r3, #0
}
 800d17a:	4618      	mov	r0, r3
 800d17c:	3710      	adds	r7, #16
 800d17e:	46bd      	mov	sp, r7
 800d180:	bd80      	pop	{r7, pc}

0800d182 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800d182:	b580      	push	{r7, lr}
 800d184:	b088      	sub	sp, #32
 800d186:	af04      	add	r7, sp, #16
 800d188:	60f8      	str	r0, [r7, #12]
 800d18a:	60b9      	str	r1, [r7, #8]
 800d18c:	4611      	mov	r1, r2
 800d18e:	461a      	mov	r2, r3
 800d190:	460b      	mov	r3, r1
 800d192:	80fb      	strh	r3, [r7, #6]
 800d194:	4613      	mov	r3, r2
 800d196:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d198:	7979      	ldrb	r1, [r7, #5]
 800d19a:	2300      	movs	r3, #0
 800d19c:	9303      	str	r3, [sp, #12]
 800d19e:	88fb      	ldrh	r3, [r7, #6]
 800d1a0:	9302      	str	r3, [sp, #8]
 800d1a2:	68bb      	ldr	r3, [r7, #8]
 800d1a4:	9301      	str	r3, [sp, #4]
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	9300      	str	r3, [sp, #0]
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	2201      	movs	r2, #1
 800d1ae:	68f8      	ldr	r0, [r7, #12]
 800d1b0:	f004 f921 	bl	80113f6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800d1b4:	2300      	movs	r3, #0

}
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	3710      	adds	r7, #16
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bd80      	pop	{r7, pc}

0800d1be <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800d1be:	b580      	push	{r7, lr}
 800d1c0:	b088      	sub	sp, #32
 800d1c2:	af04      	add	r7, sp, #16
 800d1c4:	60f8      	str	r0, [r7, #12]
 800d1c6:	60b9      	str	r1, [r7, #8]
 800d1c8:	4611      	mov	r1, r2
 800d1ca:	461a      	mov	r2, r3
 800d1cc:	460b      	mov	r3, r1
 800d1ce:	80fb      	strh	r3, [r7, #6]
 800d1d0:	4613      	mov	r3, r2
 800d1d2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d001      	beq.n	800d1e2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d1e2:	7979      	ldrb	r1, [r7, #5]
 800d1e4:	7e3b      	ldrb	r3, [r7, #24]
 800d1e6:	9303      	str	r3, [sp, #12]
 800d1e8:	88fb      	ldrh	r3, [r7, #6]
 800d1ea:	9302      	str	r3, [sp, #8]
 800d1ec:	68bb      	ldr	r3, [r7, #8]
 800d1ee:	9301      	str	r3, [sp, #4]
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	9300      	str	r3, [sp, #0]
 800d1f4:	2302      	movs	r3, #2
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	68f8      	ldr	r0, [r7, #12]
 800d1fa:	f004 f8fc 	bl	80113f6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800d1fe:	2300      	movs	r3, #0
}
 800d200:	4618      	mov	r0, r3
 800d202:	3710      	adds	r7, #16
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}

0800d208 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b088      	sub	sp, #32
 800d20c:	af04      	add	r7, sp, #16
 800d20e:	60f8      	str	r0, [r7, #12]
 800d210:	60b9      	str	r1, [r7, #8]
 800d212:	4611      	mov	r1, r2
 800d214:	461a      	mov	r2, r3
 800d216:	460b      	mov	r3, r1
 800d218:	80fb      	strh	r3, [r7, #6]
 800d21a:	4613      	mov	r3, r2
 800d21c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d21e:	7979      	ldrb	r1, [r7, #5]
 800d220:	2300      	movs	r3, #0
 800d222:	9303      	str	r3, [sp, #12]
 800d224:	88fb      	ldrh	r3, [r7, #6]
 800d226:	9302      	str	r3, [sp, #8]
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	9301      	str	r3, [sp, #4]
 800d22c:	2301      	movs	r3, #1
 800d22e:	9300      	str	r3, [sp, #0]
 800d230:	2302      	movs	r3, #2
 800d232:	2201      	movs	r2, #1
 800d234:	68f8      	ldr	r0, [r7, #12]
 800d236:	f004 f8de 	bl	80113f6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800d23a:	2300      	movs	r3, #0
}
 800d23c:	4618      	mov	r0, r3
 800d23e:	3710      	adds	r7, #16
 800d240:	46bd      	mov	sp, r7
 800d242:	bd80      	pop	{r7, pc}

0800d244 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b086      	sub	sp, #24
 800d248:	af04      	add	r7, sp, #16
 800d24a:	6078      	str	r0, [r7, #4]
 800d24c:	4608      	mov	r0, r1
 800d24e:	4611      	mov	r1, r2
 800d250:	461a      	mov	r2, r3
 800d252:	4603      	mov	r3, r0
 800d254:	70fb      	strb	r3, [r7, #3]
 800d256:	460b      	mov	r3, r1
 800d258:	70bb      	strb	r3, [r7, #2]
 800d25a:	4613      	mov	r3, r2
 800d25c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800d25e:	7878      	ldrb	r0, [r7, #1]
 800d260:	78ba      	ldrb	r2, [r7, #2]
 800d262:	78f9      	ldrb	r1, [r7, #3]
 800d264:	8b3b      	ldrh	r3, [r7, #24]
 800d266:	9302      	str	r3, [sp, #8]
 800d268:	7d3b      	ldrb	r3, [r7, #20]
 800d26a:	9301      	str	r3, [sp, #4]
 800d26c:	7c3b      	ldrb	r3, [r7, #16]
 800d26e:	9300      	str	r3, [sp, #0]
 800d270:	4603      	mov	r3, r0
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	f004 f871 	bl	801135a <USBH_LL_OpenPipe>

  return USBH_OK;
 800d278:	2300      	movs	r3, #0
}
 800d27a:	4618      	mov	r0, r3
 800d27c:	3708      	adds	r7, #8
 800d27e:	46bd      	mov	sp, r7
 800d280:	bd80      	pop	{r7, pc}

0800d282 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d282:	b580      	push	{r7, lr}
 800d284:	b082      	sub	sp, #8
 800d286:	af00      	add	r7, sp, #0
 800d288:	6078      	str	r0, [r7, #4]
 800d28a:	460b      	mov	r3, r1
 800d28c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800d28e:	78fb      	ldrb	r3, [r7, #3]
 800d290:	4619      	mov	r1, r3
 800d292:	6878      	ldr	r0, [r7, #4]
 800d294:	f004 f890 	bl	80113b8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800d298:	2300      	movs	r3, #0
}
 800d29a:	4618      	mov	r0, r3
 800d29c:	3708      	adds	r7, #8
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}

0800d2a2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d2a2:	b580      	push	{r7, lr}
 800d2a4:	b084      	sub	sp, #16
 800d2a6:	af00      	add	r7, sp, #0
 800d2a8:	6078      	str	r0, [r7, #4]
 800d2aa:	460b      	mov	r3, r1
 800d2ac:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d2ae:	6878      	ldr	r0, [r7, #4]
 800d2b0:	f000 f836 	bl	800d320 <USBH_GetFreePipe>
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d2b8:	89fb      	ldrh	r3, [r7, #14]
 800d2ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d2be:	4293      	cmp	r3, r2
 800d2c0:	d00a      	beq.n	800d2d8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800d2c2:	78fa      	ldrb	r2, [r7, #3]
 800d2c4:	89fb      	ldrh	r3, [r7, #14]
 800d2c6:	f003 030f 	and.w	r3, r3, #15
 800d2ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d2ce:	6879      	ldr	r1, [r7, #4]
 800d2d0:	33e0      	adds	r3, #224	; 0xe0
 800d2d2:	009b      	lsls	r3, r3, #2
 800d2d4:	440b      	add	r3, r1
 800d2d6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800d2d8:	89fb      	ldrh	r3, [r7, #14]
 800d2da:	b2db      	uxtb	r3, r3
}
 800d2dc:	4618      	mov	r0, r3
 800d2de:	3710      	adds	r7, #16
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bd80      	pop	{r7, pc}

0800d2e4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d2e4:	b480      	push	{r7}
 800d2e6:	b083      	sub	sp, #12
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
 800d2ec:	460b      	mov	r3, r1
 800d2ee:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800d2f0:	78fb      	ldrb	r3, [r7, #3]
 800d2f2:	2b0a      	cmp	r3, #10
 800d2f4:	d80d      	bhi.n	800d312 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800d2f6:	78fb      	ldrb	r3, [r7, #3]
 800d2f8:	687a      	ldr	r2, [r7, #4]
 800d2fa:	33e0      	adds	r3, #224	; 0xe0
 800d2fc:	009b      	lsls	r3, r3, #2
 800d2fe:	4413      	add	r3, r2
 800d300:	685a      	ldr	r2, [r3, #4]
 800d302:	78fb      	ldrb	r3, [r7, #3]
 800d304:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800d308:	6879      	ldr	r1, [r7, #4]
 800d30a:	33e0      	adds	r3, #224	; 0xe0
 800d30c:	009b      	lsls	r3, r3, #2
 800d30e:	440b      	add	r3, r1
 800d310:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800d312:	2300      	movs	r3, #0
}
 800d314:	4618      	mov	r0, r3
 800d316:	370c      	adds	r7, #12
 800d318:	46bd      	mov	sp, r7
 800d31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31e:	4770      	bx	lr

0800d320 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800d320:	b480      	push	{r7}
 800d322:	b085      	sub	sp, #20
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800d328:	2300      	movs	r3, #0
 800d32a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800d32c:	2300      	movs	r3, #0
 800d32e:	73fb      	strb	r3, [r7, #15]
 800d330:	e00f      	b.n	800d352 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800d332:	7bfb      	ldrb	r3, [r7, #15]
 800d334:	687a      	ldr	r2, [r7, #4]
 800d336:	33e0      	adds	r3, #224	; 0xe0
 800d338:	009b      	lsls	r3, r3, #2
 800d33a:	4413      	add	r3, r2
 800d33c:	685b      	ldr	r3, [r3, #4]
 800d33e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d342:	2b00      	cmp	r3, #0
 800d344:	d102      	bne.n	800d34c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800d346:	7bfb      	ldrb	r3, [r7, #15]
 800d348:	b29b      	uxth	r3, r3
 800d34a:	e007      	b.n	800d35c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800d34c:	7bfb      	ldrb	r3, [r7, #15]
 800d34e:	3301      	adds	r3, #1
 800d350:	73fb      	strb	r3, [r7, #15]
 800d352:	7bfb      	ldrb	r3, [r7, #15]
 800d354:	2b0a      	cmp	r3, #10
 800d356:	d9ec      	bls.n	800d332 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800d358:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800d35c:	4618      	mov	r0, r3
 800d35e:	3714      	adds	r7, #20
 800d360:	46bd      	mov	sp, r7
 800d362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d366:	4770      	bx	lr

0800d368 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d368:	b480      	push	{r7}
 800d36a:	b087      	sub	sp, #28
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	60f8      	str	r0, [r7, #12]
 800d370:	60b9      	str	r1, [r7, #8]
 800d372:	4613      	mov	r3, r2
 800d374:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d376:	2301      	movs	r3, #1
 800d378:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d37a:	2300      	movs	r3, #0
 800d37c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d37e:	4b1f      	ldr	r3, [pc, #124]	; (800d3fc <FATFS_LinkDriverEx+0x94>)
 800d380:	7a5b      	ldrb	r3, [r3, #9]
 800d382:	b2db      	uxtb	r3, r3
 800d384:	2b00      	cmp	r3, #0
 800d386:	d131      	bne.n	800d3ec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d388:	4b1c      	ldr	r3, [pc, #112]	; (800d3fc <FATFS_LinkDriverEx+0x94>)
 800d38a:	7a5b      	ldrb	r3, [r3, #9]
 800d38c:	b2db      	uxtb	r3, r3
 800d38e:	461a      	mov	r2, r3
 800d390:	4b1a      	ldr	r3, [pc, #104]	; (800d3fc <FATFS_LinkDriverEx+0x94>)
 800d392:	2100      	movs	r1, #0
 800d394:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d396:	4b19      	ldr	r3, [pc, #100]	; (800d3fc <FATFS_LinkDriverEx+0x94>)
 800d398:	7a5b      	ldrb	r3, [r3, #9]
 800d39a:	b2db      	uxtb	r3, r3
 800d39c:	4a17      	ldr	r2, [pc, #92]	; (800d3fc <FATFS_LinkDriverEx+0x94>)
 800d39e:	009b      	lsls	r3, r3, #2
 800d3a0:	4413      	add	r3, r2
 800d3a2:	68fa      	ldr	r2, [r7, #12]
 800d3a4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d3a6:	4b15      	ldr	r3, [pc, #84]	; (800d3fc <FATFS_LinkDriverEx+0x94>)
 800d3a8:	7a5b      	ldrb	r3, [r3, #9]
 800d3aa:	b2db      	uxtb	r3, r3
 800d3ac:	461a      	mov	r2, r3
 800d3ae:	4b13      	ldr	r3, [pc, #76]	; (800d3fc <FATFS_LinkDriverEx+0x94>)
 800d3b0:	4413      	add	r3, r2
 800d3b2:	79fa      	ldrb	r2, [r7, #7]
 800d3b4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d3b6:	4b11      	ldr	r3, [pc, #68]	; (800d3fc <FATFS_LinkDriverEx+0x94>)
 800d3b8:	7a5b      	ldrb	r3, [r3, #9]
 800d3ba:	b2db      	uxtb	r3, r3
 800d3bc:	1c5a      	adds	r2, r3, #1
 800d3be:	b2d1      	uxtb	r1, r2
 800d3c0:	4a0e      	ldr	r2, [pc, #56]	; (800d3fc <FATFS_LinkDriverEx+0x94>)
 800d3c2:	7251      	strb	r1, [r2, #9]
 800d3c4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d3c6:	7dbb      	ldrb	r3, [r7, #22]
 800d3c8:	3330      	adds	r3, #48	; 0x30
 800d3ca:	b2da      	uxtb	r2, r3
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	3301      	adds	r3, #1
 800d3d4:	223a      	movs	r2, #58	; 0x3a
 800d3d6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d3d8:	68bb      	ldr	r3, [r7, #8]
 800d3da:	3302      	adds	r3, #2
 800d3dc:	222f      	movs	r2, #47	; 0x2f
 800d3de:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d3e0:	68bb      	ldr	r3, [r7, #8]
 800d3e2:	3303      	adds	r3, #3
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d3ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	371c      	adds	r7, #28
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f8:	4770      	bx	lr
 800d3fa:	bf00      	nop
 800d3fc:	20000100 	.word	0x20000100

0800d400 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b082      	sub	sp, #8
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
 800d408:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d40a:	2200      	movs	r2, #0
 800d40c:	6839      	ldr	r1, [r7, #0]
 800d40e:	6878      	ldr	r0, [r7, #4]
 800d410:	f7ff ffaa 	bl	800d368 <FATFS_LinkDriverEx>
 800d414:	4603      	mov	r3, r0
}
 800d416:	4618      	mov	r0, r3
 800d418:	3708      	adds	r7, #8
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}

0800d41e <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d41e:	b480      	push	{r7}
 800d420:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800d422:	bf00      	nop
 800d424:	46bd      	mov	sp, r7
 800d426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42a:	4770      	bx	lr

0800d42c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d42c:	b480      	push	{r7}
 800d42e:	b085      	sub	sp, #20
 800d430:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d432:	f3ef 8305 	mrs	r3, IPSR
 800d436:	60bb      	str	r3, [r7, #8]
  return(result);
 800d438:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d10f      	bne.n	800d45e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d43e:	f3ef 8310 	mrs	r3, PRIMASK
 800d442:	607b      	str	r3, [r7, #4]
  return(result);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d105      	bne.n	800d456 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d44a:	f3ef 8311 	mrs	r3, BASEPRI
 800d44e:	603b      	str	r3, [r7, #0]
  return(result);
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d007      	beq.n	800d466 <osKernelInitialize+0x3a>
 800d456:	4b0e      	ldr	r3, [pc, #56]	; (800d490 <osKernelInitialize+0x64>)
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	2b02      	cmp	r3, #2
 800d45c:	d103      	bne.n	800d466 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800d45e:	f06f 0305 	mvn.w	r3, #5
 800d462:	60fb      	str	r3, [r7, #12]
 800d464:	e00c      	b.n	800d480 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d466:	4b0a      	ldr	r3, [pc, #40]	; (800d490 <osKernelInitialize+0x64>)
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d105      	bne.n	800d47a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d46e:	4b08      	ldr	r3, [pc, #32]	; (800d490 <osKernelInitialize+0x64>)
 800d470:	2201      	movs	r2, #1
 800d472:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d474:	2300      	movs	r3, #0
 800d476:	60fb      	str	r3, [r7, #12]
 800d478:	e002      	b.n	800d480 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800d47a:	f04f 33ff 	mov.w	r3, #4294967295
 800d47e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800d480:	68fb      	ldr	r3, [r7, #12]
}
 800d482:	4618      	mov	r0, r3
 800d484:	3714      	adds	r7, #20
 800d486:	46bd      	mov	sp, r7
 800d488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48c:	4770      	bx	lr
 800d48e:	bf00      	nop
 800d490:	2000010c 	.word	0x2000010c

0800d494 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d494:	b580      	push	{r7, lr}
 800d496:	b084      	sub	sp, #16
 800d498:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d49a:	f3ef 8305 	mrs	r3, IPSR
 800d49e:	60bb      	str	r3, [r7, #8]
  return(result);
 800d4a0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d10f      	bne.n	800d4c6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d4a6:	f3ef 8310 	mrs	r3, PRIMASK
 800d4aa:	607b      	str	r3, [r7, #4]
  return(result);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d105      	bne.n	800d4be <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d4b2:	f3ef 8311 	mrs	r3, BASEPRI
 800d4b6:	603b      	str	r3, [r7, #0]
  return(result);
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d007      	beq.n	800d4ce <osKernelStart+0x3a>
 800d4be:	4b0f      	ldr	r3, [pc, #60]	; (800d4fc <osKernelStart+0x68>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	2b02      	cmp	r3, #2
 800d4c4:	d103      	bne.n	800d4ce <osKernelStart+0x3a>
    stat = osErrorISR;
 800d4c6:	f06f 0305 	mvn.w	r3, #5
 800d4ca:	60fb      	str	r3, [r7, #12]
 800d4cc:	e010      	b.n	800d4f0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d4ce:	4b0b      	ldr	r3, [pc, #44]	; (800d4fc <osKernelStart+0x68>)
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	2b01      	cmp	r3, #1
 800d4d4:	d109      	bne.n	800d4ea <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d4d6:	f7ff ffa2 	bl	800d41e <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d4da:	4b08      	ldr	r3, [pc, #32]	; (800d4fc <osKernelStart+0x68>)
 800d4dc:	2202      	movs	r2, #2
 800d4de:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d4e0:	f001 fec4 	bl	800f26c <vTaskStartScheduler>
      stat = osOK;
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	60fb      	str	r3, [r7, #12]
 800d4e8:	e002      	b.n	800d4f0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800d4ea:	f04f 33ff 	mov.w	r3, #4294967295
 800d4ee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800d4f0:	68fb      	ldr	r3, [r7, #12]
}
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	3710      	adds	r7, #16
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}
 800d4fa:	bf00      	nop
 800d4fc:	2000010c 	.word	0x2000010c

0800d500 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d500:	b580      	push	{r7, lr}
 800d502:	b090      	sub	sp, #64	; 0x40
 800d504:	af04      	add	r7, sp, #16
 800d506:	60f8      	str	r0, [r7, #12]
 800d508:	60b9      	str	r1, [r7, #8]
 800d50a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d50c:	2300      	movs	r3, #0
 800d50e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d510:	f3ef 8305 	mrs	r3, IPSR
 800d514:	61fb      	str	r3, [r7, #28]
  return(result);
 800d516:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800d518:	2b00      	cmp	r3, #0
 800d51a:	f040 808f 	bne.w	800d63c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d51e:	f3ef 8310 	mrs	r3, PRIMASK
 800d522:	61bb      	str	r3, [r7, #24]
  return(result);
 800d524:	69bb      	ldr	r3, [r7, #24]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d105      	bne.n	800d536 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d52a:	f3ef 8311 	mrs	r3, BASEPRI
 800d52e:	617b      	str	r3, [r7, #20]
  return(result);
 800d530:	697b      	ldr	r3, [r7, #20]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d003      	beq.n	800d53e <osThreadNew+0x3e>
 800d536:	4b44      	ldr	r3, [pc, #272]	; (800d648 <osThreadNew+0x148>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	2b02      	cmp	r3, #2
 800d53c:	d07e      	beq.n	800d63c <osThreadNew+0x13c>
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d07b      	beq.n	800d63c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800d544:	2380      	movs	r3, #128	; 0x80
 800d546:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800d548:	2318      	movs	r3, #24
 800d54a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800d54c:	2300      	movs	r3, #0
 800d54e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800d550:	f04f 33ff 	mov.w	r3, #4294967295
 800d554:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d045      	beq.n	800d5e8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d002      	beq.n	800d56a <osThreadNew+0x6a>
        name = attr->name;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	699b      	ldr	r3, [r3, #24]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d002      	beq.n	800d578 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	699b      	ldr	r3, [r3, #24]
 800d576:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d008      	beq.n	800d590 <osThreadNew+0x90>
 800d57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d580:	2b38      	cmp	r3, #56	; 0x38
 800d582:	d805      	bhi.n	800d590 <osThreadNew+0x90>
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	685b      	ldr	r3, [r3, #4]
 800d588:	f003 0301 	and.w	r3, r3, #1
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d001      	beq.n	800d594 <osThreadNew+0x94>
        return (NULL);
 800d590:	2300      	movs	r3, #0
 800d592:	e054      	b.n	800d63e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	695b      	ldr	r3, [r3, #20]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d003      	beq.n	800d5a4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	695b      	ldr	r3, [r3, #20]
 800d5a0:	089b      	lsrs	r3, r3, #2
 800d5a2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	689b      	ldr	r3, [r3, #8]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d00e      	beq.n	800d5ca <osThreadNew+0xca>
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	68db      	ldr	r3, [r3, #12]
 800d5b0:	2b7b      	cmp	r3, #123	; 0x7b
 800d5b2:	d90a      	bls.n	800d5ca <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d006      	beq.n	800d5ca <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	695b      	ldr	r3, [r3, #20]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d002      	beq.n	800d5ca <osThreadNew+0xca>
        mem = 1;
 800d5c4:	2301      	movs	r3, #1
 800d5c6:	623b      	str	r3, [r7, #32]
 800d5c8:	e010      	b.n	800d5ec <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	689b      	ldr	r3, [r3, #8]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d10c      	bne.n	800d5ec <osThreadNew+0xec>
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	68db      	ldr	r3, [r3, #12]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d108      	bne.n	800d5ec <osThreadNew+0xec>
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	691b      	ldr	r3, [r3, #16]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d104      	bne.n	800d5ec <osThreadNew+0xec>
          mem = 0;
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	623b      	str	r3, [r7, #32]
 800d5e6:	e001      	b.n	800d5ec <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800d5ec:	6a3b      	ldr	r3, [r7, #32]
 800d5ee:	2b01      	cmp	r3, #1
 800d5f0:	d110      	bne.n	800d614 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800d5f6:	687a      	ldr	r2, [r7, #4]
 800d5f8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d5fa:	9202      	str	r2, [sp, #8]
 800d5fc:	9301      	str	r3, [sp, #4]
 800d5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d600:	9300      	str	r3, [sp, #0]
 800d602:	68bb      	ldr	r3, [r7, #8]
 800d604:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d606:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d608:	68f8      	ldr	r0, [r7, #12]
 800d60a:	f001 fc55 	bl	800eeb8 <xTaskCreateStatic>
 800d60e:	4603      	mov	r3, r0
 800d610:	613b      	str	r3, [r7, #16]
 800d612:	e013      	b.n	800d63c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800d614:	6a3b      	ldr	r3, [r7, #32]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d110      	bne.n	800d63c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d61c:	b29a      	uxth	r2, r3
 800d61e:	f107 0310 	add.w	r3, r7, #16
 800d622:	9301      	str	r3, [sp, #4]
 800d624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d626:	9300      	str	r3, [sp, #0]
 800d628:	68bb      	ldr	r3, [r7, #8]
 800d62a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d62c:	68f8      	ldr	r0, [r7, #12]
 800d62e:	f001 fc9d 	bl	800ef6c <xTaskCreate>
 800d632:	4603      	mov	r3, r0
 800d634:	2b01      	cmp	r3, #1
 800d636:	d001      	beq.n	800d63c <osThreadNew+0x13c>
          hTask = NULL;
 800d638:	2300      	movs	r3, #0
 800d63a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d63c:	693b      	ldr	r3, [r7, #16]
}
 800d63e:	4618      	mov	r0, r3
 800d640:	3730      	adds	r7, #48	; 0x30
 800d642:	46bd      	mov	sp, r7
 800d644:	bd80      	pop	{r7, pc}
 800d646:	bf00      	nop
 800d648:	2000010c 	.word	0x2000010c

0800d64c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b086      	sub	sp, #24
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d654:	f3ef 8305 	mrs	r3, IPSR
 800d658:	613b      	str	r3, [r7, #16]
  return(result);
 800d65a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d10f      	bne.n	800d680 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d660:	f3ef 8310 	mrs	r3, PRIMASK
 800d664:	60fb      	str	r3, [r7, #12]
  return(result);
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d105      	bne.n	800d678 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d66c:	f3ef 8311 	mrs	r3, BASEPRI
 800d670:	60bb      	str	r3, [r7, #8]
  return(result);
 800d672:	68bb      	ldr	r3, [r7, #8]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d007      	beq.n	800d688 <osDelay+0x3c>
 800d678:	4b0a      	ldr	r3, [pc, #40]	; (800d6a4 <osDelay+0x58>)
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	2b02      	cmp	r3, #2
 800d67e:	d103      	bne.n	800d688 <osDelay+0x3c>
    stat = osErrorISR;
 800d680:	f06f 0305 	mvn.w	r3, #5
 800d684:	617b      	str	r3, [r7, #20]
 800d686:	e007      	b.n	800d698 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800d688:	2300      	movs	r3, #0
 800d68a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d002      	beq.n	800d698 <osDelay+0x4c>
      vTaskDelay(ticks);
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f001 fdb6 	bl	800f204 <vTaskDelay>
    }
  }

  return (stat);
 800d698:	697b      	ldr	r3, [r7, #20]
}
 800d69a:	4618      	mov	r0, r3
 800d69c:	3718      	adds	r7, #24
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd80      	pop	{r7, pc}
 800d6a2:	bf00      	nop
 800d6a4:	2000010c 	.word	0x2000010c

0800d6a8 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b08c      	sub	sp, #48	; 0x30
 800d6ac:	af02      	add	r7, sp, #8
 800d6ae:	60f8      	str	r0, [r7, #12]
 800d6b0:	60b9      	str	r1, [r7, #8]
 800d6b2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d6b8:	f3ef 8305 	mrs	r3, IPSR
 800d6bc:	61bb      	str	r3, [r7, #24]
  return(result);
 800d6be:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	f040 8087 	bne.w	800d7d4 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d6c6:	f3ef 8310 	mrs	r3, PRIMASK
 800d6ca:	617b      	str	r3, [r7, #20]
  return(result);
 800d6cc:	697b      	ldr	r3, [r7, #20]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d105      	bne.n	800d6de <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d6d2:	f3ef 8311 	mrs	r3, BASEPRI
 800d6d6:	613b      	str	r3, [r7, #16]
  return(result);
 800d6d8:	693b      	ldr	r3, [r7, #16]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d003      	beq.n	800d6e6 <osSemaphoreNew+0x3e>
 800d6de:	4b40      	ldr	r3, [pc, #256]	; (800d7e0 <osSemaphoreNew+0x138>)
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	2b02      	cmp	r3, #2
 800d6e4:	d076      	beq.n	800d7d4 <osSemaphoreNew+0x12c>
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d073      	beq.n	800d7d4 <osSemaphoreNew+0x12c>
 800d6ec:	68ba      	ldr	r2, [r7, #8]
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	429a      	cmp	r2, r3
 800d6f2:	d86f      	bhi.n	800d7d4 <osSemaphoreNew+0x12c>
    mem = -1;
 800d6f4:	f04f 33ff 	mov.w	r3, #4294967295
 800d6f8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d015      	beq.n	800d72c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	689b      	ldr	r3, [r3, #8]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d006      	beq.n	800d716 <osSemaphoreNew+0x6e>
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	68db      	ldr	r3, [r3, #12]
 800d70c:	2b4f      	cmp	r3, #79	; 0x4f
 800d70e:	d902      	bls.n	800d716 <osSemaphoreNew+0x6e>
        mem = 1;
 800d710:	2301      	movs	r3, #1
 800d712:	623b      	str	r3, [r7, #32]
 800d714:	e00c      	b.n	800d730 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	689b      	ldr	r3, [r3, #8]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d108      	bne.n	800d730 <osSemaphoreNew+0x88>
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	68db      	ldr	r3, [r3, #12]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d104      	bne.n	800d730 <osSemaphoreNew+0x88>
          mem = 0;
 800d726:	2300      	movs	r3, #0
 800d728:	623b      	str	r3, [r7, #32]
 800d72a:	e001      	b.n	800d730 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800d72c:	2300      	movs	r3, #0
 800d72e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800d730:	6a3b      	ldr	r3, [r7, #32]
 800d732:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d736:	d04d      	beq.n	800d7d4 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	2b01      	cmp	r3, #1
 800d73c:	d129      	bne.n	800d792 <osSemaphoreNew+0xea>
        if (mem == 1) {
 800d73e:	6a3b      	ldr	r3, [r7, #32]
 800d740:	2b01      	cmp	r3, #1
 800d742:	d10b      	bne.n	800d75c <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	689a      	ldr	r2, [r3, #8]
 800d748:	2303      	movs	r3, #3
 800d74a:	9300      	str	r3, [sp, #0]
 800d74c:	4613      	mov	r3, r2
 800d74e:	2200      	movs	r2, #0
 800d750:	2100      	movs	r1, #0
 800d752:	2001      	movs	r0, #1
 800d754:	f000 fc08 	bl	800df68 <xQueueGenericCreateStatic>
 800d758:	6278      	str	r0, [r7, #36]	; 0x24
 800d75a:	e005      	b.n	800d768 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800d75c:	2203      	movs	r2, #3
 800d75e:	2100      	movs	r1, #0
 800d760:	2001      	movs	r0, #1
 800d762:	f000 fc74 	bl	800e04e <xQueueGenericCreate>
 800d766:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800d768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d022      	beq.n	800d7b4 <osSemaphoreNew+0x10c>
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d01f      	beq.n	800d7b4 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d774:	2300      	movs	r3, #0
 800d776:	2200      	movs	r2, #0
 800d778:	2100      	movs	r1, #0
 800d77a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d77c:	f000 fd30 	bl	800e1e0 <xQueueGenericSend>
 800d780:	4603      	mov	r3, r0
 800d782:	2b01      	cmp	r3, #1
 800d784:	d016      	beq.n	800d7b4 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 800d786:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d788:	f001 f9c5 	bl	800eb16 <vQueueDelete>
            hSemaphore = NULL;
 800d78c:	2300      	movs	r3, #0
 800d78e:	627b      	str	r3, [r7, #36]	; 0x24
 800d790:	e010      	b.n	800d7b4 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 800d792:	6a3b      	ldr	r3, [r7, #32]
 800d794:	2b01      	cmp	r3, #1
 800d796:	d108      	bne.n	800d7aa <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	689b      	ldr	r3, [r3, #8]
 800d79c:	461a      	mov	r2, r3
 800d79e:	68b9      	ldr	r1, [r7, #8]
 800d7a0:	68f8      	ldr	r0, [r7, #12]
 800d7a2:	f000 fcb6 	bl	800e112 <xQueueCreateCountingSemaphoreStatic>
 800d7a6:	6278      	str	r0, [r7, #36]	; 0x24
 800d7a8:	e004      	b.n	800d7b4 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800d7aa:	68b9      	ldr	r1, [r7, #8]
 800d7ac:	68f8      	ldr	r0, [r7, #12]
 800d7ae:	f000 fce5 	bl	800e17c <xQueueCreateCountingSemaphore>
 800d7b2:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800d7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d00c      	beq.n	800d7d4 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d003      	beq.n	800d7c8 <osSemaphoreNew+0x120>
          name = attr->name;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	61fb      	str	r3, [r7, #28]
 800d7c6:	e001      	b.n	800d7cc <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800d7cc:	69f9      	ldr	r1, [r7, #28]
 800d7ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d7d0:	f001 faec 	bl	800edac <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800d7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	3728      	adds	r7, #40	; 0x28
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	bd80      	pop	{r7, pc}
 800d7de:	bf00      	nop
 800d7e0:	2000010c 	.word	0x2000010c

0800d7e4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b088      	sub	sp, #32
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
 800d7ec:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800d7f6:	69bb      	ldr	r3, [r7, #24]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d103      	bne.n	800d804 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800d7fc:	f06f 0303 	mvn.w	r3, #3
 800d800:	61fb      	str	r3, [r7, #28]
 800d802:	e04b      	b.n	800d89c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d804:	f3ef 8305 	mrs	r3, IPSR
 800d808:	617b      	str	r3, [r7, #20]
  return(result);
 800d80a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d10f      	bne.n	800d830 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d810:	f3ef 8310 	mrs	r3, PRIMASK
 800d814:	613b      	str	r3, [r7, #16]
  return(result);
 800d816:	693b      	ldr	r3, [r7, #16]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d105      	bne.n	800d828 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d81c:	f3ef 8311 	mrs	r3, BASEPRI
 800d820:	60fb      	str	r3, [r7, #12]
  return(result);
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d026      	beq.n	800d876 <osSemaphoreAcquire+0x92>
 800d828:	4b1f      	ldr	r3, [pc, #124]	; (800d8a8 <osSemaphoreAcquire+0xc4>)
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	2b02      	cmp	r3, #2
 800d82e:	d122      	bne.n	800d876 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800d830:	683b      	ldr	r3, [r7, #0]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d003      	beq.n	800d83e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800d836:	f06f 0303 	mvn.w	r3, #3
 800d83a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800d83c:	e02d      	b.n	800d89a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800d83e:	2300      	movs	r3, #0
 800d840:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800d842:	f107 0308 	add.w	r3, r7, #8
 800d846:	461a      	mov	r2, r3
 800d848:	2100      	movs	r1, #0
 800d84a:	69b8      	ldr	r0, [r7, #24]
 800d84c:	f001 f8c4 	bl	800e9d8 <xQueueReceiveFromISR>
 800d850:	4603      	mov	r3, r0
 800d852:	2b01      	cmp	r3, #1
 800d854:	d003      	beq.n	800d85e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800d856:	f06f 0302 	mvn.w	r3, #2
 800d85a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800d85c:	e01d      	b.n	800d89a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800d85e:	68bb      	ldr	r3, [r7, #8]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d01a      	beq.n	800d89a <osSemaphoreAcquire+0xb6>
 800d864:	4b11      	ldr	r3, [pc, #68]	; (800d8ac <osSemaphoreAcquire+0xc8>)
 800d866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d86a:	601a      	str	r2, [r3, #0]
 800d86c:	f3bf 8f4f 	dsb	sy
 800d870:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800d874:	e011      	b.n	800d89a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800d876:	6839      	ldr	r1, [r7, #0]
 800d878:	69b8      	ldr	r0, [r7, #24]
 800d87a:	f000 ffa5 	bl	800e7c8 <xQueueSemaphoreTake>
 800d87e:	4603      	mov	r3, r0
 800d880:	2b01      	cmp	r3, #1
 800d882:	d00b      	beq.n	800d89c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d003      	beq.n	800d892 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800d88a:	f06f 0301 	mvn.w	r3, #1
 800d88e:	61fb      	str	r3, [r7, #28]
 800d890:	e004      	b.n	800d89c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800d892:	f06f 0302 	mvn.w	r3, #2
 800d896:	61fb      	str	r3, [r7, #28]
 800d898:	e000      	b.n	800d89c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800d89a:	bf00      	nop
      }
    }
  }

  return (stat);
 800d89c:	69fb      	ldr	r3, [r7, #28]
}
 800d89e:	4618      	mov	r0, r3
 800d8a0:	3720      	adds	r7, #32
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	bd80      	pop	{r7, pc}
 800d8a6:	bf00      	nop
 800d8a8:	2000010c 	.word	0x2000010c
 800d8ac:	e000ed04 	.word	0xe000ed04

0800d8b0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b088      	sub	sp, #32
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d8bc:	2300      	movs	r3, #0
 800d8be:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800d8c0:	69bb      	ldr	r3, [r7, #24]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d103      	bne.n	800d8ce <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800d8c6:	f06f 0303 	mvn.w	r3, #3
 800d8ca:	61fb      	str	r3, [r7, #28]
 800d8cc:	e03e      	b.n	800d94c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d8ce:	f3ef 8305 	mrs	r3, IPSR
 800d8d2:	617b      	str	r3, [r7, #20]
  return(result);
 800d8d4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d10f      	bne.n	800d8fa <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d8da:	f3ef 8310 	mrs	r3, PRIMASK
 800d8de:	613b      	str	r3, [r7, #16]
  return(result);
 800d8e0:	693b      	ldr	r3, [r7, #16]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d105      	bne.n	800d8f2 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d8e6:	f3ef 8311 	mrs	r3, BASEPRI
 800d8ea:	60fb      	str	r3, [r7, #12]
  return(result);
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d01e      	beq.n	800d930 <osSemaphoreRelease+0x80>
 800d8f2:	4b19      	ldr	r3, [pc, #100]	; (800d958 <osSemaphoreRelease+0xa8>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	2b02      	cmp	r3, #2
 800d8f8:	d11a      	bne.n	800d930 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d8fe:	f107 0308 	add.w	r3, r7, #8
 800d902:	4619      	mov	r1, r3
 800d904:	69b8      	ldr	r0, [r7, #24]
 800d906:	f000 fdf9 	bl	800e4fc <xQueueGiveFromISR>
 800d90a:	4603      	mov	r3, r0
 800d90c:	2b01      	cmp	r3, #1
 800d90e:	d003      	beq.n	800d918 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800d910:	f06f 0302 	mvn.w	r3, #2
 800d914:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d916:	e018      	b.n	800d94a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800d918:	68bb      	ldr	r3, [r7, #8]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d015      	beq.n	800d94a <osSemaphoreRelease+0x9a>
 800d91e:	4b0f      	ldr	r3, [pc, #60]	; (800d95c <osSemaphoreRelease+0xac>)
 800d920:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d924:	601a      	str	r2, [r3, #0]
 800d926:	f3bf 8f4f 	dsb	sy
 800d92a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d92e:	e00c      	b.n	800d94a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d930:	2300      	movs	r3, #0
 800d932:	2200      	movs	r2, #0
 800d934:	2100      	movs	r1, #0
 800d936:	69b8      	ldr	r0, [r7, #24]
 800d938:	f000 fc52 	bl	800e1e0 <xQueueGenericSend>
 800d93c:	4603      	mov	r3, r0
 800d93e:	2b01      	cmp	r3, #1
 800d940:	d004      	beq.n	800d94c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800d942:	f06f 0302 	mvn.w	r3, #2
 800d946:	61fb      	str	r3, [r7, #28]
 800d948:	e000      	b.n	800d94c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d94a:	bf00      	nop
    }
  }

  return (stat);
 800d94c:	69fb      	ldr	r3, [r7, #28]
}
 800d94e:	4618      	mov	r0, r3
 800d950:	3720      	adds	r7, #32
 800d952:	46bd      	mov	sp, r7
 800d954:	bd80      	pop	{r7, pc}
 800d956:	bf00      	nop
 800d958:	2000010c 	.word	0x2000010c
 800d95c:	e000ed04 	.word	0xe000ed04

0800d960 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800d960:	b580      	push	{r7, lr}
 800d962:	b08c      	sub	sp, #48	; 0x30
 800d964:	af02      	add	r7, sp, #8
 800d966:	60f8      	str	r0, [r7, #12]
 800d968:	60b9      	str	r1, [r7, #8]
 800d96a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800d96c:	2300      	movs	r3, #0
 800d96e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d970:	f3ef 8305 	mrs	r3, IPSR
 800d974:	61bb      	str	r3, [r7, #24]
  return(result);
 800d976:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d170      	bne.n	800da5e <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d97c:	f3ef 8310 	mrs	r3, PRIMASK
 800d980:	617b      	str	r3, [r7, #20]
  return(result);
 800d982:	697b      	ldr	r3, [r7, #20]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d105      	bne.n	800d994 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d988:	f3ef 8311 	mrs	r3, BASEPRI
 800d98c:	613b      	str	r3, [r7, #16]
  return(result);
 800d98e:	693b      	ldr	r3, [r7, #16]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d003      	beq.n	800d99c <osMessageQueueNew+0x3c>
 800d994:	4b34      	ldr	r3, [pc, #208]	; (800da68 <osMessageQueueNew+0x108>)
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	2b02      	cmp	r3, #2
 800d99a:	d060      	beq.n	800da5e <osMessageQueueNew+0xfe>
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d05d      	beq.n	800da5e <osMessageQueueNew+0xfe>
 800d9a2:	68bb      	ldr	r3, [r7, #8]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d05a      	beq.n	800da5e <osMessageQueueNew+0xfe>
    mem = -1;
 800d9a8:	f04f 33ff 	mov.w	r3, #4294967295
 800d9ac:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d029      	beq.n	800da08 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	689b      	ldr	r3, [r3, #8]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d012      	beq.n	800d9e2 <osMessageQueueNew+0x82>
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	68db      	ldr	r3, [r3, #12]
 800d9c0:	2b4f      	cmp	r3, #79	; 0x4f
 800d9c2:	d90e      	bls.n	800d9e2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d00a      	beq.n	800d9e2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	695a      	ldr	r2, [r3, #20]
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	68b9      	ldr	r1, [r7, #8]
 800d9d4:	fb01 f303 	mul.w	r3, r1, r3
 800d9d8:	429a      	cmp	r2, r3
 800d9da:	d302      	bcc.n	800d9e2 <osMessageQueueNew+0x82>
        mem = 1;
 800d9dc:	2301      	movs	r3, #1
 800d9de:	623b      	str	r3, [r7, #32]
 800d9e0:	e014      	b.n	800da0c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	689b      	ldr	r3, [r3, #8]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d110      	bne.n	800da0c <osMessageQueueNew+0xac>
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	68db      	ldr	r3, [r3, #12]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d10c      	bne.n	800da0c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d108      	bne.n	800da0c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	695b      	ldr	r3, [r3, #20]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d104      	bne.n	800da0c <osMessageQueueNew+0xac>
          mem = 0;
 800da02:	2300      	movs	r3, #0
 800da04:	623b      	str	r3, [r7, #32]
 800da06:	e001      	b.n	800da0c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800da08:	2300      	movs	r3, #0
 800da0a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800da0c:	6a3b      	ldr	r3, [r7, #32]
 800da0e:	2b01      	cmp	r3, #1
 800da10:	d10c      	bne.n	800da2c <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	691a      	ldr	r2, [r3, #16]
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	6899      	ldr	r1, [r3, #8]
 800da1a:	2300      	movs	r3, #0
 800da1c:	9300      	str	r3, [sp, #0]
 800da1e:	460b      	mov	r3, r1
 800da20:	68b9      	ldr	r1, [r7, #8]
 800da22:	68f8      	ldr	r0, [r7, #12]
 800da24:	f000 faa0 	bl	800df68 <xQueueGenericCreateStatic>
 800da28:	6278      	str	r0, [r7, #36]	; 0x24
 800da2a:	e008      	b.n	800da3e <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800da2c:	6a3b      	ldr	r3, [r7, #32]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d105      	bne.n	800da3e <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800da32:	2200      	movs	r2, #0
 800da34:	68b9      	ldr	r1, [r7, #8]
 800da36:	68f8      	ldr	r0, [r7, #12]
 800da38:	f000 fb09 	bl	800e04e <xQueueGenericCreate>
 800da3c:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800da3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da40:	2b00      	cmp	r3, #0
 800da42:	d00c      	beq.n	800da5e <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d003      	beq.n	800da52 <osMessageQueueNew+0xf2>
        name = attr->name;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	61fb      	str	r3, [r7, #28]
 800da50:	e001      	b.n	800da56 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800da52:	2300      	movs	r3, #0
 800da54:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800da56:	69f9      	ldr	r1, [r7, #28]
 800da58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da5a:	f001 f9a7 	bl	800edac <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800da5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800da60:	4618      	mov	r0, r3
 800da62:	3728      	adds	r7, #40	; 0x28
 800da64:	46bd      	mov	sp, r7
 800da66:	bd80      	pop	{r7, pc}
 800da68:	2000010c 	.word	0x2000010c

0800da6c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b08a      	sub	sp, #40	; 0x28
 800da70:	af00      	add	r7, sp, #0
 800da72:	60f8      	str	r0, [r7, #12]
 800da74:	60b9      	str	r1, [r7, #8]
 800da76:	603b      	str	r3, [r7, #0]
 800da78:	4613      	mov	r3, r2
 800da7a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800da80:	2300      	movs	r3, #0
 800da82:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da84:	f3ef 8305 	mrs	r3, IPSR
 800da88:	61fb      	str	r3, [r7, #28]
  return(result);
 800da8a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d10f      	bne.n	800dab0 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da90:	f3ef 8310 	mrs	r3, PRIMASK
 800da94:	61bb      	str	r3, [r7, #24]
  return(result);
 800da96:	69bb      	ldr	r3, [r7, #24]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d105      	bne.n	800daa8 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800da9c:	f3ef 8311 	mrs	r3, BASEPRI
 800daa0:	617b      	str	r3, [r7, #20]
  return(result);
 800daa2:	697b      	ldr	r3, [r7, #20]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d02c      	beq.n	800db02 <osMessageQueuePut+0x96>
 800daa8:	4b28      	ldr	r3, [pc, #160]	; (800db4c <osMessageQueuePut+0xe0>)
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	2b02      	cmp	r3, #2
 800daae:	d128      	bne.n	800db02 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dab0:	6a3b      	ldr	r3, [r7, #32]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d005      	beq.n	800dac2 <osMessageQueuePut+0x56>
 800dab6:	68bb      	ldr	r3, [r7, #8]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d002      	beq.n	800dac2 <osMessageQueuePut+0x56>
 800dabc:	683b      	ldr	r3, [r7, #0]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d003      	beq.n	800daca <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800dac2:	f06f 0303 	mvn.w	r3, #3
 800dac6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dac8:	e039      	b.n	800db3e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800daca:	2300      	movs	r3, #0
 800dacc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800dace:	f107 0210 	add.w	r2, r7, #16
 800dad2:	2300      	movs	r3, #0
 800dad4:	68b9      	ldr	r1, [r7, #8]
 800dad6:	6a38      	ldr	r0, [r7, #32]
 800dad8:	f000 fc7c 	bl	800e3d4 <xQueueGenericSendFromISR>
 800dadc:	4603      	mov	r3, r0
 800dade:	2b01      	cmp	r3, #1
 800dae0:	d003      	beq.n	800daea <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800dae2:	f06f 0302 	mvn.w	r3, #2
 800dae6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dae8:	e029      	b.n	800db3e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800daea:	693b      	ldr	r3, [r7, #16]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d026      	beq.n	800db3e <osMessageQueuePut+0xd2>
 800daf0:	4b17      	ldr	r3, [pc, #92]	; (800db50 <osMessageQueuePut+0xe4>)
 800daf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800daf6:	601a      	str	r2, [r3, #0]
 800daf8:	f3bf 8f4f 	dsb	sy
 800dafc:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800db00:	e01d      	b.n	800db3e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800db02:	6a3b      	ldr	r3, [r7, #32]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d002      	beq.n	800db0e <osMessageQueuePut+0xa2>
 800db08:	68bb      	ldr	r3, [r7, #8]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d103      	bne.n	800db16 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800db0e:	f06f 0303 	mvn.w	r3, #3
 800db12:	627b      	str	r3, [r7, #36]	; 0x24
 800db14:	e014      	b.n	800db40 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800db16:	2300      	movs	r3, #0
 800db18:	683a      	ldr	r2, [r7, #0]
 800db1a:	68b9      	ldr	r1, [r7, #8]
 800db1c:	6a38      	ldr	r0, [r7, #32]
 800db1e:	f000 fb5f 	bl	800e1e0 <xQueueGenericSend>
 800db22:	4603      	mov	r3, r0
 800db24:	2b01      	cmp	r3, #1
 800db26:	d00b      	beq.n	800db40 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d003      	beq.n	800db36 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800db2e:	f06f 0301 	mvn.w	r3, #1
 800db32:	627b      	str	r3, [r7, #36]	; 0x24
 800db34:	e004      	b.n	800db40 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800db36:	f06f 0302 	mvn.w	r3, #2
 800db3a:	627b      	str	r3, [r7, #36]	; 0x24
 800db3c:	e000      	b.n	800db40 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800db3e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800db40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800db42:	4618      	mov	r0, r3
 800db44:	3728      	adds	r7, #40	; 0x28
 800db46:	46bd      	mov	sp, r7
 800db48:	bd80      	pop	{r7, pc}
 800db4a:	bf00      	nop
 800db4c:	2000010c 	.word	0x2000010c
 800db50:	e000ed04 	.word	0xe000ed04

0800db54 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800db54:	b580      	push	{r7, lr}
 800db56:	b08a      	sub	sp, #40	; 0x28
 800db58:	af00      	add	r7, sp, #0
 800db5a:	60f8      	str	r0, [r7, #12]
 800db5c:	60b9      	str	r1, [r7, #8]
 800db5e:	607a      	str	r2, [r7, #4]
 800db60:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800db66:	2300      	movs	r3, #0
 800db68:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800db6a:	f3ef 8305 	mrs	r3, IPSR
 800db6e:	61fb      	str	r3, [r7, #28]
  return(result);
 800db70:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800db72:	2b00      	cmp	r3, #0
 800db74:	d10f      	bne.n	800db96 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db76:	f3ef 8310 	mrs	r3, PRIMASK
 800db7a:	61bb      	str	r3, [r7, #24]
  return(result);
 800db7c:	69bb      	ldr	r3, [r7, #24]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d105      	bne.n	800db8e <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800db82:	f3ef 8311 	mrs	r3, BASEPRI
 800db86:	617b      	str	r3, [r7, #20]
  return(result);
 800db88:	697b      	ldr	r3, [r7, #20]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d02c      	beq.n	800dbe8 <osMessageQueueGet+0x94>
 800db8e:	4b28      	ldr	r3, [pc, #160]	; (800dc30 <osMessageQueueGet+0xdc>)
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	2b02      	cmp	r3, #2
 800db94:	d128      	bne.n	800dbe8 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800db96:	6a3b      	ldr	r3, [r7, #32]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d005      	beq.n	800dba8 <osMessageQueueGet+0x54>
 800db9c:	68bb      	ldr	r3, [r7, #8]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d002      	beq.n	800dba8 <osMessageQueueGet+0x54>
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d003      	beq.n	800dbb0 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800dba8:	f06f 0303 	mvn.w	r3, #3
 800dbac:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dbae:	e038      	b.n	800dc22 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800dbb4:	f107 0310 	add.w	r3, r7, #16
 800dbb8:	461a      	mov	r2, r3
 800dbba:	68b9      	ldr	r1, [r7, #8]
 800dbbc:	6a38      	ldr	r0, [r7, #32]
 800dbbe:	f000 ff0b 	bl	800e9d8 <xQueueReceiveFromISR>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	2b01      	cmp	r3, #1
 800dbc6:	d003      	beq.n	800dbd0 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800dbc8:	f06f 0302 	mvn.w	r3, #2
 800dbcc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dbce:	e028      	b.n	800dc22 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800dbd0:	693b      	ldr	r3, [r7, #16]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d025      	beq.n	800dc22 <osMessageQueueGet+0xce>
 800dbd6:	4b17      	ldr	r3, [pc, #92]	; (800dc34 <osMessageQueueGet+0xe0>)
 800dbd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbdc:	601a      	str	r2, [r3, #0]
 800dbde:	f3bf 8f4f 	dsb	sy
 800dbe2:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dbe6:	e01c      	b.n	800dc22 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800dbe8:	6a3b      	ldr	r3, [r7, #32]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d002      	beq.n	800dbf4 <osMessageQueueGet+0xa0>
 800dbee:	68bb      	ldr	r3, [r7, #8]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d103      	bne.n	800dbfc <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800dbf4:	f06f 0303 	mvn.w	r3, #3
 800dbf8:	627b      	str	r3, [r7, #36]	; 0x24
 800dbfa:	e013      	b.n	800dc24 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800dbfc:	683a      	ldr	r2, [r7, #0]
 800dbfe:	68b9      	ldr	r1, [r7, #8]
 800dc00:	6a38      	ldr	r0, [r7, #32]
 800dc02:	f000 fd05 	bl	800e610 <xQueueReceive>
 800dc06:	4603      	mov	r3, r0
 800dc08:	2b01      	cmp	r3, #1
 800dc0a:	d00b      	beq.n	800dc24 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d003      	beq.n	800dc1a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800dc12:	f06f 0301 	mvn.w	r3, #1
 800dc16:	627b      	str	r3, [r7, #36]	; 0x24
 800dc18:	e004      	b.n	800dc24 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800dc1a:	f06f 0302 	mvn.w	r3, #2
 800dc1e:	627b      	str	r3, [r7, #36]	; 0x24
 800dc20:	e000      	b.n	800dc24 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dc22:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800dc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dc26:	4618      	mov	r0, r3
 800dc28:	3728      	adds	r7, #40	; 0x28
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	bd80      	pop	{r7, pc}
 800dc2e:	bf00      	nop
 800dc30:	2000010c 	.word	0x2000010c
 800dc34:	e000ed04 	.word	0xe000ed04

0800dc38 <osMessageQueueGetSpace>:
  }

  return ((uint32_t)count);
}

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b08c      	sub	sp, #48	; 0x30
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 800dc44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d102      	bne.n	800dc50 <osMessageQueueGetSpace+0x18>
    space = 0U;
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dc4e:	e033      	b.n	800dcb8 <osMessageQueueGetSpace+0x80>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc50:	f3ef 8305 	mrs	r3, IPSR
 800dc54:	623b      	str	r3, [r7, #32]
  return(result);
 800dc56:	6a3b      	ldr	r3, [r7, #32]
  }
  else if (IS_IRQ()) {
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d10f      	bne.n	800dc7c <osMessageQueueGetSpace+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc5c:	f3ef 8310 	mrs	r3, PRIMASK
 800dc60:	61fb      	str	r3, [r7, #28]
  return(result);
 800dc62:	69fb      	ldr	r3, [r7, #28]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d105      	bne.n	800dc74 <osMessageQueueGetSpace+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dc68:	f3ef 8311 	mrs	r3, BASEPRI
 800dc6c:	61bb      	str	r3, [r7, #24]
  return(result);
 800dc6e:	69bb      	ldr	r3, [r7, #24]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d01d      	beq.n	800dcb0 <osMessageQueueGetSpace+0x78>
 800dc74:	4b13      	ldr	r3, [pc, #76]	; (800dcc4 <osMessageQueueGetSpace+0x8c>)
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	2b02      	cmp	r3, #2
 800dc7a:	d119      	bne.n	800dcb0 <osMessageQueueGetSpace+0x78>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800dc7c:	f3ef 8211 	mrs	r2, BASEPRI
 800dc80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc84:	f383 8811 	msr	BASEPRI, r3
 800dc88:	f3bf 8f6f 	isb	sy
 800dc8c:	f3bf 8f4f 	dsb	sy
 800dc90:	613a      	str	r2, [r7, #16]
 800dc92:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800dc94:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 800dc96:	627b      	str	r3, [r7, #36]	; 0x24

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 800dc98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dc9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dca0:	1ad3      	subs	r3, r2, r3
 800dca2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dca6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800dca8:	697b      	ldr	r3, [r7, #20]
 800dcaa:	f383 8811 	msr	BASEPRI, r3

    taskEXIT_CRITICAL_FROM_ISR(isrm);
 800dcae:	e003      	b.n	800dcb8 <osMessageQueueGetSpace+0x80>
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 800dcb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcb2:	f000 ff0e 	bl	800ead2 <uxQueueSpacesAvailable>
 800dcb6:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return (space);
 800dcb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800dcba:	4618      	mov	r0, r3
 800dcbc:	3730      	adds	r7, #48	; 0x30
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	bd80      	pop	{r7, pc}
 800dcc2:	bf00      	nop
 800dcc4:	2000010c 	.word	0x2000010c

0800dcc8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800dcc8:	b480      	push	{r7}
 800dcca:	b085      	sub	sp, #20
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	60f8      	str	r0, [r7, #12]
 800dcd0:	60b9      	str	r1, [r7, #8]
 800dcd2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	4a07      	ldr	r2, [pc, #28]	; (800dcf4 <vApplicationGetIdleTaskMemory+0x2c>)
 800dcd8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800dcda:	68bb      	ldr	r3, [r7, #8]
 800dcdc:	4a06      	ldr	r2, [pc, #24]	; (800dcf8 <vApplicationGetIdleTaskMemory+0x30>)
 800dcde:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	2280      	movs	r2, #128	; 0x80
 800dce4:	601a      	str	r2, [r3, #0]
}
 800dce6:	bf00      	nop
 800dce8:	3714      	adds	r7, #20
 800dcea:	46bd      	mov	sp, r7
 800dcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf0:	4770      	bx	lr
 800dcf2:	bf00      	nop
 800dcf4:	20000110 	.word	0x20000110
 800dcf8:	2000018c 	.word	0x2000018c

0800dcfc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800dcfc:	b480      	push	{r7}
 800dcfe:	b085      	sub	sp, #20
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	60f8      	str	r0, [r7, #12]
 800dd04:	60b9      	str	r1, [r7, #8]
 800dd06:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	4a07      	ldr	r2, [pc, #28]	; (800dd28 <vApplicationGetTimerTaskMemory+0x2c>)
 800dd0c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800dd0e:	68bb      	ldr	r3, [r7, #8]
 800dd10:	4a06      	ldr	r2, [pc, #24]	; (800dd2c <vApplicationGetTimerTaskMemory+0x30>)
 800dd12:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2280      	movs	r2, #128	; 0x80
 800dd18:	601a      	str	r2, [r3, #0]
}
 800dd1a:	bf00      	nop
 800dd1c:	3714      	adds	r7, #20
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd24:	4770      	bx	lr
 800dd26:	bf00      	nop
 800dd28:	2000038c 	.word	0x2000038c
 800dd2c:	20000408 	.word	0x20000408

0800dd30 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800dd30:	b480      	push	{r7}
 800dd32:	b083      	sub	sp, #12
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	f103 0208 	add.w	r2, r3, #8
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	f04f 32ff 	mov.w	r2, #4294967295
 800dd48:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	f103 0208 	add.w	r2, r3, #8
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f103 0208 	add.w	r2, r3, #8
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	2200      	movs	r2, #0
 800dd62:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800dd64:	bf00      	nop
 800dd66:	370c      	adds	r7, #12
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6e:	4770      	bx	lr

0800dd70 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800dd70:	b480      	push	{r7}
 800dd72:	b083      	sub	sp, #12
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800dd7e:	bf00      	nop
 800dd80:	370c      	adds	r7, #12
 800dd82:	46bd      	mov	sp, r7
 800dd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd88:	4770      	bx	lr

0800dd8a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dd8a:	b480      	push	{r7}
 800dd8c:	b085      	sub	sp, #20
 800dd8e:	af00      	add	r7, sp, #0
 800dd90:	6078      	str	r0, [r7, #4]
 800dd92:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	685b      	ldr	r3, [r3, #4]
 800dd98:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800dd9a:	683b      	ldr	r3, [r7, #0]
 800dd9c:	68fa      	ldr	r2, [r7, #12]
 800dd9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	689a      	ldr	r2, [r3, #8]
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	689b      	ldr	r3, [r3, #8]
 800ddac:	683a      	ldr	r2, [r7, #0]
 800ddae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	683a      	ldr	r2, [r7, #0]
 800ddb4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	687a      	ldr	r2, [r7, #4]
 800ddba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	1c5a      	adds	r2, r3, #1
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	601a      	str	r2, [r3, #0]
}
 800ddc6:	bf00      	nop
 800ddc8:	3714      	adds	r7, #20
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd0:	4770      	bx	lr

0800ddd2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ddd2:	b480      	push	{r7}
 800ddd4:	b085      	sub	sp, #20
 800ddd6:	af00      	add	r7, sp, #0
 800ddd8:	6078      	str	r0, [r7, #4]
 800ddda:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800dddc:	683b      	ldr	r3, [r7, #0]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800dde2:	68bb      	ldr	r3, [r7, #8]
 800dde4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dde8:	d103      	bne.n	800ddf2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	691b      	ldr	r3, [r3, #16]
 800ddee:	60fb      	str	r3, [r7, #12]
 800ddf0:	e00c      	b.n	800de0c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	3308      	adds	r3, #8
 800ddf6:	60fb      	str	r3, [r7, #12]
 800ddf8:	e002      	b.n	800de00 <vListInsert+0x2e>
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	685b      	ldr	r3, [r3, #4]
 800ddfe:	60fb      	str	r3, [r7, #12]
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	685b      	ldr	r3, [r3, #4]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	68ba      	ldr	r2, [r7, #8]
 800de08:	429a      	cmp	r2, r3
 800de0a:	d2f6      	bcs.n	800ddfa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	685a      	ldr	r2, [r3, #4]
 800de10:	683b      	ldr	r3, [r7, #0]
 800de12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	685b      	ldr	r3, [r3, #4]
 800de18:	683a      	ldr	r2, [r7, #0]
 800de1a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	68fa      	ldr	r2, [r7, #12]
 800de20:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	683a      	ldr	r2, [r7, #0]
 800de26:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800de28:	683b      	ldr	r3, [r7, #0]
 800de2a:	687a      	ldr	r2, [r7, #4]
 800de2c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	1c5a      	adds	r2, r3, #1
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	601a      	str	r2, [r3, #0]
}
 800de38:	bf00      	nop
 800de3a:	3714      	adds	r7, #20
 800de3c:	46bd      	mov	sp, r7
 800de3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de42:	4770      	bx	lr

0800de44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800de44:	b480      	push	{r7}
 800de46:	b085      	sub	sp, #20
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	691b      	ldr	r3, [r3, #16]
 800de50:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	685b      	ldr	r3, [r3, #4]
 800de56:	687a      	ldr	r2, [r7, #4]
 800de58:	6892      	ldr	r2, [r2, #8]
 800de5a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	689b      	ldr	r3, [r3, #8]
 800de60:	687a      	ldr	r2, [r7, #4]
 800de62:	6852      	ldr	r2, [r2, #4]
 800de64:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	685b      	ldr	r3, [r3, #4]
 800de6a:	687a      	ldr	r2, [r7, #4]
 800de6c:	429a      	cmp	r2, r3
 800de6e:	d103      	bne.n	800de78 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	689a      	ldr	r2, [r3, #8]
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	2200      	movs	r2, #0
 800de7c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	1e5a      	subs	r2, r3, #1
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	681b      	ldr	r3, [r3, #0]
}
 800de8c:	4618      	mov	r0, r3
 800de8e:	3714      	adds	r7, #20
 800de90:	46bd      	mov	sp, r7
 800de92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de96:	4770      	bx	lr

0800de98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b084      	sub	sp, #16
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
 800dea0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d109      	bne.n	800dec0 <xQueueGenericReset+0x28>
	__asm volatile
 800deac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deb0:	f383 8811 	msr	BASEPRI, r3
 800deb4:	f3bf 8f6f 	isb	sy
 800deb8:	f3bf 8f4f 	dsb	sy
 800debc:	60bb      	str	r3, [r7, #8]
 800debe:	e7fe      	b.n	800debe <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800dec0:	f002 fd84 	bl	80109cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	681a      	ldr	r2, [r3, #0]
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800decc:	68f9      	ldr	r1, [r7, #12]
 800dece:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ded0:	fb01 f303 	mul.w	r3, r1, r3
 800ded4:	441a      	add	r2, r3
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	2200      	movs	r2, #0
 800dede:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	681a      	ldr	r2, [r3, #0]
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	681a      	ldr	r2, [r3, #0]
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800def0:	3b01      	subs	r3, #1
 800def2:	68f9      	ldr	r1, [r7, #12]
 800def4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800def6:	fb01 f303 	mul.w	r3, r1, r3
 800defa:	441a      	add	r2, r3
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	22ff      	movs	r2, #255	; 0xff
 800df04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	22ff      	movs	r2, #255	; 0xff
 800df0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d114      	bne.n	800df40 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	691b      	ldr	r3, [r3, #16]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d01a      	beq.n	800df54 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	3310      	adds	r3, #16
 800df22:	4618      	mov	r0, r3
 800df24:	f001 fc7a 	bl	800f81c <xTaskRemoveFromEventList>
 800df28:	4603      	mov	r3, r0
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d012      	beq.n	800df54 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800df2e:	4b0d      	ldr	r3, [pc, #52]	; (800df64 <xQueueGenericReset+0xcc>)
 800df30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df34:	601a      	str	r2, [r3, #0]
 800df36:	f3bf 8f4f 	dsb	sy
 800df3a:	f3bf 8f6f 	isb	sy
 800df3e:	e009      	b.n	800df54 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	3310      	adds	r3, #16
 800df44:	4618      	mov	r0, r3
 800df46:	f7ff fef3 	bl	800dd30 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	3324      	adds	r3, #36	; 0x24
 800df4e:	4618      	mov	r0, r3
 800df50:	f7ff feee 	bl	800dd30 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800df54:	f002 fd68 	bl	8010a28 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800df58:	2301      	movs	r3, #1
}
 800df5a:	4618      	mov	r0, r3
 800df5c:	3710      	adds	r7, #16
 800df5e:	46bd      	mov	sp, r7
 800df60:	bd80      	pop	{r7, pc}
 800df62:	bf00      	nop
 800df64:	e000ed04 	.word	0xe000ed04

0800df68 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b08e      	sub	sp, #56	; 0x38
 800df6c:	af02      	add	r7, sp, #8
 800df6e:	60f8      	str	r0, [r7, #12]
 800df70:	60b9      	str	r1, [r7, #8]
 800df72:	607a      	str	r2, [r7, #4]
 800df74:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d109      	bne.n	800df90 <xQueueGenericCreateStatic+0x28>
 800df7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df80:	f383 8811 	msr	BASEPRI, r3
 800df84:	f3bf 8f6f 	isb	sy
 800df88:	f3bf 8f4f 	dsb	sy
 800df8c:	62bb      	str	r3, [r7, #40]	; 0x28
 800df8e:	e7fe      	b.n	800df8e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800df90:	683b      	ldr	r3, [r7, #0]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d109      	bne.n	800dfaa <xQueueGenericCreateStatic+0x42>
 800df96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df9a:	f383 8811 	msr	BASEPRI, r3
 800df9e:	f3bf 8f6f 	isb	sy
 800dfa2:	f3bf 8f4f 	dsb	sy
 800dfa6:	627b      	str	r3, [r7, #36]	; 0x24
 800dfa8:	e7fe      	b.n	800dfa8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d002      	beq.n	800dfb6 <xQueueGenericCreateStatic+0x4e>
 800dfb0:	68bb      	ldr	r3, [r7, #8]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d001      	beq.n	800dfba <xQueueGenericCreateStatic+0x52>
 800dfb6:	2301      	movs	r3, #1
 800dfb8:	e000      	b.n	800dfbc <xQueueGenericCreateStatic+0x54>
 800dfba:	2300      	movs	r3, #0
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d109      	bne.n	800dfd4 <xQueueGenericCreateStatic+0x6c>
 800dfc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfc4:	f383 8811 	msr	BASEPRI, r3
 800dfc8:	f3bf 8f6f 	isb	sy
 800dfcc:	f3bf 8f4f 	dsb	sy
 800dfd0:	623b      	str	r3, [r7, #32]
 800dfd2:	e7fe      	b.n	800dfd2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d102      	bne.n	800dfe0 <xQueueGenericCreateStatic+0x78>
 800dfda:	68bb      	ldr	r3, [r7, #8]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d101      	bne.n	800dfe4 <xQueueGenericCreateStatic+0x7c>
 800dfe0:	2301      	movs	r3, #1
 800dfe2:	e000      	b.n	800dfe6 <xQueueGenericCreateStatic+0x7e>
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d109      	bne.n	800dffe <xQueueGenericCreateStatic+0x96>
 800dfea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfee:	f383 8811 	msr	BASEPRI, r3
 800dff2:	f3bf 8f6f 	isb	sy
 800dff6:	f3bf 8f4f 	dsb	sy
 800dffa:	61fb      	str	r3, [r7, #28]
 800dffc:	e7fe      	b.n	800dffc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800dffe:	2350      	movs	r3, #80	; 0x50
 800e000:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e002:	697b      	ldr	r3, [r7, #20]
 800e004:	2b50      	cmp	r3, #80	; 0x50
 800e006:	d009      	beq.n	800e01c <xQueueGenericCreateStatic+0xb4>
 800e008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e00c:	f383 8811 	msr	BASEPRI, r3
 800e010:	f3bf 8f6f 	isb	sy
 800e014:	f3bf 8f4f 	dsb	sy
 800e018:	61bb      	str	r3, [r7, #24]
 800e01a:	e7fe      	b.n	800e01a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e01c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e024:	2b00      	cmp	r3, #0
 800e026:	d00d      	beq.n	800e044 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e02a:	2201      	movs	r2, #1
 800e02c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e030:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e036:	9300      	str	r3, [sp, #0]
 800e038:	4613      	mov	r3, r2
 800e03a:	687a      	ldr	r2, [r7, #4]
 800e03c:	68b9      	ldr	r1, [r7, #8]
 800e03e:	68f8      	ldr	r0, [r7, #12]
 800e040:	f000 f844 	bl	800e0cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e046:	4618      	mov	r0, r3
 800e048:	3730      	adds	r7, #48	; 0x30
 800e04a:	46bd      	mov	sp, r7
 800e04c:	bd80      	pop	{r7, pc}

0800e04e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e04e:	b580      	push	{r7, lr}
 800e050:	b08a      	sub	sp, #40	; 0x28
 800e052:	af02      	add	r7, sp, #8
 800e054:	60f8      	str	r0, [r7, #12]
 800e056:	60b9      	str	r1, [r7, #8]
 800e058:	4613      	mov	r3, r2
 800e05a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d109      	bne.n	800e076 <xQueueGenericCreate+0x28>
 800e062:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e066:	f383 8811 	msr	BASEPRI, r3
 800e06a:	f3bf 8f6f 	isb	sy
 800e06e:	f3bf 8f4f 	dsb	sy
 800e072:	613b      	str	r3, [r7, #16]
 800e074:	e7fe      	b.n	800e074 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800e076:	68bb      	ldr	r3, [r7, #8]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d102      	bne.n	800e082 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800e07c:	2300      	movs	r3, #0
 800e07e:	61fb      	str	r3, [r7, #28]
 800e080:	e004      	b.n	800e08c <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	68ba      	ldr	r2, [r7, #8]
 800e086:	fb02 f303 	mul.w	r3, r2, r3
 800e08a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e08c:	69fb      	ldr	r3, [r7, #28]
 800e08e:	3350      	adds	r3, #80	; 0x50
 800e090:	4618      	mov	r0, r3
 800e092:	f002 fdb5 	bl	8010c00 <pvPortMalloc>
 800e096:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e098:	69bb      	ldr	r3, [r7, #24]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d011      	beq.n	800e0c2 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e09e:	69bb      	ldr	r3, [r7, #24]
 800e0a0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e0a2:	697b      	ldr	r3, [r7, #20]
 800e0a4:	3350      	adds	r3, #80	; 0x50
 800e0a6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e0a8:	69bb      	ldr	r3, [r7, #24]
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e0b0:	79fa      	ldrb	r2, [r7, #7]
 800e0b2:	69bb      	ldr	r3, [r7, #24]
 800e0b4:	9300      	str	r3, [sp, #0]
 800e0b6:	4613      	mov	r3, r2
 800e0b8:	697a      	ldr	r2, [r7, #20]
 800e0ba:	68b9      	ldr	r1, [r7, #8]
 800e0bc:	68f8      	ldr	r0, [r7, #12]
 800e0be:	f000 f805 	bl	800e0cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e0c2:	69bb      	ldr	r3, [r7, #24]
	}
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	3720      	adds	r7, #32
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	bd80      	pop	{r7, pc}

0800e0cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b084      	sub	sp, #16
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	60f8      	str	r0, [r7, #12]
 800e0d4:	60b9      	str	r1, [r7, #8]
 800e0d6:	607a      	str	r2, [r7, #4]
 800e0d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d103      	bne.n	800e0e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e0e0:	69bb      	ldr	r3, [r7, #24]
 800e0e2:	69ba      	ldr	r2, [r7, #24]
 800e0e4:	601a      	str	r2, [r3, #0]
 800e0e6:	e002      	b.n	800e0ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e0e8:	69bb      	ldr	r3, [r7, #24]
 800e0ea:	687a      	ldr	r2, [r7, #4]
 800e0ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e0ee:	69bb      	ldr	r3, [r7, #24]
 800e0f0:	68fa      	ldr	r2, [r7, #12]
 800e0f2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e0f4:	69bb      	ldr	r3, [r7, #24]
 800e0f6:	68ba      	ldr	r2, [r7, #8]
 800e0f8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e0fa:	2101      	movs	r1, #1
 800e0fc:	69b8      	ldr	r0, [r7, #24]
 800e0fe:	f7ff fecb 	bl	800de98 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e102:	69bb      	ldr	r3, [r7, #24]
 800e104:	78fa      	ldrb	r2, [r7, #3]
 800e106:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e10a:	bf00      	nop
 800e10c:	3710      	adds	r7, #16
 800e10e:	46bd      	mov	sp, r7
 800e110:	bd80      	pop	{r7, pc}

0800e112 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800e112:	b580      	push	{r7, lr}
 800e114:	b08a      	sub	sp, #40	; 0x28
 800e116:	af02      	add	r7, sp, #8
 800e118:	60f8      	str	r0, [r7, #12]
 800e11a:	60b9      	str	r1, [r7, #8]
 800e11c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d109      	bne.n	800e138 <xQueueCreateCountingSemaphoreStatic+0x26>
 800e124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e128:	f383 8811 	msr	BASEPRI, r3
 800e12c:	f3bf 8f6f 	isb	sy
 800e130:	f3bf 8f4f 	dsb	sy
 800e134:	61bb      	str	r3, [r7, #24]
 800e136:	e7fe      	b.n	800e136 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e138:	68ba      	ldr	r2, [r7, #8]
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	429a      	cmp	r2, r3
 800e13e:	d909      	bls.n	800e154 <xQueueCreateCountingSemaphoreStatic+0x42>
 800e140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e144:	f383 8811 	msr	BASEPRI, r3
 800e148:	f3bf 8f6f 	isb	sy
 800e14c:	f3bf 8f4f 	dsb	sy
 800e150:	617b      	str	r3, [r7, #20]
 800e152:	e7fe      	b.n	800e152 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e154:	2302      	movs	r3, #2
 800e156:	9300      	str	r3, [sp, #0]
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	2200      	movs	r2, #0
 800e15c:	2100      	movs	r1, #0
 800e15e:	68f8      	ldr	r0, [r7, #12]
 800e160:	f7ff ff02 	bl	800df68 <xQueueGenericCreateStatic>
 800e164:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800e166:	69fb      	ldr	r3, [r7, #28]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d002      	beq.n	800e172 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e16c:	69fb      	ldr	r3, [r7, #28]
 800e16e:	68ba      	ldr	r2, [r7, #8]
 800e170:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e172:	69fb      	ldr	r3, [r7, #28]
	}
 800e174:	4618      	mov	r0, r3
 800e176:	3720      	adds	r7, #32
 800e178:	46bd      	mov	sp, r7
 800e17a:	bd80      	pop	{r7, pc}

0800e17c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b086      	sub	sp, #24
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
 800e184:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d109      	bne.n	800e1a0 <xQueueCreateCountingSemaphore+0x24>
 800e18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e190:	f383 8811 	msr	BASEPRI, r3
 800e194:	f3bf 8f6f 	isb	sy
 800e198:	f3bf 8f4f 	dsb	sy
 800e19c:	613b      	str	r3, [r7, #16]
 800e19e:	e7fe      	b.n	800e19e <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e1a0:	683a      	ldr	r2, [r7, #0]
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	429a      	cmp	r2, r3
 800e1a6:	d909      	bls.n	800e1bc <xQueueCreateCountingSemaphore+0x40>
 800e1a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ac:	f383 8811 	msr	BASEPRI, r3
 800e1b0:	f3bf 8f6f 	isb	sy
 800e1b4:	f3bf 8f4f 	dsb	sy
 800e1b8:	60fb      	str	r3, [r7, #12]
 800e1ba:	e7fe      	b.n	800e1ba <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e1bc:	2202      	movs	r2, #2
 800e1be:	2100      	movs	r1, #0
 800e1c0:	6878      	ldr	r0, [r7, #4]
 800e1c2:	f7ff ff44 	bl	800e04e <xQueueGenericCreate>
 800e1c6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d002      	beq.n	800e1d4 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e1ce:	697b      	ldr	r3, [r7, #20]
 800e1d0:	683a      	ldr	r2, [r7, #0]
 800e1d2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e1d4:	697b      	ldr	r3, [r7, #20]
	}
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	3718      	adds	r7, #24
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	bd80      	pop	{r7, pc}
	...

0800e1e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b08e      	sub	sp, #56	; 0x38
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	60f8      	str	r0, [r7, #12]
 800e1e8:	60b9      	str	r1, [r7, #8]
 800e1ea:	607a      	str	r2, [r7, #4]
 800e1ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d109      	bne.n	800e210 <xQueueGenericSend+0x30>
 800e1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e200:	f383 8811 	msr	BASEPRI, r3
 800e204:	f3bf 8f6f 	isb	sy
 800e208:	f3bf 8f4f 	dsb	sy
 800e20c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e20e:	e7fe      	b.n	800e20e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e210:	68bb      	ldr	r3, [r7, #8]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d103      	bne.n	800e21e <xQueueGenericSend+0x3e>
 800e216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d101      	bne.n	800e222 <xQueueGenericSend+0x42>
 800e21e:	2301      	movs	r3, #1
 800e220:	e000      	b.n	800e224 <xQueueGenericSend+0x44>
 800e222:	2300      	movs	r3, #0
 800e224:	2b00      	cmp	r3, #0
 800e226:	d109      	bne.n	800e23c <xQueueGenericSend+0x5c>
 800e228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e22c:	f383 8811 	msr	BASEPRI, r3
 800e230:	f3bf 8f6f 	isb	sy
 800e234:	f3bf 8f4f 	dsb	sy
 800e238:	627b      	str	r3, [r7, #36]	; 0x24
 800e23a:	e7fe      	b.n	800e23a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	2b02      	cmp	r3, #2
 800e240:	d103      	bne.n	800e24a <xQueueGenericSend+0x6a>
 800e242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e246:	2b01      	cmp	r3, #1
 800e248:	d101      	bne.n	800e24e <xQueueGenericSend+0x6e>
 800e24a:	2301      	movs	r3, #1
 800e24c:	e000      	b.n	800e250 <xQueueGenericSend+0x70>
 800e24e:	2300      	movs	r3, #0
 800e250:	2b00      	cmp	r3, #0
 800e252:	d109      	bne.n	800e268 <xQueueGenericSend+0x88>
 800e254:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e258:	f383 8811 	msr	BASEPRI, r3
 800e25c:	f3bf 8f6f 	isb	sy
 800e260:	f3bf 8f4f 	dsb	sy
 800e264:	623b      	str	r3, [r7, #32]
 800e266:	e7fe      	b.n	800e266 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e268:	f001 fc90 	bl	800fb8c <xTaskGetSchedulerState>
 800e26c:	4603      	mov	r3, r0
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d102      	bne.n	800e278 <xQueueGenericSend+0x98>
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d101      	bne.n	800e27c <xQueueGenericSend+0x9c>
 800e278:	2301      	movs	r3, #1
 800e27a:	e000      	b.n	800e27e <xQueueGenericSend+0x9e>
 800e27c:	2300      	movs	r3, #0
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d109      	bne.n	800e296 <xQueueGenericSend+0xb6>
 800e282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e286:	f383 8811 	msr	BASEPRI, r3
 800e28a:	f3bf 8f6f 	isb	sy
 800e28e:	f3bf 8f4f 	dsb	sy
 800e292:	61fb      	str	r3, [r7, #28]
 800e294:	e7fe      	b.n	800e294 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e296:	f002 fb99 	bl	80109cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e29c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2a2:	429a      	cmp	r2, r3
 800e2a4:	d302      	bcc.n	800e2ac <xQueueGenericSend+0xcc>
 800e2a6:	683b      	ldr	r3, [r7, #0]
 800e2a8:	2b02      	cmp	r3, #2
 800e2aa:	d129      	bne.n	800e300 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e2ac:	683a      	ldr	r2, [r7, #0]
 800e2ae:	68b9      	ldr	r1, [r7, #8]
 800e2b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e2b2:	f000 fc6a 	bl	800eb8a <prvCopyDataToQueue>
 800e2b6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d010      	beq.n	800e2e2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2c2:	3324      	adds	r3, #36	; 0x24
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f001 faa9 	bl	800f81c <xTaskRemoveFromEventList>
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d013      	beq.n	800e2f8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e2d0:	4b3f      	ldr	r3, [pc, #252]	; (800e3d0 <xQueueGenericSend+0x1f0>)
 800e2d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2d6:	601a      	str	r2, [r3, #0]
 800e2d8:	f3bf 8f4f 	dsb	sy
 800e2dc:	f3bf 8f6f 	isb	sy
 800e2e0:	e00a      	b.n	800e2f8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e2e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d007      	beq.n	800e2f8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e2e8:	4b39      	ldr	r3, [pc, #228]	; (800e3d0 <xQueueGenericSend+0x1f0>)
 800e2ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2ee:	601a      	str	r2, [r3, #0]
 800e2f0:	f3bf 8f4f 	dsb	sy
 800e2f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e2f8:	f002 fb96 	bl	8010a28 <vPortExitCritical>
				return pdPASS;
 800e2fc:	2301      	movs	r3, #1
 800e2fe:	e063      	b.n	800e3c8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d103      	bne.n	800e30e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e306:	f002 fb8f 	bl	8010a28 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e30a:	2300      	movs	r3, #0
 800e30c:	e05c      	b.n	800e3c8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e30e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e310:	2b00      	cmp	r3, #0
 800e312:	d106      	bne.n	800e322 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e314:	f107 0314 	add.w	r3, r7, #20
 800e318:	4618      	mov	r0, r3
 800e31a:	f001 fae1 	bl	800f8e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e31e:	2301      	movs	r3, #1
 800e320:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e322:	f002 fb81 	bl	8010a28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e326:	f001 f807 	bl	800f338 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e32a:	f002 fb4f 	bl	80109cc <vPortEnterCritical>
 800e32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e330:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e334:	b25b      	sxtb	r3, r3
 800e336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e33a:	d103      	bne.n	800e344 <xQueueGenericSend+0x164>
 800e33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e33e:	2200      	movs	r2, #0
 800e340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e346:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e34a:	b25b      	sxtb	r3, r3
 800e34c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e350:	d103      	bne.n	800e35a <xQueueGenericSend+0x17a>
 800e352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e354:	2200      	movs	r2, #0
 800e356:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e35a:	f002 fb65 	bl	8010a28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e35e:	1d3a      	adds	r2, r7, #4
 800e360:	f107 0314 	add.w	r3, r7, #20
 800e364:	4611      	mov	r1, r2
 800e366:	4618      	mov	r0, r3
 800e368:	f001 fad0 	bl	800f90c <xTaskCheckForTimeOut>
 800e36c:	4603      	mov	r3, r0
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d124      	bne.n	800e3bc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e372:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e374:	f000 fd01 	bl	800ed7a <prvIsQueueFull>
 800e378:	4603      	mov	r3, r0
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d018      	beq.n	800e3b0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e380:	3310      	adds	r3, #16
 800e382:	687a      	ldr	r2, [r7, #4]
 800e384:	4611      	mov	r1, r2
 800e386:	4618      	mov	r0, r3
 800e388:	f001 f9fa 	bl	800f780 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e38c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e38e:	f000 fc8c 	bl	800ecaa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e392:	f000 ffdf 	bl	800f354 <xTaskResumeAll>
 800e396:	4603      	mov	r3, r0
 800e398:	2b00      	cmp	r3, #0
 800e39a:	f47f af7c 	bne.w	800e296 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800e39e:	4b0c      	ldr	r3, [pc, #48]	; (800e3d0 <xQueueGenericSend+0x1f0>)
 800e3a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3a4:	601a      	str	r2, [r3, #0]
 800e3a6:	f3bf 8f4f 	dsb	sy
 800e3aa:	f3bf 8f6f 	isb	sy
 800e3ae:	e772      	b.n	800e296 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e3b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e3b2:	f000 fc7a 	bl	800ecaa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e3b6:	f000 ffcd 	bl	800f354 <xTaskResumeAll>
 800e3ba:	e76c      	b.n	800e296 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e3bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e3be:	f000 fc74 	bl	800ecaa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e3c2:	f000 ffc7 	bl	800f354 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e3c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	3738      	adds	r7, #56	; 0x38
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	bd80      	pop	{r7, pc}
 800e3d0:	e000ed04 	.word	0xe000ed04

0800e3d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b08e      	sub	sp, #56	; 0x38
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	60f8      	str	r0, [r7, #12]
 800e3dc:	60b9      	str	r1, [r7, #8]
 800e3de:	607a      	str	r2, [r7, #4]
 800e3e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d109      	bne.n	800e400 <xQueueGenericSendFromISR+0x2c>
 800e3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3f0:	f383 8811 	msr	BASEPRI, r3
 800e3f4:	f3bf 8f6f 	isb	sy
 800e3f8:	f3bf 8f4f 	dsb	sy
 800e3fc:	627b      	str	r3, [r7, #36]	; 0x24
 800e3fe:	e7fe      	b.n	800e3fe <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e400:	68bb      	ldr	r3, [r7, #8]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d103      	bne.n	800e40e <xQueueGenericSendFromISR+0x3a>
 800e406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d101      	bne.n	800e412 <xQueueGenericSendFromISR+0x3e>
 800e40e:	2301      	movs	r3, #1
 800e410:	e000      	b.n	800e414 <xQueueGenericSendFromISR+0x40>
 800e412:	2300      	movs	r3, #0
 800e414:	2b00      	cmp	r3, #0
 800e416:	d109      	bne.n	800e42c <xQueueGenericSendFromISR+0x58>
 800e418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e41c:	f383 8811 	msr	BASEPRI, r3
 800e420:	f3bf 8f6f 	isb	sy
 800e424:	f3bf 8f4f 	dsb	sy
 800e428:	623b      	str	r3, [r7, #32]
 800e42a:	e7fe      	b.n	800e42a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e42c:	683b      	ldr	r3, [r7, #0]
 800e42e:	2b02      	cmp	r3, #2
 800e430:	d103      	bne.n	800e43a <xQueueGenericSendFromISR+0x66>
 800e432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e436:	2b01      	cmp	r3, #1
 800e438:	d101      	bne.n	800e43e <xQueueGenericSendFromISR+0x6a>
 800e43a:	2301      	movs	r3, #1
 800e43c:	e000      	b.n	800e440 <xQueueGenericSendFromISR+0x6c>
 800e43e:	2300      	movs	r3, #0
 800e440:	2b00      	cmp	r3, #0
 800e442:	d109      	bne.n	800e458 <xQueueGenericSendFromISR+0x84>
 800e444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e448:	f383 8811 	msr	BASEPRI, r3
 800e44c:	f3bf 8f6f 	isb	sy
 800e450:	f3bf 8f4f 	dsb	sy
 800e454:	61fb      	str	r3, [r7, #28]
 800e456:	e7fe      	b.n	800e456 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e458:	f002 fb94 	bl	8010b84 <vPortValidateInterruptPriority>
	__asm volatile
 800e45c:	f3ef 8211 	mrs	r2, BASEPRI
 800e460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e464:	f383 8811 	msr	BASEPRI, r3
 800e468:	f3bf 8f6f 	isb	sy
 800e46c:	f3bf 8f4f 	dsb	sy
 800e470:	61ba      	str	r2, [r7, #24]
 800e472:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e474:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e476:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e47a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e47e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e480:	429a      	cmp	r2, r3
 800e482:	d302      	bcc.n	800e48a <xQueueGenericSendFromISR+0xb6>
 800e484:	683b      	ldr	r3, [r7, #0]
 800e486:	2b02      	cmp	r3, #2
 800e488:	d12c      	bne.n	800e4e4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e48c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e490:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e494:	683a      	ldr	r2, [r7, #0]
 800e496:	68b9      	ldr	r1, [r7, #8]
 800e498:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e49a:	f000 fb76 	bl	800eb8a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e49e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800e4a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4a6:	d112      	bne.n	800e4ce <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d016      	beq.n	800e4de <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e4b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4b2:	3324      	adds	r3, #36	; 0x24
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f001 f9b1 	bl	800f81c <xTaskRemoveFromEventList>
 800e4ba:	4603      	mov	r3, r0
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d00e      	beq.n	800e4de <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d00b      	beq.n	800e4de <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	2201      	movs	r2, #1
 800e4ca:	601a      	str	r2, [r3, #0]
 800e4cc:	e007      	b.n	800e4de <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e4ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e4d2:	3301      	adds	r3, #1
 800e4d4:	b2db      	uxtb	r3, r3
 800e4d6:	b25a      	sxtb	r2, r3
 800e4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e4de:	2301      	movs	r3, #1
 800e4e0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800e4e2:	e001      	b.n	800e4e8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	637b      	str	r3, [r7, #52]	; 0x34
 800e4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ea:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e4ec:	693b      	ldr	r3, [r7, #16]
 800e4ee:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e4f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	3738      	adds	r7, #56	; 0x38
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	bd80      	pop	{r7, pc}

0800e4fc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b08e      	sub	sp, #56	; 0x38
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
 800e504:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d109      	bne.n	800e524 <xQueueGiveFromISR+0x28>
	__asm volatile
 800e510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e514:	f383 8811 	msr	BASEPRI, r3
 800e518:	f3bf 8f6f 	isb	sy
 800e51c:	f3bf 8f4f 	dsb	sy
 800e520:	623b      	str	r3, [r7, #32]
 800e522:	e7fe      	b.n	800e522 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d009      	beq.n	800e540 <xQueueGiveFromISR+0x44>
 800e52c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e530:	f383 8811 	msr	BASEPRI, r3
 800e534:	f3bf 8f6f 	isb	sy
 800e538:	f3bf 8f4f 	dsb	sy
 800e53c:	61fb      	str	r3, [r7, #28]
 800e53e:	e7fe      	b.n	800e53e <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d103      	bne.n	800e550 <xQueueGiveFromISR+0x54>
 800e548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e54a:	689b      	ldr	r3, [r3, #8]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d101      	bne.n	800e554 <xQueueGiveFromISR+0x58>
 800e550:	2301      	movs	r3, #1
 800e552:	e000      	b.n	800e556 <xQueueGiveFromISR+0x5a>
 800e554:	2300      	movs	r3, #0
 800e556:	2b00      	cmp	r3, #0
 800e558:	d109      	bne.n	800e56e <xQueueGiveFromISR+0x72>
 800e55a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e55e:	f383 8811 	msr	BASEPRI, r3
 800e562:	f3bf 8f6f 	isb	sy
 800e566:	f3bf 8f4f 	dsb	sy
 800e56a:	61bb      	str	r3, [r7, #24]
 800e56c:	e7fe      	b.n	800e56c <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e56e:	f002 fb09 	bl	8010b84 <vPortValidateInterruptPriority>
	__asm volatile
 800e572:	f3ef 8211 	mrs	r2, BASEPRI
 800e576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e57a:	f383 8811 	msr	BASEPRI, r3
 800e57e:	f3bf 8f6f 	isb	sy
 800e582:	f3bf 8f4f 	dsb	sy
 800e586:	617a      	str	r2, [r7, #20]
 800e588:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e58a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e58c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e592:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e598:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e59a:	429a      	cmp	r2, r3
 800e59c:	d22b      	bcs.n	800e5f6 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e5a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5aa:	1c5a      	adds	r2, r3, #1
 800e5ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5ae:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e5b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e5b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5b8:	d112      	bne.n	800e5e0 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d016      	beq.n	800e5f0 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5c4:	3324      	adds	r3, #36	; 0x24
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	f001 f928 	bl	800f81c <xTaskRemoveFromEventList>
 800e5cc:	4603      	mov	r3, r0
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d00e      	beq.n	800e5f0 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e5d2:	683b      	ldr	r3, [r7, #0]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d00b      	beq.n	800e5f0 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e5d8:	683b      	ldr	r3, [r7, #0]
 800e5da:	2201      	movs	r2, #1
 800e5dc:	601a      	str	r2, [r3, #0]
 800e5de:	e007      	b.n	800e5f0 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e5e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e5e4:	3301      	adds	r3, #1
 800e5e6:	b2db      	uxtb	r3, r3
 800e5e8:	b25a      	sxtb	r2, r3
 800e5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e5f0:	2301      	movs	r3, #1
 800e5f2:	637b      	str	r3, [r7, #52]	; 0x34
 800e5f4:	e001      	b.n	800e5fa <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	637b      	str	r3, [r7, #52]	; 0x34
 800e5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5fc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e606:	4618      	mov	r0, r3
 800e608:	3738      	adds	r7, #56	; 0x38
 800e60a:	46bd      	mov	sp, r7
 800e60c:	bd80      	pop	{r7, pc}
	...

0800e610 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b08c      	sub	sp, #48	; 0x30
 800e614:	af00      	add	r7, sp, #0
 800e616:	60f8      	str	r0, [r7, #12]
 800e618:	60b9      	str	r1, [r7, #8]
 800e61a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e61c:	2300      	movs	r3, #0
 800e61e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e626:	2b00      	cmp	r3, #0
 800e628:	d109      	bne.n	800e63e <xQueueReceive+0x2e>
	__asm volatile
 800e62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e62e:	f383 8811 	msr	BASEPRI, r3
 800e632:	f3bf 8f6f 	isb	sy
 800e636:	f3bf 8f4f 	dsb	sy
 800e63a:	623b      	str	r3, [r7, #32]
 800e63c:	e7fe      	b.n	800e63c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e63e:	68bb      	ldr	r3, [r7, #8]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d103      	bne.n	800e64c <xQueueReceive+0x3c>
 800e644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d101      	bne.n	800e650 <xQueueReceive+0x40>
 800e64c:	2301      	movs	r3, #1
 800e64e:	e000      	b.n	800e652 <xQueueReceive+0x42>
 800e650:	2300      	movs	r3, #0
 800e652:	2b00      	cmp	r3, #0
 800e654:	d109      	bne.n	800e66a <xQueueReceive+0x5a>
 800e656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e65a:	f383 8811 	msr	BASEPRI, r3
 800e65e:	f3bf 8f6f 	isb	sy
 800e662:	f3bf 8f4f 	dsb	sy
 800e666:	61fb      	str	r3, [r7, #28]
 800e668:	e7fe      	b.n	800e668 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e66a:	f001 fa8f 	bl	800fb8c <xTaskGetSchedulerState>
 800e66e:	4603      	mov	r3, r0
 800e670:	2b00      	cmp	r3, #0
 800e672:	d102      	bne.n	800e67a <xQueueReceive+0x6a>
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d101      	bne.n	800e67e <xQueueReceive+0x6e>
 800e67a:	2301      	movs	r3, #1
 800e67c:	e000      	b.n	800e680 <xQueueReceive+0x70>
 800e67e:	2300      	movs	r3, #0
 800e680:	2b00      	cmp	r3, #0
 800e682:	d109      	bne.n	800e698 <xQueueReceive+0x88>
 800e684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e688:	f383 8811 	msr	BASEPRI, r3
 800e68c:	f3bf 8f6f 	isb	sy
 800e690:	f3bf 8f4f 	dsb	sy
 800e694:	61bb      	str	r3, [r7, #24]
 800e696:	e7fe      	b.n	800e696 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e698:	f002 f998 	bl	80109cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e69e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6a0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d01f      	beq.n	800e6e8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e6a8:	68b9      	ldr	r1, [r7, #8]
 800e6aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e6ac:	f000 fad7 	bl	800ec5e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6b2:	1e5a      	subs	r2, r3, #1
 800e6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6b6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6ba:	691b      	ldr	r3, [r3, #16]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d00f      	beq.n	800e6e0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6c2:	3310      	adds	r3, #16
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	f001 f8a9 	bl	800f81c <xTaskRemoveFromEventList>
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d007      	beq.n	800e6e0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e6d0:	4b3c      	ldr	r3, [pc, #240]	; (800e7c4 <xQueueReceive+0x1b4>)
 800e6d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6d6:	601a      	str	r2, [r3, #0]
 800e6d8:	f3bf 8f4f 	dsb	sy
 800e6dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e6e0:	f002 f9a2 	bl	8010a28 <vPortExitCritical>
				return pdPASS;
 800e6e4:	2301      	movs	r3, #1
 800e6e6:	e069      	b.n	800e7bc <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d103      	bne.n	800e6f6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e6ee:	f002 f99b 	bl	8010a28 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	e062      	b.n	800e7bc <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e6f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d106      	bne.n	800e70a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e6fc:	f107 0310 	add.w	r3, r7, #16
 800e700:	4618      	mov	r0, r3
 800e702:	f001 f8ed 	bl	800f8e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e706:	2301      	movs	r3, #1
 800e708:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e70a:	f002 f98d 	bl	8010a28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e70e:	f000 fe13 	bl	800f338 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e712:	f002 f95b 	bl	80109cc <vPortEnterCritical>
 800e716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e718:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e71c:	b25b      	sxtb	r3, r3
 800e71e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e722:	d103      	bne.n	800e72c <xQueueReceive+0x11c>
 800e724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e726:	2200      	movs	r2, #0
 800e728:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e72e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e732:	b25b      	sxtb	r3, r3
 800e734:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e738:	d103      	bne.n	800e742 <xQueueReceive+0x132>
 800e73a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e73c:	2200      	movs	r2, #0
 800e73e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e742:	f002 f971 	bl	8010a28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e746:	1d3a      	adds	r2, r7, #4
 800e748:	f107 0310 	add.w	r3, r7, #16
 800e74c:	4611      	mov	r1, r2
 800e74e:	4618      	mov	r0, r3
 800e750:	f001 f8dc 	bl	800f90c <xTaskCheckForTimeOut>
 800e754:	4603      	mov	r3, r0
 800e756:	2b00      	cmp	r3, #0
 800e758:	d123      	bne.n	800e7a2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e75a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e75c:	f000 faf7 	bl	800ed4e <prvIsQueueEmpty>
 800e760:	4603      	mov	r3, r0
 800e762:	2b00      	cmp	r3, #0
 800e764:	d017      	beq.n	800e796 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e768:	3324      	adds	r3, #36	; 0x24
 800e76a:	687a      	ldr	r2, [r7, #4]
 800e76c:	4611      	mov	r1, r2
 800e76e:	4618      	mov	r0, r3
 800e770:	f001 f806 	bl	800f780 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e774:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e776:	f000 fa98 	bl	800ecaa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e77a:	f000 fdeb 	bl	800f354 <xTaskResumeAll>
 800e77e:	4603      	mov	r3, r0
 800e780:	2b00      	cmp	r3, #0
 800e782:	d189      	bne.n	800e698 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800e784:	4b0f      	ldr	r3, [pc, #60]	; (800e7c4 <xQueueReceive+0x1b4>)
 800e786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e78a:	601a      	str	r2, [r3, #0]
 800e78c:	f3bf 8f4f 	dsb	sy
 800e790:	f3bf 8f6f 	isb	sy
 800e794:	e780      	b.n	800e698 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e796:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e798:	f000 fa87 	bl	800ecaa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e79c:	f000 fdda 	bl	800f354 <xTaskResumeAll>
 800e7a0:	e77a      	b.n	800e698 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e7a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e7a4:	f000 fa81 	bl	800ecaa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e7a8:	f000 fdd4 	bl	800f354 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e7ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e7ae:	f000 face 	bl	800ed4e <prvIsQueueEmpty>
 800e7b2:	4603      	mov	r3, r0
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	f43f af6f 	beq.w	800e698 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e7ba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e7bc:	4618      	mov	r0, r3
 800e7be:	3730      	adds	r7, #48	; 0x30
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	bd80      	pop	{r7, pc}
 800e7c4:	e000ed04 	.word	0xe000ed04

0800e7c8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b08e      	sub	sp, #56	; 0x38
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
 800e7d0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e7da:	2300      	movs	r3, #0
 800e7dc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d109      	bne.n	800e7f8 <xQueueSemaphoreTake+0x30>
 800e7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7e8:	f383 8811 	msr	BASEPRI, r3
 800e7ec:	f3bf 8f6f 	isb	sy
 800e7f0:	f3bf 8f4f 	dsb	sy
 800e7f4:	623b      	str	r3, [r7, #32]
 800e7f6:	e7fe      	b.n	800e7f6 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d009      	beq.n	800e814 <xQueueSemaphoreTake+0x4c>
 800e800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e804:	f383 8811 	msr	BASEPRI, r3
 800e808:	f3bf 8f6f 	isb	sy
 800e80c:	f3bf 8f4f 	dsb	sy
 800e810:	61fb      	str	r3, [r7, #28]
 800e812:	e7fe      	b.n	800e812 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e814:	f001 f9ba 	bl	800fb8c <xTaskGetSchedulerState>
 800e818:	4603      	mov	r3, r0
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d102      	bne.n	800e824 <xQueueSemaphoreTake+0x5c>
 800e81e:	683b      	ldr	r3, [r7, #0]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d101      	bne.n	800e828 <xQueueSemaphoreTake+0x60>
 800e824:	2301      	movs	r3, #1
 800e826:	e000      	b.n	800e82a <xQueueSemaphoreTake+0x62>
 800e828:	2300      	movs	r3, #0
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d109      	bne.n	800e842 <xQueueSemaphoreTake+0x7a>
 800e82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e832:	f383 8811 	msr	BASEPRI, r3
 800e836:	f3bf 8f6f 	isb	sy
 800e83a:	f3bf 8f4f 	dsb	sy
 800e83e:	61bb      	str	r3, [r7, #24]
 800e840:	e7fe      	b.n	800e840 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e842:	f002 f8c3 	bl	80109cc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e84a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d024      	beq.n	800e89c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e854:	1e5a      	subs	r2, r3, #1
 800e856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e858:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e85a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d104      	bne.n	800e86c <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e862:	f001 fb05 	bl	800fe70 <pvTaskIncrementMutexHeldCount>
 800e866:	4602      	mov	r2, r0
 800e868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e86a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e86e:	691b      	ldr	r3, [r3, #16]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d00f      	beq.n	800e894 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e876:	3310      	adds	r3, #16
 800e878:	4618      	mov	r0, r3
 800e87a:	f000 ffcf 	bl	800f81c <xTaskRemoveFromEventList>
 800e87e:	4603      	mov	r3, r0
 800e880:	2b00      	cmp	r3, #0
 800e882:	d007      	beq.n	800e894 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e884:	4b53      	ldr	r3, [pc, #332]	; (800e9d4 <xQueueSemaphoreTake+0x20c>)
 800e886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e88a:	601a      	str	r2, [r3, #0]
 800e88c:	f3bf 8f4f 	dsb	sy
 800e890:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e894:	f002 f8c8 	bl	8010a28 <vPortExitCritical>
				return pdPASS;
 800e898:	2301      	movs	r3, #1
 800e89a:	e096      	b.n	800e9ca <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e89c:	683b      	ldr	r3, [r7, #0]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d110      	bne.n	800e8c4 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d009      	beq.n	800e8bc <xQueueSemaphoreTake+0xf4>
 800e8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8ac:	f383 8811 	msr	BASEPRI, r3
 800e8b0:	f3bf 8f6f 	isb	sy
 800e8b4:	f3bf 8f4f 	dsb	sy
 800e8b8:	617b      	str	r3, [r7, #20]
 800e8ba:	e7fe      	b.n	800e8ba <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e8bc:	f002 f8b4 	bl	8010a28 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	e082      	b.n	800e9ca <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e8c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d106      	bne.n	800e8d8 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e8ca:	f107 030c 	add.w	r3, r7, #12
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	f001 f806 	bl	800f8e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e8d4:	2301      	movs	r3, #1
 800e8d6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e8d8:	f002 f8a6 	bl	8010a28 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e8dc:	f000 fd2c 	bl	800f338 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e8e0:	f002 f874 	bl	80109cc <vPortEnterCritical>
 800e8e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e8ea:	b25b      	sxtb	r3, r3
 800e8ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8f0:	d103      	bne.n	800e8fa <xQueueSemaphoreTake+0x132>
 800e8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e8fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e900:	b25b      	sxtb	r3, r3
 800e902:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e906:	d103      	bne.n	800e910 <xQueueSemaphoreTake+0x148>
 800e908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e90a:	2200      	movs	r2, #0
 800e90c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e910:	f002 f88a 	bl	8010a28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e914:	463a      	mov	r2, r7
 800e916:	f107 030c 	add.w	r3, r7, #12
 800e91a:	4611      	mov	r1, r2
 800e91c:	4618      	mov	r0, r3
 800e91e:	f000 fff5 	bl	800f90c <xTaskCheckForTimeOut>
 800e922:	4603      	mov	r3, r0
 800e924:	2b00      	cmp	r3, #0
 800e926:	d132      	bne.n	800e98e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e928:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e92a:	f000 fa10 	bl	800ed4e <prvIsQueueEmpty>
 800e92e:	4603      	mov	r3, r0
 800e930:	2b00      	cmp	r3, #0
 800e932:	d026      	beq.n	800e982 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d109      	bne.n	800e950 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800e93c:	f002 f846 	bl	80109cc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e942:	689b      	ldr	r3, [r3, #8]
 800e944:	4618      	mov	r0, r3
 800e946:	f001 f93f 	bl	800fbc8 <xTaskPriorityInherit>
 800e94a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800e94c:	f002 f86c 	bl	8010a28 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e952:	3324      	adds	r3, #36	; 0x24
 800e954:	683a      	ldr	r2, [r7, #0]
 800e956:	4611      	mov	r1, r2
 800e958:	4618      	mov	r0, r3
 800e95a:	f000 ff11 	bl	800f780 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e95e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e960:	f000 f9a3 	bl	800ecaa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e964:	f000 fcf6 	bl	800f354 <xTaskResumeAll>
 800e968:	4603      	mov	r3, r0
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	f47f af69 	bne.w	800e842 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800e970:	4b18      	ldr	r3, [pc, #96]	; (800e9d4 <xQueueSemaphoreTake+0x20c>)
 800e972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e976:	601a      	str	r2, [r3, #0]
 800e978:	f3bf 8f4f 	dsb	sy
 800e97c:	f3bf 8f6f 	isb	sy
 800e980:	e75f      	b.n	800e842 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e982:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e984:	f000 f991 	bl	800ecaa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e988:	f000 fce4 	bl	800f354 <xTaskResumeAll>
 800e98c:	e759      	b.n	800e842 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e98e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e990:	f000 f98b 	bl	800ecaa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e994:	f000 fcde 	bl	800f354 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e998:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e99a:	f000 f9d8 	bl	800ed4e <prvIsQueueEmpty>
 800e99e:	4603      	mov	r3, r0
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	f43f af4e 	beq.w	800e842 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d00d      	beq.n	800e9c8 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800e9ac:	f002 f80e 	bl	80109cc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e9b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e9b2:	f000 f8d2 	bl	800eb5a <prvGetDisinheritPriorityAfterTimeout>
 800e9b6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9ba:	689b      	ldr	r3, [r3, #8]
 800e9bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e9be:	4618      	mov	r0, r3
 800e9c0:	f001 f9d6 	bl	800fd70 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e9c4:	f002 f830 	bl	8010a28 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e9c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	3738      	adds	r7, #56	; 0x38
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	bd80      	pop	{r7, pc}
 800e9d2:	bf00      	nop
 800e9d4:	e000ed04 	.word	0xe000ed04

0800e9d8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b08e      	sub	sp, #56	; 0x38
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	60f8      	str	r0, [r7, #12]
 800e9e0:	60b9      	str	r1, [r7, #8]
 800e9e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d109      	bne.n	800ea02 <xQueueReceiveFromISR+0x2a>
 800e9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9f2:	f383 8811 	msr	BASEPRI, r3
 800e9f6:	f3bf 8f6f 	isb	sy
 800e9fa:	f3bf 8f4f 	dsb	sy
 800e9fe:	623b      	str	r3, [r7, #32]
 800ea00:	e7fe      	b.n	800ea00 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ea02:	68bb      	ldr	r3, [r7, #8]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d103      	bne.n	800ea10 <xQueueReceiveFromISR+0x38>
 800ea08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d101      	bne.n	800ea14 <xQueueReceiveFromISR+0x3c>
 800ea10:	2301      	movs	r3, #1
 800ea12:	e000      	b.n	800ea16 <xQueueReceiveFromISR+0x3e>
 800ea14:	2300      	movs	r3, #0
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d109      	bne.n	800ea2e <xQueueReceiveFromISR+0x56>
 800ea1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea1e:	f383 8811 	msr	BASEPRI, r3
 800ea22:	f3bf 8f6f 	isb	sy
 800ea26:	f3bf 8f4f 	dsb	sy
 800ea2a:	61fb      	str	r3, [r7, #28]
 800ea2c:	e7fe      	b.n	800ea2c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ea2e:	f002 f8a9 	bl	8010b84 <vPortValidateInterruptPriority>
	__asm volatile
 800ea32:	f3ef 8211 	mrs	r2, BASEPRI
 800ea36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea3a:	f383 8811 	msr	BASEPRI, r3
 800ea3e:	f3bf 8f6f 	isb	sy
 800ea42:	f3bf 8f4f 	dsb	sy
 800ea46:	61ba      	str	r2, [r7, #24]
 800ea48:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ea4a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ea4c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ea4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea52:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ea54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d02f      	beq.n	800eaba <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ea5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ea60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ea64:	68b9      	ldr	r1, [r7, #8]
 800ea66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ea68:	f000 f8f9 	bl	800ec5e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ea6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea6e:	1e5a      	subs	r2, r3, #1
 800ea70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea72:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ea74:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ea78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea7c:	d112      	bne.n	800eaa4 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ea7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea80:	691b      	ldr	r3, [r3, #16]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d016      	beq.n	800eab4 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ea86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea88:	3310      	adds	r3, #16
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	f000 fec6 	bl	800f81c <xTaskRemoveFromEventList>
 800ea90:	4603      	mov	r3, r0
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d00e      	beq.n	800eab4 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d00b      	beq.n	800eab4 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	2201      	movs	r2, #1
 800eaa0:	601a      	str	r2, [r3, #0]
 800eaa2:	e007      	b.n	800eab4 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800eaa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eaa8:	3301      	adds	r3, #1
 800eaaa:	b2db      	uxtb	r3, r3
 800eaac:	b25a      	sxtb	r2, r3
 800eaae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eab0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800eab4:	2301      	movs	r3, #1
 800eab6:	637b      	str	r3, [r7, #52]	; 0x34
 800eab8:	e001      	b.n	800eabe <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800eaba:	2300      	movs	r3, #0
 800eabc:	637b      	str	r3, [r7, #52]	; 0x34
 800eabe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eac0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800eac2:	693b      	ldr	r3, [r7, #16]
 800eac4:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800eac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800eaca:	4618      	mov	r0, r3
 800eacc:	3738      	adds	r7, #56	; 0x38
 800eace:	46bd      	mov	sp, r7
 800ead0:	bd80      	pop	{r7, pc}

0800ead2 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 800ead2:	b580      	push	{r7, lr}
 800ead4:	b086      	sub	sp, #24
 800ead6:	af00      	add	r7, sp, #0
 800ead8:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800eade:	697b      	ldr	r3, [r7, #20]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d109      	bne.n	800eaf8 <uxQueueSpacesAvailable+0x26>
	__asm volatile
 800eae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eae8:	f383 8811 	msr	BASEPRI, r3
 800eaec:	f3bf 8f6f 	isb	sy
 800eaf0:	f3bf 8f4f 	dsb	sy
 800eaf4:	60fb      	str	r3, [r7, #12]
 800eaf6:	e7fe      	b.n	800eaf6 <uxQueueSpacesAvailable+0x24>

	taskENTER_CRITICAL();
 800eaf8:	f001 ff68 	bl	80109cc <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 800eafc:	697b      	ldr	r3, [r7, #20]
 800eafe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eb00:	697b      	ldr	r3, [r7, #20]
 800eb02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb04:	1ad3      	subs	r3, r2, r3
 800eb06:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800eb08:	f001 ff8e 	bl	8010a28 <vPortExitCritical>

	return uxReturn;
 800eb0c:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800eb0e:	4618      	mov	r0, r3
 800eb10:	3718      	adds	r7, #24
 800eb12:	46bd      	mov	sp, r7
 800eb14:	bd80      	pop	{r7, pc}

0800eb16 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800eb16:	b580      	push	{r7, lr}
 800eb18:	b084      	sub	sp, #16
 800eb1a:	af00      	add	r7, sp, #0
 800eb1c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d109      	bne.n	800eb3c <vQueueDelete+0x26>
 800eb28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb2c:	f383 8811 	msr	BASEPRI, r3
 800eb30:	f3bf 8f6f 	isb	sy
 800eb34:	f3bf 8f4f 	dsb	sy
 800eb38:	60bb      	str	r3, [r7, #8]
 800eb3a:	e7fe      	b.n	800eb3a <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800eb3c:	68f8      	ldr	r0, [r7, #12]
 800eb3e:	f000 f95d 	bl	800edfc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d102      	bne.n	800eb52 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800eb4c:	68f8      	ldr	r0, [r7, #12]
 800eb4e:	f002 f91d 	bl	8010d8c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800eb52:	bf00      	nop
 800eb54:	3710      	adds	r7, #16
 800eb56:	46bd      	mov	sp, r7
 800eb58:	bd80      	pop	{r7, pc}

0800eb5a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800eb5a:	b480      	push	{r7}
 800eb5c:	b085      	sub	sp, #20
 800eb5e:	af00      	add	r7, sp, #0
 800eb60:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d006      	beq.n	800eb78 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800eb74:	60fb      	str	r3, [r7, #12]
 800eb76:	e001      	b.n	800eb7c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800eb78:	2300      	movs	r3, #0
 800eb7a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800eb7c:	68fb      	ldr	r3, [r7, #12]
	}
 800eb7e:	4618      	mov	r0, r3
 800eb80:	3714      	adds	r7, #20
 800eb82:	46bd      	mov	sp, r7
 800eb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb88:	4770      	bx	lr

0800eb8a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800eb8a:	b580      	push	{r7, lr}
 800eb8c:	b086      	sub	sp, #24
 800eb8e:	af00      	add	r7, sp, #0
 800eb90:	60f8      	str	r0, [r7, #12]
 800eb92:	60b9      	str	r1, [r7, #8]
 800eb94:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800eb96:	2300      	movs	r3, #0
 800eb98:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb9e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d10d      	bne.n	800ebc4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d14d      	bne.n	800ec4c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	689b      	ldr	r3, [r3, #8]
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	f001 f86f 	bl	800fc98 <xTaskPriorityDisinherit>
 800ebba:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	609a      	str	r2, [r3, #8]
 800ebc2:	e043      	b.n	800ec4c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d119      	bne.n	800ebfe <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	6858      	ldr	r0, [r3, #4]
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebd2:	461a      	mov	r2, r3
 800ebd4:	68b9      	ldr	r1, [r7, #8]
 800ebd6:	f002 fd5d 	bl	8011694 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	685a      	ldr	r2, [r3, #4]
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebe2:	441a      	add	r2, r3
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	685a      	ldr	r2, [r3, #4]
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	689b      	ldr	r3, [r3, #8]
 800ebf0:	429a      	cmp	r2, r3
 800ebf2:	d32b      	bcc.n	800ec4c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	681a      	ldr	r2, [r3, #0]
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	605a      	str	r2, [r3, #4]
 800ebfc:	e026      	b.n	800ec4c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	68d8      	ldr	r0, [r3, #12]
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec06:	461a      	mov	r2, r3
 800ec08:	68b9      	ldr	r1, [r7, #8]
 800ec0a:	f002 fd43 	bl	8011694 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	68da      	ldr	r2, [r3, #12]
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec16:	425b      	negs	r3, r3
 800ec18:	441a      	add	r2, r3
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	68da      	ldr	r2, [r3, #12]
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	429a      	cmp	r2, r3
 800ec28:	d207      	bcs.n	800ec3a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	689a      	ldr	r2, [r3, #8]
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec32:	425b      	negs	r3, r3
 800ec34:	441a      	add	r2, r3
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	2b02      	cmp	r3, #2
 800ec3e:	d105      	bne.n	800ec4c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ec40:	693b      	ldr	r3, [r7, #16]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d002      	beq.n	800ec4c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ec46:	693b      	ldr	r3, [r7, #16]
 800ec48:	3b01      	subs	r3, #1
 800ec4a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ec4c:	693b      	ldr	r3, [r7, #16]
 800ec4e:	1c5a      	adds	r2, r3, #1
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ec54:	697b      	ldr	r3, [r7, #20]
}
 800ec56:	4618      	mov	r0, r3
 800ec58:	3718      	adds	r7, #24
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	bd80      	pop	{r7, pc}

0800ec5e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ec5e:	b580      	push	{r7, lr}
 800ec60:	b082      	sub	sp, #8
 800ec62:	af00      	add	r7, sp, #0
 800ec64:	6078      	str	r0, [r7, #4]
 800ec66:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d018      	beq.n	800eca2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	68da      	ldr	r2, [r3, #12]
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec78:	441a      	add	r2, r3
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	68da      	ldr	r2, [r3, #12]
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	689b      	ldr	r3, [r3, #8]
 800ec86:	429a      	cmp	r2, r3
 800ec88:	d303      	bcc.n	800ec92 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	681a      	ldr	r2, [r3, #0]
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	68d9      	ldr	r1, [r3, #12]
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec9a:	461a      	mov	r2, r3
 800ec9c:	6838      	ldr	r0, [r7, #0]
 800ec9e:	f002 fcf9 	bl	8011694 <memcpy>
	}
}
 800eca2:	bf00      	nop
 800eca4:	3708      	adds	r7, #8
 800eca6:	46bd      	mov	sp, r7
 800eca8:	bd80      	pop	{r7, pc}

0800ecaa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ecaa:	b580      	push	{r7, lr}
 800ecac:	b084      	sub	sp, #16
 800ecae:	af00      	add	r7, sp, #0
 800ecb0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ecb2:	f001 fe8b 	bl	80109cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ecbc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ecbe:	e011      	b.n	800ece4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d012      	beq.n	800ecee <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	3324      	adds	r3, #36	; 0x24
 800eccc:	4618      	mov	r0, r3
 800ecce:	f000 fda5 	bl	800f81c <xTaskRemoveFromEventList>
 800ecd2:	4603      	mov	r3, r0
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d001      	beq.n	800ecdc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ecd8:	f000 fe78 	bl	800f9cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ecdc:	7bfb      	ldrb	r3, [r7, #15]
 800ecde:	3b01      	subs	r3, #1
 800ece0:	b2db      	uxtb	r3, r3
 800ece2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ece4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	dce9      	bgt.n	800ecc0 <prvUnlockQueue+0x16>
 800ecec:	e000      	b.n	800ecf0 <prvUnlockQueue+0x46>
					break;
 800ecee:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	22ff      	movs	r2, #255	; 0xff
 800ecf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ecf8:	f001 fe96 	bl	8010a28 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ecfc:	f001 fe66 	bl	80109cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ed06:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ed08:	e011      	b.n	800ed2e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	691b      	ldr	r3, [r3, #16]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d012      	beq.n	800ed38 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	3310      	adds	r3, #16
 800ed16:	4618      	mov	r0, r3
 800ed18:	f000 fd80 	bl	800f81c <xTaskRemoveFromEventList>
 800ed1c:	4603      	mov	r3, r0
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d001      	beq.n	800ed26 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ed22:	f000 fe53 	bl	800f9cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ed26:	7bbb      	ldrb	r3, [r7, #14]
 800ed28:	3b01      	subs	r3, #1
 800ed2a:	b2db      	uxtb	r3, r3
 800ed2c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ed2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	dce9      	bgt.n	800ed0a <prvUnlockQueue+0x60>
 800ed36:	e000      	b.n	800ed3a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ed38:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	22ff      	movs	r2, #255	; 0xff
 800ed3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ed42:	f001 fe71 	bl	8010a28 <vPortExitCritical>
}
 800ed46:	bf00      	nop
 800ed48:	3710      	adds	r7, #16
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd80      	pop	{r7, pc}

0800ed4e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ed4e:	b580      	push	{r7, lr}
 800ed50:	b084      	sub	sp, #16
 800ed52:	af00      	add	r7, sp, #0
 800ed54:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ed56:	f001 fe39 	bl	80109cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d102      	bne.n	800ed68 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ed62:	2301      	movs	r3, #1
 800ed64:	60fb      	str	r3, [r7, #12]
 800ed66:	e001      	b.n	800ed6c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ed68:	2300      	movs	r3, #0
 800ed6a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ed6c:	f001 fe5c 	bl	8010a28 <vPortExitCritical>

	return xReturn;
 800ed70:	68fb      	ldr	r3, [r7, #12]
}
 800ed72:	4618      	mov	r0, r3
 800ed74:	3710      	adds	r7, #16
 800ed76:	46bd      	mov	sp, r7
 800ed78:	bd80      	pop	{r7, pc}

0800ed7a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ed7a:	b580      	push	{r7, lr}
 800ed7c:	b084      	sub	sp, #16
 800ed7e:	af00      	add	r7, sp, #0
 800ed80:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ed82:	f001 fe23 	bl	80109cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed8e:	429a      	cmp	r2, r3
 800ed90:	d102      	bne.n	800ed98 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ed92:	2301      	movs	r3, #1
 800ed94:	60fb      	str	r3, [r7, #12]
 800ed96:	e001      	b.n	800ed9c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ed98:	2300      	movs	r3, #0
 800ed9a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ed9c:	f001 fe44 	bl	8010a28 <vPortExitCritical>

	return xReturn;
 800eda0:	68fb      	ldr	r3, [r7, #12]
}
 800eda2:	4618      	mov	r0, r3
 800eda4:	3710      	adds	r7, #16
 800eda6:	46bd      	mov	sp, r7
 800eda8:	bd80      	pop	{r7, pc}
	...

0800edac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800edac:	b480      	push	{r7}
 800edae:	b085      	sub	sp, #20
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
 800edb4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800edb6:	2300      	movs	r3, #0
 800edb8:	60fb      	str	r3, [r7, #12]
 800edba:	e014      	b.n	800ede6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800edbc:	4a0e      	ldr	r2, [pc, #56]	; (800edf8 <vQueueAddToRegistry+0x4c>)
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d10b      	bne.n	800ede0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800edc8:	490b      	ldr	r1, [pc, #44]	; (800edf8 <vQueueAddToRegistry+0x4c>)
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	683a      	ldr	r2, [r7, #0]
 800edce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800edd2:	4a09      	ldr	r2, [pc, #36]	; (800edf8 <vQueueAddToRegistry+0x4c>)
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	00db      	lsls	r3, r3, #3
 800edd8:	4413      	add	r3, r2
 800edda:	687a      	ldr	r2, [r7, #4]
 800eddc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800edde:	e005      	b.n	800edec <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	3301      	adds	r3, #1
 800ede4:	60fb      	str	r3, [r7, #12]
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	2b07      	cmp	r3, #7
 800edea:	d9e7      	bls.n	800edbc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800edec:	bf00      	nop
 800edee:	3714      	adds	r7, #20
 800edf0:	46bd      	mov	sp, r7
 800edf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf6:	4770      	bx	lr
 800edf8:	20007178 	.word	0x20007178

0800edfc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800edfc:	b480      	push	{r7}
 800edfe:	b085      	sub	sp, #20
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ee04:	2300      	movs	r3, #0
 800ee06:	60fb      	str	r3, [r7, #12]
 800ee08:	e016      	b.n	800ee38 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ee0a:	4a10      	ldr	r2, [pc, #64]	; (800ee4c <vQueueUnregisterQueue+0x50>)
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	00db      	lsls	r3, r3, #3
 800ee10:	4413      	add	r3, r2
 800ee12:	685b      	ldr	r3, [r3, #4]
 800ee14:	687a      	ldr	r2, [r7, #4]
 800ee16:	429a      	cmp	r2, r3
 800ee18:	d10b      	bne.n	800ee32 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ee1a:	4a0c      	ldr	r2, [pc, #48]	; (800ee4c <vQueueUnregisterQueue+0x50>)
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	2100      	movs	r1, #0
 800ee20:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ee24:	4a09      	ldr	r2, [pc, #36]	; (800ee4c <vQueueUnregisterQueue+0x50>)
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	00db      	lsls	r3, r3, #3
 800ee2a:	4413      	add	r3, r2
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	605a      	str	r2, [r3, #4]
				break;
 800ee30:	e005      	b.n	800ee3e <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	3301      	adds	r3, #1
 800ee36:	60fb      	str	r3, [r7, #12]
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	2b07      	cmp	r3, #7
 800ee3c:	d9e5      	bls.n	800ee0a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ee3e:	bf00      	nop
 800ee40:	3714      	adds	r7, #20
 800ee42:	46bd      	mov	sp, r7
 800ee44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee48:	4770      	bx	lr
 800ee4a:	bf00      	nop
 800ee4c:	20007178 	.word	0x20007178

0800ee50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ee50:	b580      	push	{r7, lr}
 800ee52:	b086      	sub	sp, #24
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	60f8      	str	r0, [r7, #12]
 800ee58:	60b9      	str	r1, [r7, #8]
 800ee5a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ee60:	f001 fdb4 	bl	80109cc <vPortEnterCritical>
 800ee64:	697b      	ldr	r3, [r7, #20]
 800ee66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ee6a:	b25b      	sxtb	r3, r3
 800ee6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee70:	d103      	bne.n	800ee7a <vQueueWaitForMessageRestricted+0x2a>
 800ee72:	697b      	ldr	r3, [r7, #20]
 800ee74:	2200      	movs	r2, #0
 800ee76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ee7a:	697b      	ldr	r3, [r7, #20]
 800ee7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ee80:	b25b      	sxtb	r3, r3
 800ee82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee86:	d103      	bne.n	800ee90 <vQueueWaitForMessageRestricted+0x40>
 800ee88:	697b      	ldr	r3, [r7, #20]
 800ee8a:	2200      	movs	r2, #0
 800ee8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ee90:	f001 fdca 	bl	8010a28 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ee94:	697b      	ldr	r3, [r7, #20]
 800ee96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d106      	bne.n	800eeaa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ee9c:	697b      	ldr	r3, [r7, #20]
 800ee9e:	3324      	adds	r3, #36	; 0x24
 800eea0:	687a      	ldr	r2, [r7, #4]
 800eea2:	68b9      	ldr	r1, [r7, #8]
 800eea4:	4618      	mov	r0, r3
 800eea6:	f000 fc8f 	bl	800f7c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800eeaa:	6978      	ldr	r0, [r7, #20]
 800eeac:	f7ff fefd 	bl	800ecaa <prvUnlockQueue>
	}
 800eeb0:	bf00      	nop
 800eeb2:	3718      	adds	r7, #24
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	bd80      	pop	{r7, pc}

0800eeb8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b08e      	sub	sp, #56	; 0x38
 800eebc:	af04      	add	r7, sp, #16
 800eebe:	60f8      	str	r0, [r7, #12]
 800eec0:	60b9      	str	r1, [r7, #8]
 800eec2:	607a      	str	r2, [r7, #4]
 800eec4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800eec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d109      	bne.n	800eee0 <xTaskCreateStatic+0x28>
 800eecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eed0:	f383 8811 	msr	BASEPRI, r3
 800eed4:	f3bf 8f6f 	isb	sy
 800eed8:	f3bf 8f4f 	dsb	sy
 800eedc:	623b      	str	r3, [r7, #32]
 800eede:	e7fe      	b.n	800eede <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800eee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d109      	bne.n	800eefa <xTaskCreateStatic+0x42>
 800eee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeea:	f383 8811 	msr	BASEPRI, r3
 800eeee:	f3bf 8f6f 	isb	sy
 800eef2:	f3bf 8f4f 	dsb	sy
 800eef6:	61fb      	str	r3, [r7, #28]
 800eef8:	e7fe      	b.n	800eef8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800eefa:	237c      	movs	r3, #124	; 0x7c
 800eefc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800eefe:	693b      	ldr	r3, [r7, #16]
 800ef00:	2b7c      	cmp	r3, #124	; 0x7c
 800ef02:	d009      	beq.n	800ef18 <xTaskCreateStatic+0x60>
 800ef04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef08:	f383 8811 	msr	BASEPRI, r3
 800ef0c:	f3bf 8f6f 	isb	sy
 800ef10:	f3bf 8f4f 	dsb	sy
 800ef14:	61bb      	str	r3, [r7, #24]
 800ef16:	e7fe      	b.n	800ef16 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ef18:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ef1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d01e      	beq.n	800ef5e <xTaskCreateStatic+0xa6>
 800ef20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d01b      	beq.n	800ef5e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ef26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef28:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ef2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ef2e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ef30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef32:	2202      	movs	r2, #2
 800ef34:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ef38:	2300      	movs	r3, #0
 800ef3a:	9303      	str	r3, [sp, #12]
 800ef3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef3e:	9302      	str	r3, [sp, #8]
 800ef40:	f107 0314 	add.w	r3, r7, #20
 800ef44:	9301      	str	r3, [sp, #4]
 800ef46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef48:	9300      	str	r3, [sp, #0]
 800ef4a:	683b      	ldr	r3, [r7, #0]
 800ef4c:	687a      	ldr	r2, [r7, #4]
 800ef4e:	68b9      	ldr	r1, [r7, #8]
 800ef50:	68f8      	ldr	r0, [r7, #12]
 800ef52:	f000 f850 	bl	800eff6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ef56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef58:	f000 f8e4 	bl	800f124 <prvAddNewTaskToReadyList>
 800ef5c:	e001      	b.n	800ef62 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800ef5e:	2300      	movs	r3, #0
 800ef60:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ef62:	697b      	ldr	r3, [r7, #20]
	}
 800ef64:	4618      	mov	r0, r3
 800ef66:	3728      	adds	r7, #40	; 0x28
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	bd80      	pop	{r7, pc}

0800ef6c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	b08c      	sub	sp, #48	; 0x30
 800ef70:	af04      	add	r7, sp, #16
 800ef72:	60f8      	str	r0, [r7, #12]
 800ef74:	60b9      	str	r1, [r7, #8]
 800ef76:	603b      	str	r3, [r7, #0]
 800ef78:	4613      	mov	r3, r2
 800ef7a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ef7c:	88fb      	ldrh	r3, [r7, #6]
 800ef7e:	009b      	lsls	r3, r3, #2
 800ef80:	4618      	mov	r0, r3
 800ef82:	f001 fe3d 	bl	8010c00 <pvPortMalloc>
 800ef86:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ef88:	697b      	ldr	r3, [r7, #20]
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d00e      	beq.n	800efac <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ef8e:	207c      	movs	r0, #124	; 0x7c
 800ef90:	f001 fe36 	bl	8010c00 <pvPortMalloc>
 800ef94:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ef96:	69fb      	ldr	r3, [r7, #28]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d003      	beq.n	800efa4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ef9c:	69fb      	ldr	r3, [r7, #28]
 800ef9e:	697a      	ldr	r2, [r7, #20]
 800efa0:	631a      	str	r2, [r3, #48]	; 0x30
 800efa2:	e005      	b.n	800efb0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800efa4:	6978      	ldr	r0, [r7, #20]
 800efa6:	f001 fef1 	bl	8010d8c <vPortFree>
 800efaa:	e001      	b.n	800efb0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800efac:	2300      	movs	r3, #0
 800efae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800efb0:	69fb      	ldr	r3, [r7, #28]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d017      	beq.n	800efe6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800efb6:	69fb      	ldr	r3, [r7, #28]
 800efb8:	2200      	movs	r2, #0
 800efba:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800efbe:	88fa      	ldrh	r2, [r7, #6]
 800efc0:	2300      	movs	r3, #0
 800efc2:	9303      	str	r3, [sp, #12]
 800efc4:	69fb      	ldr	r3, [r7, #28]
 800efc6:	9302      	str	r3, [sp, #8]
 800efc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efca:	9301      	str	r3, [sp, #4]
 800efcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efce:	9300      	str	r3, [sp, #0]
 800efd0:	683b      	ldr	r3, [r7, #0]
 800efd2:	68b9      	ldr	r1, [r7, #8]
 800efd4:	68f8      	ldr	r0, [r7, #12]
 800efd6:	f000 f80e 	bl	800eff6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800efda:	69f8      	ldr	r0, [r7, #28]
 800efdc:	f000 f8a2 	bl	800f124 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800efe0:	2301      	movs	r3, #1
 800efe2:	61bb      	str	r3, [r7, #24]
 800efe4:	e002      	b.n	800efec <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800efe6:	f04f 33ff 	mov.w	r3, #4294967295
 800efea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800efec:	69bb      	ldr	r3, [r7, #24]
	}
 800efee:	4618      	mov	r0, r3
 800eff0:	3720      	adds	r7, #32
 800eff2:	46bd      	mov	sp, r7
 800eff4:	bd80      	pop	{r7, pc}

0800eff6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800eff6:	b580      	push	{r7, lr}
 800eff8:	b088      	sub	sp, #32
 800effa:	af00      	add	r7, sp, #0
 800effc:	60f8      	str	r0, [r7, #12]
 800effe:	60b9      	str	r1, [r7, #8]
 800f000:	607a      	str	r2, [r7, #4]
 800f002:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f006:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	009b      	lsls	r3, r3, #2
 800f00c:	461a      	mov	r2, r3
 800f00e:	21a5      	movs	r1, #165	; 0xa5
 800f010:	f002 fb4b 	bl	80116aa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f01e:	3b01      	subs	r3, #1
 800f020:	009b      	lsls	r3, r3, #2
 800f022:	4413      	add	r3, r2
 800f024:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f026:	69bb      	ldr	r3, [r7, #24]
 800f028:	f023 0307 	bic.w	r3, r3, #7
 800f02c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f02e:	69bb      	ldr	r3, [r7, #24]
 800f030:	f003 0307 	and.w	r3, r3, #7
 800f034:	2b00      	cmp	r3, #0
 800f036:	d009      	beq.n	800f04c <prvInitialiseNewTask+0x56>
 800f038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f03c:	f383 8811 	msr	BASEPRI, r3
 800f040:	f3bf 8f6f 	isb	sy
 800f044:	f3bf 8f4f 	dsb	sy
 800f048:	617b      	str	r3, [r7, #20]
 800f04a:	e7fe      	b.n	800f04a <prvInitialiseNewTask+0x54>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800f04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f04e:	69ba      	ldr	r2, [r7, #24]
 800f050:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f052:	68bb      	ldr	r3, [r7, #8]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d01f      	beq.n	800f098 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f058:	2300      	movs	r3, #0
 800f05a:	61fb      	str	r3, [r7, #28]
 800f05c:	e012      	b.n	800f084 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f05e:	68ba      	ldr	r2, [r7, #8]
 800f060:	69fb      	ldr	r3, [r7, #28]
 800f062:	4413      	add	r3, r2
 800f064:	7819      	ldrb	r1, [r3, #0]
 800f066:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f068:	69fb      	ldr	r3, [r7, #28]
 800f06a:	4413      	add	r3, r2
 800f06c:	3334      	adds	r3, #52	; 0x34
 800f06e:	460a      	mov	r2, r1
 800f070:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f072:	68ba      	ldr	r2, [r7, #8]
 800f074:	69fb      	ldr	r3, [r7, #28]
 800f076:	4413      	add	r3, r2
 800f078:	781b      	ldrb	r3, [r3, #0]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d006      	beq.n	800f08c <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f07e:	69fb      	ldr	r3, [r7, #28]
 800f080:	3301      	adds	r3, #1
 800f082:	61fb      	str	r3, [r7, #28]
 800f084:	69fb      	ldr	r3, [r7, #28]
 800f086:	2b1f      	cmp	r3, #31
 800f088:	d9e9      	bls.n	800f05e <prvInitialiseNewTask+0x68>
 800f08a:	e000      	b.n	800f08e <prvInitialiseNewTask+0x98>
			{
				break;
 800f08c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f090:	2200      	movs	r2, #0
 800f092:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800f096:	e003      	b.n	800f0a0 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f09a:	2200      	movs	r2, #0
 800f09c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0a2:	2b37      	cmp	r3, #55	; 0x37
 800f0a4:	d901      	bls.n	800f0aa <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f0a6:	2337      	movs	r3, #55	; 0x37
 800f0a8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f0ae:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f0b4:	661a      	str	r2, [r3, #96]	; 0x60
		pxNewTCB->uxMutexesHeld = 0;
 800f0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	665a      	str	r2, [r3, #100]	; 0x64
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0be:	3304      	adds	r3, #4
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	f7fe fe55 	bl	800dd70 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0c8:	3318      	adds	r3, #24
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	f7fe fe50 	bl	800dd70 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f0d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f0d4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0d8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0de:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f0e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f0e4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800f0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	669a      	str	r2, [r3, #104]	; 0x68
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800f0ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	66da      	str	r2, [r3, #108]	; 0x6c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0f4:	2200      	movs	r2, #0
 800f0f6:	671a      	str	r2, [r3, #112]	; 0x70
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f0f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f100:	683a      	ldr	r2, [r7, #0]
 800f102:	68f9      	ldr	r1, [r7, #12]
 800f104:	69b8      	ldr	r0, [r7, #24]
 800f106:	f001 fb39 	bl	801077c <pxPortInitialiseStack>
 800f10a:	4602      	mov	r2, r0
 800f10c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f10e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f112:	2b00      	cmp	r3, #0
 800f114:	d002      	beq.n	800f11c <prvInitialiseNewTask+0x126>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f11a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f11c:	bf00      	nop
 800f11e:	3720      	adds	r7, #32
 800f120:	46bd      	mov	sp, r7
 800f122:	bd80      	pop	{r7, pc}

0800f124 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f124:	b580      	push	{r7, lr}
 800f126:	b082      	sub	sp, #8
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f12c:	f001 fc4e 	bl	80109cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f130:	4b2d      	ldr	r3, [pc, #180]	; (800f1e8 <prvAddNewTaskToReadyList+0xc4>)
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	3301      	adds	r3, #1
 800f136:	4a2c      	ldr	r2, [pc, #176]	; (800f1e8 <prvAddNewTaskToReadyList+0xc4>)
 800f138:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f13a:	4b2c      	ldr	r3, [pc, #176]	; (800f1ec <prvAddNewTaskToReadyList+0xc8>)
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d109      	bne.n	800f156 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f142:	4a2a      	ldr	r2, [pc, #168]	; (800f1ec <prvAddNewTaskToReadyList+0xc8>)
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f148:	4b27      	ldr	r3, [pc, #156]	; (800f1e8 <prvAddNewTaskToReadyList+0xc4>)
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	2b01      	cmp	r3, #1
 800f14e:	d110      	bne.n	800f172 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f150:	f000 fc62 	bl	800fa18 <prvInitialiseTaskLists>
 800f154:	e00d      	b.n	800f172 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f156:	4b26      	ldr	r3, [pc, #152]	; (800f1f0 <prvAddNewTaskToReadyList+0xcc>)
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d109      	bne.n	800f172 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f15e:	4b23      	ldr	r3, [pc, #140]	; (800f1ec <prvAddNewTaskToReadyList+0xc8>)
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f168:	429a      	cmp	r2, r3
 800f16a:	d802      	bhi.n	800f172 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f16c:	4a1f      	ldr	r2, [pc, #124]	; (800f1ec <prvAddNewTaskToReadyList+0xc8>)
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f172:	4b20      	ldr	r3, [pc, #128]	; (800f1f4 <prvAddNewTaskToReadyList+0xd0>)
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	3301      	adds	r3, #1
 800f178:	4a1e      	ldr	r2, [pc, #120]	; (800f1f4 <prvAddNewTaskToReadyList+0xd0>)
 800f17a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f17c:	4b1d      	ldr	r3, [pc, #116]	; (800f1f4 <prvAddNewTaskToReadyList+0xd0>)
 800f17e:	681a      	ldr	r2, [r3, #0]
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	659a      	str	r2, [r3, #88]	; 0x58
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f188:	4b1b      	ldr	r3, [pc, #108]	; (800f1f8 <prvAddNewTaskToReadyList+0xd4>)
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	429a      	cmp	r2, r3
 800f18e:	d903      	bls.n	800f198 <prvAddNewTaskToReadyList+0x74>
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f194:	4a18      	ldr	r2, [pc, #96]	; (800f1f8 <prvAddNewTaskToReadyList+0xd4>)
 800f196:	6013      	str	r3, [r2, #0]
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f19c:	4613      	mov	r3, r2
 800f19e:	009b      	lsls	r3, r3, #2
 800f1a0:	4413      	add	r3, r2
 800f1a2:	009b      	lsls	r3, r3, #2
 800f1a4:	4a15      	ldr	r2, [pc, #84]	; (800f1fc <prvAddNewTaskToReadyList+0xd8>)
 800f1a6:	441a      	add	r2, r3
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	3304      	adds	r3, #4
 800f1ac:	4619      	mov	r1, r3
 800f1ae:	4610      	mov	r0, r2
 800f1b0:	f7fe fdeb 	bl	800dd8a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f1b4:	f001 fc38 	bl	8010a28 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f1b8:	4b0d      	ldr	r3, [pc, #52]	; (800f1f0 <prvAddNewTaskToReadyList+0xcc>)
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d00e      	beq.n	800f1de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f1c0:	4b0a      	ldr	r3, [pc, #40]	; (800f1ec <prvAddNewTaskToReadyList+0xc8>)
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1ca:	429a      	cmp	r2, r3
 800f1cc:	d207      	bcs.n	800f1de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f1ce:	4b0c      	ldr	r3, [pc, #48]	; (800f200 <prvAddNewTaskToReadyList+0xdc>)
 800f1d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f1d4:	601a      	str	r2, [r3, #0]
 800f1d6:	f3bf 8f4f 	dsb	sy
 800f1da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f1de:	bf00      	nop
 800f1e0:	3708      	adds	r7, #8
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	bd80      	pop	{r7, pc}
 800f1e6:	bf00      	nop
 800f1e8:	20000ae0 	.word	0x20000ae0
 800f1ec:	20000608 	.word	0x20000608
 800f1f0:	20000aec 	.word	0x20000aec
 800f1f4:	20000afc 	.word	0x20000afc
 800f1f8:	20000ae8 	.word	0x20000ae8
 800f1fc:	2000060c 	.word	0x2000060c
 800f200:	e000ed04 	.word	0xe000ed04

0800f204 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f204:	b580      	push	{r7, lr}
 800f206:	b084      	sub	sp, #16
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f20c:	2300      	movs	r3, #0
 800f20e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d016      	beq.n	800f244 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f216:	4b13      	ldr	r3, [pc, #76]	; (800f264 <vTaskDelay+0x60>)
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d009      	beq.n	800f232 <vTaskDelay+0x2e>
 800f21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f222:	f383 8811 	msr	BASEPRI, r3
 800f226:	f3bf 8f6f 	isb	sy
 800f22a:	f3bf 8f4f 	dsb	sy
 800f22e:	60bb      	str	r3, [r7, #8]
 800f230:	e7fe      	b.n	800f230 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800f232:	f000 f881 	bl	800f338 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f236:	2100      	movs	r1, #0
 800f238:	6878      	ldr	r0, [r7, #4]
 800f23a:	f000 ff05 	bl	8010048 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f23e:	f000 f889 	bl	800f354 <xTaskResumeAll>
 800f242:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d107      	bne.n	800f25a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800f24a:	4b07      	ldr	r3, [pc, #28]	; (800f268 <vTaskDelay+0x64>)
 800f24c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f250:	601a      	str	r2, [r3, #0]
 800f252:	f3bf 8f4f 	dsb	sy
 800f256:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f25a:	bf00      	nop
 800f25c:	3710      	adds	r7, #16
 800f25e:	46bd      	mov	sp, r7
 800f260:	bd80      	pop	{r7, pc}
 800f262:	bf00      	nop
 800f264:	20000b08 	.word	0x20000b08
 800f268:	e000ed04 	.word	0xe000ed04

0800f26c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b08a      	sub	sp, #40	; 0x28
 800f270:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f272:	2300      	movs	r3, #0
 800f274:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f276:	2300      	movs	r3, #0
 800f278:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f27a:	463a      	mov	r2, r7
 800f27c:	1d39      	adds	r1, r7, #4
 800f27e:	f107 0308 	add.w	r3, r7, #8
 800f282:	4618      	mov	r0, r3
 800f284:	f7fe fd20 	bl	800dcc8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f288:	6839      	ldr	r1, [r7, #0]
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	68ba      	ldr	r2, [r7, #8]
 800f28e:	9202      	str	r2, [sp, #8]
 800f290:	9301      	str	r3, [sp, #4]
 800f292:	2300      	movs	r3, #0
 800f294:	9300      	str	r3, [sp, #0]
 800f296:	2300      	movs	r3, #0
 800f298:	460a      	mov	r2, r1
 800f29a:	4921      	ldr	r1, [pc, #132]	; (800f320 <vTaskStartScheduler+0xb4>)
 800f29c:	4821      	ldr	r0, [pc, #132]	; (800f324 <vTaskStartScheduler+0xb8>)
 800f29e:	f7ff fe0b 	bl	800eeb8 <xTaskCreateStatic>
 800f2a2:	4602      	mov	r2, r0
 800f2a4:	4b20      	ldr	r3, [pc, #128]	; (800f328 <vTaskStartScheduler+0xbc>)
 800f2a6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f2a8:	4b1f      	ldr	r3, [pc, #124]	; (800f328 <vTaskStartScheduler+0xbc>)
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d002      	beq.n	800f2b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f2b0:	2301      	movs	r3, #1
 800f2b2:	617b      	str	r3, [r7, #20]
 800f2b4:	e001      	b.n	800f2ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f2ba:	697b      	ldr	r3, [r7, #20]
 800f2bc:	2b01      	cmp	r3, #1
 800f2be:	d102      	bne.n	800f2c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f2c0:	f000 ff16 	bl	80100f0 <xTimerCreateTimerTask>
 800f2c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f2c6:	697b      	ldr	r3, [r7, #20]
 800f2c8:	2b01      	cmp	r3, #1
 800f2ca:	d117      	bne.n	800f2fc <vTaskStartScheduler+0x90>
 800f2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2d0:	f383 8811 	msr	BASEPRI, r3
 800f2d4:	f3bf 8f6f 	isb	sy
 800f2d8:	f3bf 8f4f 	dsb	sy
 800f2dc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f2de:	4b13      	ldr	r3, [pc, #76]	; (800f32c <vTaskStartScheduler+0xc0>)
 800f2e0:	f04f 32ff 	mov.w	r2, #4294967295
 800f2e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f2e6:	4b12      	ldr	r3, [pc, #72]	; (800f330 <vTaskStartScheduler+0xc4>)
 800f2e8:	2201      	movs	r2, #1
 800f2ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f2ec:	4b11      	ldr	r3, [pc, #68]	; (800f334 <vTaskStartScheduler+0xc8>)
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800f2f2:	f7f1 fe83 	bl	8000ffc <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f2f6:	f001 facb 	bl	8010890 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f2fa:	e00d      	b.n	800f318 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f2fc:	697b      	ldr	r3, [r7, #20]
 800f2fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f302:	d109      	bne.n	800f318 <vTaskStartScheduler+0xac>
 800f304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f308:	f383 8811 	msr	BASEPRI, r3
 800f30c:	f3bf 8f6f 	isb	sy
 800f310:	f3bf 8f4f 	dsb	sy
 800f314:	60fb      	str	r3, [r7, #12]
 800f316:	e7fe      	b.n	800f316 <vTaskStartScheduler+0xaa>
}
 800f318:	bf00      	nop
 800f31a:	3718      	adds	r7, #24
 800f31c:	46bd      	mov	sp, r7
 800f31e:	bd80      	pop	{r7, pc}
 800f320:	08011bf0 	.word	0x08011bf0
 800f324:	0800f9e5 	.word	0x0800f9e5
 800f328:	20000b04 	.word	0x20000b04
 800f32c:	20000b00 	.word	0x20000b00
 800f330:	20000aec 	.word	0x20000aec
 800f334:	20000ae4 	.word	0x20000ae4

0800f338 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f338:	b480      	push	{r7}
 800f33a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f33c:	4b04      	ldr	r3, [pc, #16]	; (800f350 <vTaskSuspendAll+0x18>)
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	3301      	adds	r3, #1
 800f342:	4a03      	ldr	r2, [pc, #12]	; (800f350 <vTaskSuspendAll+0x18>)
 800f344:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800f346:	bf00      	nop
 800f348:	46bd      	mov	sp, r7
 800f34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34e:	4770      	bx	lr
 800f350:	20000b08 	.word	0x20000b08

0800f354 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b084      	sub	sp, #16
 800f358:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f35a:	2300      	movs	r3, #0
 800f35c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f35e:	2300      	movs	r3, #0
 800f360:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f362:	4b41      	ldr	r3, [pc, #260]	; (800f468 <xTaskResumeAll+0x114>)
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d109      	bne.n	800f37e <xTaskResumeAll+0x2a>
 800f36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f36e:	f383 8811 	msr	BASEPRI, r3
 800f372:	f3bf 8f6f 	isb	sy
 800f376:	f3bf 8f4f 	dsb	sy
 800f37a:	603b      	str	r3, [r7, #0]
 800f37c:	e7fe      	b.n	800f37c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f37e:	f001 fb25 	bl	80109cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f382:	4b39      	ldr	r3, [pc, #228]	; (800f468 <xTaskResumeAll+0x114>)
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	3b01      	subs	r3, #1
 800f388:	4a37      	ldr	r2, [pc, #220]	; (800f468 <xTaskResumeAll+0x114>)
 800f38a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f38c:	4b36      	ldr	r3, [pc, #216]	; (800f468 <xTaskResumeAll+0x114>)
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d162      	bne.n	800f45a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f394:	4b35      	ldr	r3, [pc, #212]	; (800f46c <xTaskResumeAll+0x118>)
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d05e      	beq.n	800f45a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f39c:	e02f      	b.n	800f3fe <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f39e:	4b34      	ldr	r3, [pc, #208]	; (800f470 <xTaskResumeAll+0x11c>)
 800f3a0:	68db      	ldr	r3, [r3, #12]
 800f3a2:	68db      	ldr	r3, [r3, #12]
 800f3a4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	3318      	adds	r3, #24
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	f7fe fd4a 	bl	800de44 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	3304      	adds	r3, #4
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	f7fe fd45 	bl	800de44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3be:	4b2d      	ldr	r3, [pc, #180]	; (800f474 <xTaskResumeAll+0x120>)
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	429a      	cmp	r2, r3
 800f3c4:	d903      	bls.n	800f3ce <xTaskResumeAll+0x7a>
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3ca:	4a2a      	ldr	r2, [pc, #168]	; (800f474 <xTaskResumeAll+0x120>)
 800f3cc:	6013      	str	r3, [r2, #0]
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3d2:	4613      	mov	r3, r2
 800f3d4:	009b      	lsls	r3, r3, #2
 800f3d6:	4413      	add	r3, r2
 800f3d8:	009b      	lsls	r3, r3, #2
 800f3da:	4a27      	ldr	r2, [pc, #156]	; (800f478 <xTaskResumeAll+0x124>)
 800f3dc:	441a      	add	r2, r3
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	3304      	adds	r3, #4
 800f3e2:	4619      	mov	r1, r3
 800f3e4:	4610      	mov	r0, r2
 800f3e6:	f7fe fcd0 	bl	800dd8a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3ee:	4b23      	ldr	r3, [pc, #140]	; (800f47c <xTaskResumeAll+0x128>)
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3f4:	429a      	cmp	r2, r3
 800f3f6:	d302      	bcc.n	800f3fe <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800f3f8:	4b21      	ldr	r3, [pc, #132]	; (800f480 <xTaskResumeAll+0x12c>)
 800f3fa:	2201      	movs	r2, #1
 800f3fc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f3fe:	4b1c      	ldr	r3, [pc, #112]	; (800f470 <xTaskResumeAll+0x11c>)
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	2b00      	cmp	r3, #0
 800f404:	d1cb      	bne.n	800f39e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d001      	beq.n	800f410 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f40c:	f000 fb9e 	bl	800fb4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f410:	4b1c      	ldr	r3, [pc, #112]	; (800f484 <xTaskResumeAll+0x130>)
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d010      	beq.n	800f43e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f41c:	f000 f846 	bl	800f4ac <xTaskIncrementTick>
 800f420:	4603      	mov	r3, r0
 800f422:	2b00      	cmp	r3, #0
 800f424:	d002      	beq.n	800f42c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800f426:	4b16      	ldr	r3, [pc, #88]	; (800f480 <xTaskResumeAll+0x12c>)
 800f428:	2201      	movs	r2, #1
 800f42a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	3b01      	subs	r3, #1
 800f430:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d1f1      	bne.n	800f41c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800f438:	4b12      	ldr	r3, [pc, #72]	; (800f484 <xTaskResumeAll+0x130>)
 800f43a:	2200      	movs	r2, #0
 800f43c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f43e:	4b10      	ldr	r3, [pc, #64]	; (800f480 <xTaskResumeAll+0x12c>)
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d009      	beq.n	800f45a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f446:	2301      	movs	r3, #1
 800f448:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f44a:	4b0f      	ldr	r3, [pc, #60]	; (800f488 <xTaskResumeAll+0x134>)
 800f44c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f450:	601a      	str	r2, [r3, #0]
 800f452:	f3bf 8f4f 	dsb	sy
 800f456:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f45a:	f001 fae5 	bl	8010a28 <vPortExitCritical>

	return xAlreadyYielded;
 800f45e:	68bb      	ldr	r3, [r7, #8]
}
 800f460:	4618      	mov	r0, r3
 800f462:	3710      	adds	r7, #16
 800f464:	46bd      	mov	sp, r7
 800f466:	bd80      	pop	{r7, pc}
 800f468:	20000b08 	.word	0x20000b08
 800f46c:	20000ae0 	.word	0x20000ae0
 800f470:	20000a9c 	.word	0x20000a9c
 800f474:	20000ae8 	.word	0x20000ae8
 800f478:	2000060c 	.word	0x2000060c
 800f47c:	20000608 	.word	0x20000608
 800f480:	20000af4 	.word	0x20000af4
 800f484:	20000af0 	.word	0x20000af0
 800f488:	e000ed04 	.word	0xe000ed04

0800f48c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f48c:	b480      	push	{r7}
 800f48e:	b083      	sub	sp, #12
 800f490:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f492:	4b05      	ldr	r3, [pc, #20]	; (800f4a8 <xTaskGetTickCount+0x1c>)
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f498:	687b      	ldr	r3, [r7, #4]
}
 800f49a:	4618      	mov	r0, r3
 800f49c:	370c      	adds	r7, #12
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a4:	4770      	bx	lr
 800f4a6:	bf00      	nop
 800f4a8:	20000ae4 	.word	0x20000ae4

0800f4ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b086      	sub	sp, #24
 800f4b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f4b6:	4b52      	ldr	r3, [pc, #328]	; (800f600 <xTaskIncrementTick+0x154>)
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	f040 808e 	bne.w	800f5dc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f4c0:	4b50      	ldr	r3, [pc, #320]	; (800f604 <xTaskIncrementTick+0x158>)
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	3301      	adds	r3, #1
 800f4c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f4c8:	4a4e      	ldr	r2, [pc, #312]	; (800f604 <xTaskIncrementTick+0x158>)
 800f4ca:	693b      	ldr	r3, [r7, #16]
 800f4cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f4ce:	693b      	ldr	r3, [r7, #16]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d11f      	bne.n	800f514 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800f4d4:	4b4c      	ldr	r3, [pc, #304]	; (800f608 <xTaskIncrementTick+0x15c>)
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d009      	beq.n	800f4f2 <xTaskIncrementTick+0x46>
 800f4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4e2:	f383 8811 	msr	BASEPRI, r3
 800f4e6:	f3bf 8f6f 	isb	sy
 800f4ea:	f3bf 8f4f 	dsb	sy
 800f4ee:	603b      	str	r3, [r7, #0]
 800f4f0:	e7fe      	b.n	800f4f0 <xTaskIncrementTick+0x44>
 800f4f2:	4b45      	ldr	r3, [pc, #276]	; (800f608 <xTaskIncrementTick+0x15c>)
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	60fb      	str	r3, [r7, #12]
 800f4f8:	4b44      	ldr	r3, [pc, #272]	; (800f60c <xTaskIncrementTick+0x160>)
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	4a42      	ldr	r2, [pc, #264]	; (800f608 <xTaskIncrementTick+0x15c>)
 800f4fe:	6013      	str	r3, [r2, #0]
 800f500:	4a42      	ldr	r2, [pc, #264]	; (800f60c <xTaskIncrementTick+0x160>)
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	6013      	str	r3, [r2, #0]
 800f506:	4b42      	ldr	r3, [pc, #264]	; (800f610 <xTaskIncrementTick+0x164>)
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	3301      	adds	r3, #1
 800f50c:	4a40      	ldr	r2, [pc, #256]	; (800f610 <xTaskIncrementTick+0x164>)
 800f50e:	6013      	str	r3, [r2, #0]
 800f510:	f000 fb1c 	bl	800fb4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f514:	4b3f      	ldr	r3, [pc, #252]	; (800f614 <xTaskIncrementTick+0x168>)
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	693a      	ldr	r2, [r7, #16]
 800f51a:	429a      	cmp	r2, r3
 800f51c:	d349      	bcc.n	800f5b2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f51e:	4b3a      	ldr	r3, [pc, #232]	; (800f608 <xTaskIncrementTick+0x15c>)
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d104      	bne.n	800f532 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f528:	4b3a      	ldr	r3, [pc, #232]	; (800f614 <xTaskIncrementTick+0x168>)
 800f52a:	f04f 32ff 	mov.w	r2, #4294967295
 800f52e:	601a      	str	r2, [r3, #0]
					break;
 800f530:	e03f      	b.n	800f5b2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f532:	4b35      	ldr	r3, [pc, #212]	; (800f608 <xTaskIncrementTick+0x15c>)
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	68db      	ldr	r3, [r3, #12]
 800f538:	68db      	ldr	r3, [r3, #12]
 800f53a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f53c:	68bb      	ldr	r3, [r7, #8]
 800f53e:	685b      	ldr	r3, [r3, #4]
 800f540:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f542:	693a      	ldr	r2, [r7, #16]
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	429a      	cmp	r2, r3
 800f548:	d203      	bcs.n	800f552 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f54a:	4a32      	ldr	r2, [pc, #200]	; (800f614 <xTaskIncrementTick+0x168>)
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f550:	e02f      	b.n	800f5b2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f552:	68bb      	ldr	r3, [r7, #8]
 800f554:	3304      	adds	r3, #4
 800f556:	4618      	mov	r0, r3
 800f558:	f7fe fc74 	bl	800de44 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f55c:	68bb      	ldr	r3, [r7, #8]
 800f55e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f560:	2b00      	cmp	r3, #0
 800f562:	d004      	beq.n	800f56e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f564:	68bb      	ldr	r3, [r7, #8]
 800f566:	3318      	adds	r3, #24
 800f568:	4618      	mov	r0, r3
 800f56a:	f7fe fc6b 	bl	800de44 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f56e:	68bb      	ldr	r3, [r7, #8]
 800f570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f572:	4b29      	ldr	r3, [pc, #164]	; (800f618 <xTaskIncrementTick+0x16c>)
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	429a      	cmp	r2, r3
 800f578:	d903      	bls.n	800f582 <xTaskIncrementTick+0xd6>
 800f57a:	68bb      	ldr	r3, [r7, #8]
 800f57c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f57e:	4a26      	ldr	r2, [pc, #152]	; (800f618 <xTaskIncrementTick+0x16c>)
 800f580:	6013      	str	r3, [r2, #0]
 800f582:	68bb      	ldr	r3, [r7, #8]
 800f584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f586:	4613      	mov	r3, r2
 800f588:	009b      	lsls	r3, r3, #2
 800f58a:	4413      	add	r3, r2
 800f58c:	009b      	lsls	r3, r3, #2
 800f58e:	4a23      	ldr	r2, [pc, #140]	; (800f61c <xTaskIncrementTick+0x170>)
 800f590:	441a      	add	r2, r3
 800f592:	68bb      	ldr	r3, [r7, #8]
 800f594:	3304      	adds	r3, #4
 800f596:	4619      	mov	r1, r3
 800f598:	4610      	mov	r0, r2
 800f59a:	f7fe fbf6 	bl	800dd8a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f59e:	68bb      	ldr	r3, [r7, #8]
 800f5a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5a2:	4b1f      	ldr	r3, [pc, #124]	; (800f620 <xTaskIncrementTick+0x174>)
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5a8:	429a      	cmp	r2, r3
 800f5aa:	d3b8      	bcc.n	800f51e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800f5ac:	2301      	movs	r3, #1
 800f5ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f5b0:	e7b5      	b.n	800f51e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f5b2:	4b1b      	ldr	r3, [pc, #108]	; (800f620 <xTaskIncrementTick+0x174>)
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5b8:	4918      	ldr	r1, [pc, #96]	; (800f61c <xTaskIncrementTick+0x170>)
 800f5ba:	4613      	mov	r3, r2
 800f5bc:	009b      	lsls	r3, r3, #2
 800f5be:	4413      	add	r3, r2
 800f5c0:	009b      	lsls	r3, r3, #2
 800f5c2:	440b      	add	r3, r1
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	2b01      	cmp	r3, #1
 800f5c8:	d901      	bls.n	800f5ce <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800f5ca:	2301      	movs	r3, #1
 800f5cc:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 800f5ce:	4b15      	ldr	r3, [pc, #84]	; (800f624 <xTaskIncrementTick+0x178>)
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d109      	bne.n	800f5ea <xTaskIncrementTick+0x13e>
			{
				vApplicationTickHook();
 800f5d6:	f7f1 fd27 	bl	8001028 <vApplicationTickHook>
 800f5da:	e006      	b.n	800f5ea <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f5dc:	4b11      	ldr	r3, [pc, #68]	; (800f624 <xTaskIncrementTick+0x178>)
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	3301      	adds	r3, #1
 800f5e2:	4a10      	ldr	r2, [pc, #64]	; (800f624 <xTaskIncrementTick+0x178>)
 800f5e4:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 800f5e6:	f7f1 fd1f 	bl	8001028 <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f5ea:	4b0f      	ldr	r3, [pc, #60]	; (800f628 <xTaskIncrementTick+0x17c>)
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d001      	beq.n	800f5f6 <xTaskIncrementTick+0x14a>
		{
			xSwitchRequired = pdTRUE;
 800f5f2:	2301      	movs	r3, #1
 800f5f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f5f6:	697b      	ldr	r3, [r7, #20]
}
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	3718      	adds	r7, #24
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	bd80      	pop	{r7, pc}
 800f600:	20000b08 	.word	0x20000b08
 800f604:	20000ae4 	.word	0x20000ae4
 800f608:	20000a94 	.word	0x20000a94
 800f60c:	20000a98 	.word	0x20000a98
 800f610:	20000af8 	.word	0x20000af8
 800f614:	20000b00 	.word	0x20000b00
 800f618:	20000ae8 	.word	0x20000ae8
 800f61c:	2000060c 	.word	0x2000060c
 800f620:	20000608 	.word	0x20000608
 800f624:	20000af0 	.word	0x20000af0
 800f628:	20000af4 	.word	0x20000af4

0800f62c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b086      	sub	sp, #24
 800f630:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f632:	4b4b      	ldr	r3, [pc, #300]	; (800f760 <vTaskSwitchContext+0x134>)
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d003      	beq.n	800f642 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f63a:	4b4a      	ldr	r3, [pc, #296]	; (800f764 <vTaskSwitchContext+0x138>)
 800f63c:	2201      	movs	r2, #1
 800f63e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f640:	e08a      	b.n	800f758 <vTaskSwitchContext+0x12c>
		xYieldPending = pdFALSE;
 800f642:	4b48      	ldr	r3, [pc, #288]	; (800f764 <vTaskSwitchContext+0x138>)
 800f644:	2200      	movs	r2, #0
 800f646:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800f648:	f7f1 fcdf 	bl	800100a <getRunTimeCounterValue>
 800f64c:	4602      	mov	r2, r0
 800f64e:	4b46      	ldr	r3, [pc, #280]	; (800f768 <vTaskSwitchContext+0x13c>)
 800f650:	601a      	str	r2, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800f652:	4b45      	ldr	r3, [pc, #276]	; (800f768 <vTaskSwitchContext+0x13c>)
 800f654:	681a      	ldr	r2, [r3, #0]
 800f656:	4b45      	ldr	r3, [pc, #276]	; (800f76c <vTaskSwitchContext+0x140>)
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	429a      	cmp	r2, r3
 800f65c:	d909      	bls.n	800f672 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800f65e:	4b44      	ldr	r3, [pc, #272]	; (800f770 <vTaskSwitchContext+0x144>)
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800f664:	4a40      	ldr	r2, [pc, #256]	; (800f768 <vTaskSwitchContext+0x13c>)
 800f666:	6810      	ldr	r0, [r2, #0]
 800f668:	4a40      	ldr	r2, [pc, #256]	; (800f76c <vTaskSwitchContext+0x140>)
 800f66a:	6812      	ldr	r2, [r2, #0]
 800f66c:	1a82      	subs	r2, r0, r2
 800f66e:	440a      	add	r2, r1
 800f670:	66da      	str	r2, [r3, #108]	; 0x6c
			ulTaskSwitchedInTime = ulTotalRunTime;
 800f672:	4b3d      	ldr	r3, [pc, #244]	; (800f768 <vTaskSwitchContext+0x13c>)
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	4a3d      	ldr	r2, [pc, #244]	; (800f76c <vTaskSwitchContext+0x140>)
 800f678:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800f67a:	4b3d      	ldr	r3, [pc, #244]	; (800f770 <vTaskSwitchContext+0x144>)
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f680:	613b      	str	r3, [r7, #16]
 800f682:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800f686:	60fb      	str	r3, [r7, #12]
 800f688:	693b      	ldr	r3, [r7, #16]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	68fa      	ldr	r2, [r7, #12]
 800f68e:	429a      	cmp	r2, r3
 800f690:	d111      	bne.n	800f6b6 <vTaskSwitchContext+0x8a>
 800f692:	693b      	ldr	r3, [r7, #16]
 800f694:	3304      	adds	r3, #4
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	68fa      	ldr	r2, [r7, #12]
 800f69a:	429a      	cmp	r2, r3
 800f69c:	d10b      	bne.n	800f6b6 <vTaskSwitchContext+0x8a>
 800f69e:	693b      	ldr	r3, [r7, #16]
 800f6a0:	3308      	adds	r3, #8
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	68fa      	ldr	r2, [r7, #12]
 800f6a6:	429a      	cmp	r2, r3
 800f6a8:	d105      	bne.n	800f6b6 <vTaskSwitchContext+0x8a>
 800f6aa:	693b      	ldr	r3, [r7, #16]
 800f6ac:	330c      	adds	r3, #12
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	68fa      	ldr	r2, [r7, #12]
 800f6b2:	429a      	cmp	r2, r3
 800f6b4:	d008      	beq.n	800f6c8 <vTaskSwitchContext+0x9c>
 800f6b6:	4b2e      	ldr	r3, [pc, #184]	; (800f770 <vTaskSwitchContext+0x144>)
 800f6b8:	681a      	ldr	r2, [r3, #0]
 800f6ba:	4b2d      	ldr	r3, [pc, #180]	; (800f770 <vTaskSwitchContext+0x144>)
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	3334      	adds	r3, #52	; 0x34
 800f6c0:	4619      	mov	r1, r3
 800f6c2:	4610      	mov	r0, r2
 800f6c4:	f7f1 fcb7 	bl	8001036 <vApplicationStackOverflowHook>
			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
 800f6c8:	4b29      	ldr	r3, [pc, #164]	; (800f770 <vTaskSwitchContext+0x144>)
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	4a29      	ldr	r2, [pc, #164]	; (800f774 <vTaskSwitchContext+0x148>)
 800f6ce:	6812      	ldr	r2, [r2, #0]
 800f6d0:	679a      	str	r2, [r3, #120]	; 0x78
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f6d2:	4b29      	ldr	r3, [pc, #164]	; (800f778 <vTaskSwitchContext+0x14c>)
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	617b      	str	r3, [r7, #20]
 800f6d8:	e00f      	b.n	800f6fa <vTaskSwitchContext+0xce>
 800f6da:	697b      	ldr	r3, [r7, #20]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d109      	bne.n	800f6f4 <vTaskSwitchContext+0xc8>
 800f6e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6e4:	f383 8811 	msr	BASEPRI, r3
 800f6e8:	f3bf 8f6f 	isb	sy
 800f6ec:	f3bf 8f4f 	dsb	sy
 800f6f0:	607b      	str	r3, [r7, #4]
 800f6f2:	e7fe      	b.n	800f6f2 <vTaskSwitchContext+0xc6>
 800f6f4:	697b      	ldr	r3, [r7, #20]
 800f6f6:	3b01      	subs	r3, #1
 800f6f8:	617b      	str	r3, [r7, #20]
 800f6fa:	4920      	ldr	r1, [pc, #128]	; (800f77c <vTaskSwitchContext+0x150>)
 800f6fc:	697a      	ldr	r2, [r7, #20]
 800f6fe:	4613      	mov	r3, r2
 800f700:	009b      	lsls	r3, r3, #2
 800f702:	4413      	add	r3, r2
 800f704:	009b      	lsls	r3, r3, #2
 800f706:	440b      	add	r3, r1
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d0e5      	beq.n	800f6da <vTaskSwitchContext+0xae>
 800f70e:	697a      	ldr	r2, [r7, #20]
 800f710:	4613      	mov	r3, r2
 800f712:	009b      	lsls	r3, r3, #2
 800f714:	4413      	add	r3, r2
 800f716:	009b      	lsls	r3, r3, #2
 800f718:	4a18      	ldr	r2, [pc, #96]	; (800f77c <vTaskSwitchContext+0x150>)
 800f71a:	4413      	add	r3, r2
 800f71c:	60bb      	str	r3, [r7, #8]
 800f71e:	68bb      	ldr	r3, [r7, #8]
 800f720:	685b      	ldr	r3, [r3, #4]
 800f722:	685a      	ldr	r2, [r3, #4]
 800f724:	68bb      	ldr	r3, [r7, #8]
 800f726:	605a      	str	r2, [r3, #4]
 800f728:	68bb      	ldr	r3, [r7, #8]
 800f72a:	685a      	ldr	r2, [r3, #4]
 800f72c:	68bb      	ldr	r3, [r7, #8]
 800f72e:	3308      	adds	r3, #8
 800f730:	429a      	cmp	r2, r3
 800f732:	d104      	bne.n	800f73e <vTaskSwitchContext+0x112>
 800f734:	68bb      	ldr	r3, [r7, #8]
 800f736:	685b      	ldr	r3, [r3, #4]
 800f738:	685a      	ldr	r2, [r3, #4]
 800f73a:	68bb      	ldr	r3, [r7, #8]
 800f73c:	605a      	str	r2, [r3, #4]
 800f73e:	68bb      	ldr	r3, [r7, #8]
 800f740:	685b      	ldr	r3, [r3, #4]
 800f742:	68db      	ldr	r3, [r3, #12]
 800f744:	4a0a      	ldr	r2, [pc, #40]	; (800f770 <vTaskSwitchContext+0x144>)
 800f746:	6013      	str	r3, [r2, #0]
 800f748:	4a0b      	ldr	r2, [pc, #44]	; (800f778 <vTaskSwitchContext+0x14c>)
 800f74a:	697b      	ldr	r3, [r7, #20]
 800f74c:	6013      	str	r3, [r2, #0]
			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
 800f74e:	4b08      	ldr	r3, [pc, #32]	; (800f770 <vTaskSwitchContext+0x144>)
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f754:	4a07      	ldr	r2, [pc, #28]	; (800f774 <vTaskSwitchContext+0x148>)
 800f756:	6013      	str	r3, [r2, #0]
}
 800f758:	bf00      	nop
 800f75a:	3718      	adds	r7, #24
 800f75c:	46bd      	mov	sp, r7
 800f75e:	bd80      	pop	{r7, pc}
 800f760:	20000b08 	.word	0x20000b08
 800f764:	20000af4 	.word	0x20000af4
 800f768:	20000b10 	.word	0x20000b10
 800f76c:	20000b0c 	.word	0x20000b0c
 800f770:	20000608 	.word	0x20000608
 800f774:	20000adc 	.word	0x20000adc
 800f778:	20000ae8 	.word	0x20000ae8
 800f77c:	2000060c 	.word	0x2000060c

0800f780 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f780:	b580      	push	{r7, lr}
 800f782:	b084      	sub	sp, #16
 800f784:	af00      	add	r7, sp, #0
 800f786:	6078      	str	r0, [r7, #4]
 800f788:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d109      	bne.n	800f7a4 <vTaskPlaceOnEventList+0x24>
 800f790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f794:	f383 8811 	msr	BASEPRI, r3
 800f798:	f3bf 8f6f 	isb	sy
 800f79c:	f3bf 8f4f 	dsb	sy
 800f7a0:	60fb      	str	r3, [r7, #12]
 800f7a2:	e7fe      	b.n	800f7a2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f7a4:	4b07      	ldr	r3, [pc, #28]	; (800f7c4 <vTaskPlaceOnEventList+0x44>)
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	3318      	adds	r3, #24
 800f7aa:	4619      	mov	r1, r3
 800f7ac:	6878      	ldr	r0, [r7, #4]
 800f7ae:	f7fe fb10 	bl	800ddd2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f7b2:	2101      	movs	r1, #1
 800f7b4:	6838      	ldr	r0, [r7, #0]
 800f7b6:	f000 fc47 	bl	8010048 <prvAddCurrentTaskToDelayedList>
}
 800f7ba:	bf00      	nop
 800f7bc:	3710      	adds	r7, #16
 800f7be:	46bd      	mov	sp, r7
 800f7c0:	bd80      	pop	{r7, pc}
 800f7c2:	bf00      	nop
 800f7c4:	20000608 	.word	0x20000608

0800f7c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b086      	sub	sp, #24
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	60f8      	str	r0, [r7, #12]
 800f7d0:	60b9      	str	r1, [r7, #8]
 800f7d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d109      	bne.n	800f7ee <vTaskPlaceOnEventListRestricted+0x26>
 800f7da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7de:	f383 8811 	msr	BASEPRI, r3
 800f7e2:	f3bf 8f6f 	isb	sy
 800f7e6:	f3bf 8f4f 	dsb	sy
 800f7ea:	617b      	str	r3, [r7, #20]
 800f7ec:	e7fe      	b.n	800f7ec <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f7ee:	4b0a      	ldr	r3, [pc, #40]	; (800f818 <vTaskPlaceOnEventListRestricted+0x50>)
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	3318      	adds	r3, #24
 800f7f4:	4619      	mov	r1, r3
 800f7f6:	68f8      	ldr	r0, [r7, #12]
 800f7f8:	f7fe fac7 	bl	800dd8a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d002      	beq.n	800f808 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800f802:	f04f 33ff 	mov.w	r3, #4294967295
 800f806:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f808:	6879      	ldr	r1, [r7, #4]
 800f80a:	68b8      	ldr	r0, [r7, #8]
 800f80c:	f000 fc1c 	bl	8010048 <prvAddCurrentTaskToDelayedList>
	}
 800f810:	bf00      	nop
 800f812:	3718      	adds	r7, #24
 800f814:	46bd      	mov	sp, r7
 800f816:	bd80      	pop	{r7, pc}
 800f818:	20000608 	.word	0x20000608

0800f81c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b086      	sub	sp, #24
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	68db      	ldr	r3, [r3, #12]
 800f828:	68db      	ldr	r3, [r3, #12]
 800f82a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f82c:	693b      	ldr	r3, [r7, #16]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d109      	bne.n	800f846 <xTaskRemoveFromEventList+0x2a>
 800f832:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f836:	f383 8811 	msr	BASEPRI, r3
 800f83a:	f3bf 8f6f 	isb	sy
 800f83e:	f3bf 8f4f 	dsb	sy
 800f842:	60fb      	str	r3, [r7, #12]
 800f844:	e7fe      	b.n	800f844 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f846:	693b      	ldr	r3, [r7, #16]
 800f848:	3318      	adds	r3, #24
 800f84a:	4618      	mov	r0, r3
 800f84c:	f7fe fafa 	bl	800de44 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f850:	4b1d      	ldr	r3, [pc, #116]	; (800f8c8 <xTaskRemoveFromEventList+0xac>)
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d11d      	bne.n	800f894 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f858:	693b      	ldr	r3, [r7, #16]
 800f85a:	3304      	adds	r3, #4
 800f85c:	4618      	mov	r0, r3
 800f85e:	f7fe faf1 	bl	800de44 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f862:	693b      	ldr	r3, [r7, #16]
 800f864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f866:	4b19      	ldr	r3, [pc, #100]	; (800f8cc <xTaskRemoveFromEventList+0xb0>)
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	429a      	cmp	r2, r3
 800f86c:	d903      	bls.n	800f876 <xTaskRemoveFromEventList+0x5a>
 800f86e:	693b      	ldr	r3, [r7, #16]
 800f870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f872:	4a16      	ldr	r2, [pc, #88]	; (800f8cc <xTaskRemoveFromEventList+0xb0>)
 800f874:	6013      	str	r3, [r2, #0]
 800f876:	693b      	ldr	r3, [r7, #16]
 800f878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f87a:	4613      	mov	r3, r2
 800f87c:	009b      	lsls	r3, r3, #2
 800f87e:	4413      	add	r3, r2
 800f880:	009b      	lsls	r3, r3, #2
 800f882:	4a13      	ldr	r2, [pc, #76]	; (800f8d0 <xTaskRemoveFromEventList+0xb4>)
 800f884:	441a      	add	r2, r3
 800f886:	693b      	ldr	r3, [r7, #16]
 800f888:	3304      	adds	r3, #4
 800f88a:	4619      	mov	r1, r3
 800f88c:	4610      	mov	r0, r2
 800f88e:	f7fe fa7c 	bl	800dd8a <vListInsertEnd>
 800f892:	e005      	b.n	800f8a0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f894:	693b      	ldr	r3, [r7, #16]
 800f896:	3318      	adds	r3, #24
 800f898:	4619      	mov	r1, r3
 800f89a:	480e      	ldr	r0, [pc, #56]	; (800f8d4 <xTaskRemoveFromEventList+0xb8>)
 800f89c:	f7fe fa75 	bl	800dd8a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f8a0:	693b      	ldr	r3, [r7, #16]
 800f8a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8a4:	4b0c      	ldr	r3, [pc, #48]	; (800f8d8 <xTaskRemoveFromEventList+0xbc>)
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8aa:	429a      	cmp	r2, r3
 800f8ac:	d905      	bls.n	800f8ba <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f8ae:	2301      	movs	r3, #1
 800f8b0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f8b2:	4b0a      	ldr	r3, [pc, #40]	; (800f8dc <xTaskRemoveFromEventList+0xc0>)
 800f8b4:	2201      	movs	r2, #1
 800f8b6:	601a      	str	r2, [r3, #0]
 800f8b8:	e001      	b.n	800f8be <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f8be:	697b      	ldr	r3, [r7, #20]
}
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	3718      	adds	r7, #24
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	bd80      	pop	{r7, pc}
 800f8c8:	20000b08 	.word	0x20000b08
 800f8cc:	20000ae8 	.word	0x20000ae8
 800f8d0:	2000060c 	.word	0x2000060c
 800f8d4:	20000a9c 	.word	0x20000a9c
 800f8d8:	20000608 	.word	0x20000608
 800f8dc:	20000af4 	.word	0x20000af4

0800f8e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f8e0:	b480      	push	{r7}
 800f8e2:	b083      	sub	sp, #12
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f8e8:	4b06      	ldr	r3, [pc, #24]	; (800f904 <vTaskInternalSetTimeOutState+0x24>)
 800f8ea:	681a      	ldr	r2, [r3, #0]
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f8f0:	4b05      	ldr	r3, [pc, #20]	; (800f908 <vTaskInternalSetTimeOutState+0x28>)
 800f8f2:	681a      	ldr	r2, [r3, #0]
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	605a      	str	r2, [r3, #4]
}
 800f8f8:	bf00      	nop
 800f8fa:	370c      	adds	r7, #12
 800f8fc:	46bd      	mov	sp, r7
 800f8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f902:	4770      	bx	lr
 800f904:	20000af8 	.word	0x20000af8
 800f908:	20000ae4 	.word	0x20000ae4

0800f90c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	b088      	sub	sp, #32
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
 800f914:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d109      	bne.n	800f930 <xTaskCheckForTimeOut+0x24>
 800f91c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f920:	f383 8811 	msr	BASEPRI, r3
 800f924:	f3bf 8f6f 	isb	sy
 800f928:	f3bf 8f4f 	dsb	sy
 800f92c:	613b      	str	r3, [r7, #16]
 800f92e:	e7fe      	b.n	800f92e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800f930:	683b      	ldr	r3, [r7, #0]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d109      	bne.n	800f94a <xTaskCheckForTimeOut+0x3e>
 800f936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f93a:	f383 8811 	msr	BASEPRI, r3
 800f93e:	f3bf 8f6f 	isb	sy
 800f942:	f3bf 8f4f 	dsb	sy
 800f946:	60fb      	str	r3, [r7, #12]
 800f948:	e7fe      	b.n	800f948 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800f94a:	f001 f83f 	bl	80109cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f94e:	4b1d      	ldr	r3, [pc, #116]	; (800f9c4 <xTaskCheckForTimeOut+0xb8>)
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	685b      	ldr	r3, [r3, #4]
 800f958:	69ba      	ldr	r2, [r7, #24]
 800f95a:	1ad3      	subs	r3, r2, r3
 800f95c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f95e:	683b      	ldr	r3, [r7, #0]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f966:	d102      	bne.n	800f96e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f968:	2300      	movs	r3, #0
 800f96a:	61fb      	str	r3, [r7, #28]
 800f96c:	e023      	b.n	800f9b6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	681a      	ldr	r2, [r3, #0]
 800f972:	4b15      	ldr	r3, [pc, #84]	; (800f9c8 <xTaskCheckForTimeOut+0xbc>)
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	429a      	cmp	r2, r3
 800f978:	d007      	beq.n	800f98a <xTaskCheckForTimeOut+0x7e>
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	685b      	ldr	r3, [r3, #4]
 800f97e:	69ba      	ldr	r2, [r7, #24]
 800f980:	429a      	cmp	r2, r3
 800f982:	d302      	bcc.n	800f98a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f984:	2301      	movs	r3, #1
 800f986:	61fb      	str	r3, [r7, #28]
 800f988:	e015      	b.n	800f9b6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f98a:	683b      	ldr	r3, [r7, #0]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	697a      	ldr	r2, [r7, #20]
 800f990:	429a      	cmp	r2, r3
 800f992:	d20b      	bcs.n	800f9ac <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f994:	683b      	ldr	r3, [r7, #0]
 800f996:	681a      	ldr	r2, [r3, #0]
 800f998:	697b      	ldr	r3, [r7, #20]
 800f99a:	1ad2      	subs	r2, r2, r3
 800f99c:	683b      	ldr	r3, [r7, #0]
 800f99e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f9a0:	6878      	ldr	r0, [r7, #4]
 800f9a2:	f7ff ff9d 	bl	800f8e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f9a6:	2300      	movs	r3, #0
 800f9a8:	61fb      	str	r3, [r7, #28]
 800f9aa:	e004      	b.n	800f9b6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800f9ac:	683b      	ldr	r3, [r7, #0]
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f9b2:	2301      	movs	r3, #1
 800f9b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f9b6:	f001 f837 	bl	8010a28 <vPortExitCritical>

	return xReturn;
 800f9ba:	69fb      	ldr	r3, [r7, #28]
}
 800f9bc:	4618      	mov	r0, r3
 800f9be:	3720      	adds	r7, #32
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	bd80      	pop	{r7, pc}
 800f9c4:	20000ae4 	.word	0x20000ae4
 800f9c8:	20000af8 	.word	0x20000af8

0800f9cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f9cc:	b480      	push	{r7}
 800f9ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f9d0:	4b03      	ldr	r3, [pc, #12]	; (800f9e0 <vTaskMissedYield+0x14>)
 800f9d2:	2201      	movs	r2, #1
 800f9d4:	601a      	str	r2, [r3, #0]
}
 800f9d6:	bf00      	nop
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9de:	4770      	bx	lr
 800f9e0:	20000af4 	.word	0x20000af4

0800f9e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f9e4:	b580      	push	{r7, lr}
 800f9e6:	b082      	sub	sp, #8
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f9ec:	f000 f854 	bl	800fa98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f9f0:	4b07      	ldr	r3, [pc, #28]	; (800fa10 <prvIdleTask+0x2c>)
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	2b01      	cmp	r3, #1
 800f9f6:	d907      	bls.n	800fa08 <prvIdleTask+0x24>
			{
				taskYIELD();
 800f9f8:	4b06      	ldr	r3, [pc, #24]	; (800fa14 <prvIdleTask+0x30>)
 800f9fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9fe:	601a      	str	r2, [r3, #0]
 800fa00:	f3bf 8f4f 	dsb	sy
 800fa04:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800fa08:	f7f1 fb07 	bl	800101a <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800fa0c:	e7ee      	b.n	800f9ec <prvIdleTask+0x8>
 800fa0e:	bf00      	nop
 800fa10:	2000060c 	.word	0x2000060c
 800fa14:	e000ed04 	.word	0xe000ed04

0800fa18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b082      	sub	sp, #8
 800fa1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fa1e:	2300      	movs	r3, #0
 800fa20:	607b      	str	r3, [r7, #4]
 800fa22:	e00c      	b.n	800fa3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fa24:	687a      	ldr	r2, [r7, #4]
 800fa26:	4613      	mov	r3, r2
 800fa28:	009b      	lsls	r3, r3, #2
 800fa2a:	4413      	add	r3, r2
 800fa2c:	009b      	lsls	r3, r3, #2
 800fa2e:	4a12      	ldr	r2, [pc, #72]	; (800fa78 <prvInitialiseTaskLists+0x60>)
 800fa30:	4413      	add	r3, r2
 800fa32:	4618      	mov	r0, r3
 800fa34:	f7fe f97c 	bl	800dd30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	3301      	adds	r3, #1
 800fa3c:	607b      	str	r3, [r7, #4]
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	2b37      	cmp	r3, #55	; 0x37
 800fa42:	d9ef      	bls.n	800fa24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fa44:	480d      	ldr	r0, [pc, #52]	; (800fa7c <prvInitialiseTaskLists+0x64>)
 800fa46:	f7fe f973 	bl	800dd30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fa4a:	480d      	ldr	r0, [pc, #52]	; (800fa80 <prvInitialiseTaskLists+0x68>)
 800fa4c:	f7fe f970 	bl	800dd30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fa50:	480c      	ldr	r0, [pc, #48]	; (800fa84 <prvInitialiseTaskLists+0x6c>)
 800fa52:	f7fe f96d 	bl	800dd30 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fa56:	480c      	ldr	r0, [pc, #48]	; (800fa88 <prvInitialiseTaskLists+0x70>)
 800fa58:	f7fe f96a 	bl	800dd30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fa5c:	480b      	ldr	r0, [pc, #44]	; (800fa8c <prvInitialiseTaskLists+0x74>)
 800fa5e:	f7fe f967 	bl	800dd30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fa62:	4b0b      	ldr	r3, [pc, #44]	; (800fa90 <prvInitialiseTaskLists+0x78>)
 800fa64:	4a05      	ldr	r2, [pc, #20]	; (800fa7c <prvInitialiseTaskLists+0x64>)
 800fa66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fa68:	4b0a      	ldr	r3, [pc, #40]	; (800fa94 <prvInitialiseTaskLists+0x7c>)
 800fa6a:	4a05      	ldr	r2, [pc, #20]	; (800fa80 <prvInitialiseTaskLists+0x68>)
 800fa6c:	601a      	str	r2, [r3, #0]
}
 800fa6e:	bf00      	nop
 800fa70:	3708      	adds	r7, #8
 800fa72:	46bd      	mov	sp, r7
 800fa74:	bd80      	pop	{r7, pc}
 800fa76:	bf00      	nop
 800fa78:	2000060c 	.word	0x2000060c
 800fa7c:	20000a6c 	.word	0x20000a6c
 800fa80:	20000a80 	.word	0x20000a80
 800fa84:	20000a9c 	.word	0x20000a9c
 800fa88:	20000ab0 	.word	0x20000ab0
 800fa8c:	20000ac8 	.word	0x20000ac8
 800fa90:	20000a94 	.word	0x20000a94
 800fa94:	20000a98 	.word	0x20000a98

0800fa98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b082      	sub	sp, #8
 800fa9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fa9e:	e019      	b.n	800fad4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800faa0:	f000 ff94 	bl	80109cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800faa4:	4b0f      	ldr	r3, [pc, #60]	; (800fae4 <prvCheckTasksWaitingTermination+0x4c>)
 800faa6:	68db      	ldr	r3, [r3, #12]
 800faa8:	68db      	ldr	r3, [r3, #12]
 800faaa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	3304      	adds	r3, #4
 800fab0:	4618      	mov	r0, r3
 800fab2:	f7fe f9c7 	bl	800de44 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fab6:	4b0c      	ldr	r3, [pc, #48]	; (800fae8 <prvCheckTasksWaitingTermination+0x50>)
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	3b01      	subs	r3, #1
 800fabc:	4a0a      	ldr	r2, [pc, #40]	; (800fae8 <prvCheckTasksWaitingTermination+0x50>)
 800fabe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fac0:	4b0a      	ldr	r3, [pc, #40]	; (800faec <prvCheckTasksWaitingTermination+0x54>)
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	3b01      	subs	r3, #1
 800fac6:	4a09      	ldr	r2, [pc, #36]	; (800faec <prvCheckTasksWaitingTermination+0x54>)
 800fac8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800faca:	f000 ffad 	bl	8010a28 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800face:	6878      	ldr	r0, [r7, #4]
 800fad0:	f000 f80e 	bl	800faf0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fad4:	4b05      	ldr	r3, [pc, #20]	; (800faec <prvCheckTasksWaitingTermination+0x54>)
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d1e1      	bne.n	800faa0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fadc:	bf00      	nop
 800fade:	3708      	adds	r7, #8
 800fae0:	46bd      	mov	sp, r7
 800fae2:	bd80      	pop	{r7, pc}
 800fae4:	20000ab0 	.word	0x20000ab0
 800fae8:	20000ae0 	.word	0x20000ae0
 800faec:	20000ac4 	.word	0x20000ac4

0800faf0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b084      	sub	sp, #16
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d108      	bne.n	800fb14 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb06:	4618      	mov	r0, r3
 800fb08:	f001 f940 	bl	8010d8c <vPortFree>
				vPortFree( pxTCB );
 800fb0c:	6878      	ldr	r0, [r7, #4]
 800fb0e:	f001 f93d 	bl	8010d8c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fb12:	e017      	b.n	800fb44 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800fb1a:	2b01      	cmp	r3, #1
 800fb1c:	d103      	bne.n	800fb26 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800fb1e:	6878      	ldr	r0, [r7, #4]
 800fb20:	f001 f934 	bl	8010d8c <vPortFree>
	}
 800fb24:	e00e      	b.n	800fb44 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800fb2c:	2b02      	cmp	r3, #2
 800fb2e:	d009      	beq.n	800fb44 <prvDeleteTCB+0x54>
 800fb30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb34:	f383 8811 	msr	BASEPRI, r3
 800fb38:	f3bf 8f6f 	isb	sy
 800fb3c:	f3bf 8f4f 	dsb	sy
 800fb40:	60fb      	str	r3, [r7, #12]
 800fb42:	e7fe      	b.n	800fb42 <prvDeleteTCB+0x52>
	}
 800fb44:	bf00      	nop
 800fb46:	3710      	adds	r7, #16
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	bd80      	pop	{r7, pc}

0800fb4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fb4c:	b480      	push	{r7}
 800fb4e:	b083      	sub	sp, #12
 800fb50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fb52:	4b0c      	ldr	r3, [pc, #48]	; (800fb84 <prvResetNextTaskUnblockTime+0x38>)
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d104      	bne.n	800fb66 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fb5c:	4b0a      	ldr	r3, [pc, #40]	; (800fb88 <prvResetNextTaskUnblockTime+0x3c>)
 800fb5e:	f04f 32ff 	mov.w	r2, #4294967295
 800fb62:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fb64:	e008      	b.n	800fb78 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb66:	4b07      	ldr	r3, [pc, #28]	; (800fb84 <prvResetNextTaskUnblockTime+0x38>)
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	68db      	ldr	r3, [r3, #12]
 800fb6c:	68db      	ldr	r3, [r3, #12]
 800fb6e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	685b      	ldr	r3, [r3, #4]
 800fb74:	4a04      	ldr	r2, [pc, #16]	; (800fb88 <prvResetNextTaskUnblockTime+0x3c>)
 800fb76:	6013      	str	r3, [r2, #0]
}
 800fb78:	bf00      	nop
 800fb7a:	370c      	adds	r7, #12
 800fb7c:	46bd      	mov	sp, r7
 800fb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb82:	4770      	bx	lr
 800fb84:	20000a94 	.word	0x20000a94
 800fb88:	20000b00 	.word	0x20000b00

0800fb8c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fb8c:	b480      	push	{r7}
 800fb8e:	b083      	sub	sp, #12
 800fb90:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fb92:	4b0b      	ldr	r3, [pc, #44]	; (800fbc0 <xTaskGetSchedulerState+0x34>)
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d102      	bne.n	800fba0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fb9a:	2301      	movs	r3, #1
 800fb9c:	607b      	str	r3, [r7, #4]
 800fb9e:	e008      	b.n	800fbb2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fba0:	4b08      	ldr	r3, [pc, #32]	; (800fbc4 <xTaskGetSchedulerState+0x38>)
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d102      	bne.n	800fbae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fba8:	2302      	movs	r3, #2
 800fbaa:	607b      	str	r3, [r7, #4]
 800fbac:	e001      	b.n	800fbb2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fbae:	2300      	movs	r3, #0
 800fbb0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fbb2:	687b      	ldr	r3, [r7, #4]
	}
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	370c      	adds	r7, #12
 800fbb8:	46bd      	mov	sp, r7
 800fbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbbe:	4770      	bx	lr
 800fbc0:	20000aec 	.word	0x20000aec
 800fbc4:	20000b08 	.word	0x20000b08

0800fbc8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	b084      	sub	sp, #16
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d051      	beq.n	800fc82 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800fbde:	68bb      	ldr	r3, [r7, #8]
 800fbe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbe2:	4b2a      	ldr	r3, [pc, #168]	; (800fc8c <xTaskPriorityInherit+0xc4>)
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbe8:	429a      	cmp	r2, r3
 800fbea:	d241      	bcs.n	800fc70 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fbec:	68bb      	ldr	r3, [r7, #8]
 800fbee:	699b      	ldr	r3, [r3, #24]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	db06      	blt.n	800fc02 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fbf4:	4b25      	ldr	r3, [pc, #148]	; (800fc8c <xTaskPriorityInherit+0xc4>)
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbfa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fbfe:	68bb      	ldr	r3, [r7, #8]
 800fc00:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800fc02:	68bb      	ldr	r3, [r7, #8]
 800fc04:	6959      	ldr	r1, [r3, #20]
 800fc06:	68bb      	ldr	r3, [r7, #8]
 800fc08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc0a:	4613      	mov	r3, r2
 800fc0c:	009b      	lsls	r3, r3, #2
 800fc0e:	4413      	add	r3, r2
 800fc10:	009b      	lsls	r3, r3, #2
 800fc12:	4a1f      	ldr	r2, [pc, #124]	; (800fc90 <xTaskPriorityInherit+0xc8>)
 800fc14:	4413      	add	r3, r2
 800fc16:	4299      	cmp	r1, r3
 800fc18:	d122      	bne.n	800fc60 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fc1a:	68bb      	ldr	r3, [r7, #8]
 800fc1c:	3304      	adds	r3, #4
 800fc1e:	4618      	mov	r0, r3
 800fc20:	f7fe f910 	bl	800de44 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fc24:	4b19      	ldr	r3, [pc, #100]	; (800fc8c <xTaskPriorityInherit+0xc4>)
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc2a:	68bb      	ldr	r3, [r7, #8]
 800fc2c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800fc2e:	68bb      	ldr	r3, [r7, #8]
 800fc30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc32:	4b18      	ldr	r3, [pc, #96]	; (800fc94 <xTaskPriorityInherit+0xcc>)
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	429a      	cmp	r2, r3
 800fc38:	d903      	bls.n	800fc42 <xTaskPriorityInherit+0x7a>
 800fc3a:	68bb      	ldr	r3, [r7, #8]
 800fc3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc3e:	4a15      	ldr	r2, [pc, #84]	; (800fc94 <xTaskPriorityInherit+0xcc>)
 800fc40:	6013      	str	r3, [r2, #0]
 800fc42:	68bb      	ldr	r3, [r7, #8]
 800fc44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc46:	4613      	mov	r3, r2
 800fc48:	009b      	lsls	r3, r3, #2
 800fc4a:	4413      	add	r3, r2
 800fc4c:	009b      	lsls	r3, r3, #2
 800fc4e:	4a10      	ldr	r2, [pc, #64]	; (800fc90 <xTaskPriorityInherit+0xc8>)
 800fc50:	441a      	add	r2, r3
 800fc52:	68bb      	ldr	r3, [r7, #8]
 800fc54:	3304      	adds	r3, #4
 800fc56:	4619      	mov	r1, r3
 800fc58:	4610      	mov	r0, r2
 800fc5a:	f7fe f896 	bl	800dd8a <vListInsertEnd>
 800fc5e:	e004      	b.n	800fc6a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fc60:	4b0a      	ldr	r3, [pc, #40]	; (800fc8c <xTaskPriorityInherit+0xc4>)
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc66:	68bb      	ldr	r3, [r7, #8]
 800fc68:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800fc6a:	2301      	movs	r3, #1
 800fc6c:	60fb      	str	r3, [r7, #12]
 800fc6e:	e008      	b.n	800fc82 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800fc70:	68bb      	ldr	r3, [r7, #8]
 800fc72:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800fc74:	4b05      	ldr	r3, [pc, #20]	; (800fc8c <xTaskPriorityInherit+0xc4>)
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc7a:	429a      	cmp	r2, r3
 800fc7c:	d201      	bcs.n	800fc82 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800fc7e:	2301      	movs	r3, #1
 800fc80:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fc82:	68fb      	ldr	r3, [r7, #12]
	}
 800fc84:	4618      	mov	r0, r3
 800fc86:	3710      	adds	r7, #16
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	bd80      	pop	{r7, pc}
 800fc8c:	20000608 	.word	0x20000608
 800fc90:	2000060c 	.word	0x2000060c
 800fc94:	20000ae8 	.word	0x20000ae8

0800fc98 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b086      	sub	sp, #24
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800fca4:	2300      	movs	r3, #0
 800fca6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d054      	beq.n	800fd58 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fcae:	4b2d      	ldr	r3, [pc, #180]	; (800fd64 <xTaskPriorityDisinherit+0xcc>)
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	693a      	ldr	r2, [r7, #16]
 800fcb4:	429a      	cmp	r2, r3
 800fcb6:	d009      	beq.n	800fccc <xTaskPriorityDisinherit+0x34>
 800fcb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcbc:	f383 8811 	msr	BASEPRI, r3
 800fcc0:	f3bf 8f6f 	isb	sy
 800fcc4:	f3bf 8f4f 	dsb	sy
 800fcc8:	60fb      	str	r3, [r7, #12]
 800fcca:	e7fe      	b.n	800fcca <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800fccc:	693b      	ldr	r3, [r7, #16]
 800fcce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d109      	bne.n	800fce8 <xTaskPriorityDisinherit+0x50>
 800fcd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcd8:	f383 8811 	msr	BASEPRI, r3
 800fcdc:	f3bf 8f6f 	isb	sy
 800fce0:	f3bf 8f4f 	dsb	sy
 800fce4:	60bb      	str	r3, [r7, #8]
 800fce6:	e7fe      	b.n	800fce6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800fce8:	693b      	ldr	r3, [r7, #16]
 800fcea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fcec:	1e5a      	subs	r2, r3, #1
 800fcee:	693b      	ldr	r3, [r7, #16]
 800fcf0:	665a      	str	r2, [r3, #100]	; 0x64

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fcf2:	693b      	ldr	r3, [r7, #16]
 800fcf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcf6:	693b      	ldr	r3, [r7, #16]
 800fcf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fcfa:	429a      	cmp	r2, r3
 800fcfc:	d02c      	beq.n	800fd58 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fcfe:	693b      	ldr	r3, [r7, #16]
 800fd00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d128      	bne.n	800fd58 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fd06:	693b      	ldr	r3, [r7, #16]
 800fd08:	3304      	adds	r3, #4
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	f7fe f89a 	bl	800de44 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fd10:	693b      	ldr	r3, [r7, #16]
 800fd12:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800fd14:	693b      	ldr	r3, [r7, #16]
 800fd16:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd18:	693b      	ldr	r3, [r7, #16]
 800fd1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd1c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fd20:	693b      	ldr	r3, [r7, #16]
 800fd22:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800fd24:	693b      	ldr	r3, [r7, #16]
 800fd26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd28:	4b0f      	ldr	r3, [pc, #60]	; (800fd68 <xTaskPriorityDisinherit+0xd0>)
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	429a      	cmp	r2, r3
 800fd2e:	d903      	bls.n	800fd38 <xTaskPriorityDisinherit+0xa0>
 800fd30:	693b      	ldr	r3, [r7, #16]
 800fd32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd34:	4a0c      	ldr	r2, [pc, #48]	; (800fd68 <xTaskPriorityDisinherit+0xd0>)
 800fd36:	6013      	str	r3, [r2, #0]
 800fd38:	693b      	ldr	r3, [r7, #16]
 800fd3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd3c:	4613      	mov	r3, r2
 800fd3e:	009b      	lsls	r3, r3, #2
 800fd40:	4413      	add	r3, r2
 800fd42:	009b      	lsls	r3, r3, #2
 800fd44:	4a09      	ldr	r2, [pc, #36]	; (800fd6c <xTaskPriorityDisinherit+0xd4>)
 800fd46:	441a      	add	r2, r3
 800fd48:	693b      	ldr	r3, [r7, #16]
 800fd4a:	3304      	adds	r3, #4
 800fd4c:	4619      	mov	r1, r3
 800fd4e:	4610      	mov	r0, r2
 800fd50:	f7fe f81b 	bl	800dd8a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800fd54:	2301      	movs	r3, #1
 800fd56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fd58:	697b      	ldr	r3, [r7, #20]
	}
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	3718      	adds	r7, #24
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	bd80      	pop	{r7, pc}
 800fd62:	bf00      	nop
 800fd64:	20000608 	.word	0x20000608
 800fd68:	20000ae8 	.word	0x20000ae8
 800fd6c:	2000060c 	.word	0x2000060c

0800fd70 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b088      	sub	sp, #32
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
 800fd78:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800fd7e:	2301      	movs	r3, #1
 800fd80:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d068      	beq.n	800fe5a <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800fd88:	69bb      	ldr	r3, [r7, #24]
 800fd8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d109      	bne.n	800fda4 <vTaskPriorityDisinheritAfterTimeout+0x34>
 800fd90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd94:	f383 8811 	msr	BASEPRI, r3
 800fd98:	f3bf 8f6f 	isb	sy
 800fd9c:	f3bf 8f4f 	dsb	sy
 800fda0:	60fb      	str	r3, [r7, #12]
 800fda2:	e7fe      	b.n	800fda2 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800fda4:	69bb      	ldr	r3, [r7, #24]
 800fda6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fda8:	683a      	ldr	r2, [r7, #0]
 800fdaa:	429a      	cmp	r2, r3
 800fdac:	d902      	bls.n	800fdb4 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800fdae:	683b      	ldr	r3, [r7, #0]
 800fdb0:	61fb      	str	r3, [r7, #28]
 800fdb2:	e002      	b.n	800fdba <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800fdb4:	69bb      	ldr	r3, [r7, #24]
 800fdb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fdb8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800fdba:	69bb      	ldr	r3, [r7, #24]
 800fdbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdbe:	69fa      	ldr	r2, [r7, #28]
 800fdc0:	429a      	cmp	r2, r3
 800fdc2:	d04a      	beq.n	800fe5a <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800fdc4:	69bb      	ldr	r3, [r7, #24]
 800fdc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fdc8:	697a      	ldr	r2, [r7, #20]
 800fdca:	429a      	cmp	r2, r3
 800fdcc:	d145      	bne.n	800fe5a <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800fdce:	4b25      	ldr	r3, [pc, #148]	; (800fe64 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	69ba      	ldr	r2, [r7, #24]
 800fdd4:	429a      	cmp	r2, r3
 800fdd6:	d109      	bne.n	800fdec <vTaskPriorityDisinheritAfterTimeout+0x7c>
 800fdd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fddc:	f383 8811 	msr	BASEPRI, r3
 800fde0:	f3bf 8f6f 	isb	sy
 800fde4:	f3bf 8f4f 	dsb	sy
 800fde8:	60bb      	str	r3, [r7, #8]
 800fdea:	e7fe      	b.n	800fdea <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800fdec:	69bb      	ldr	r3, [r7, #24]
 800fdee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdf0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800fdf2:	69bb      	ldr	r3, [r7, #24]
 800fdf4:	69fa      	ldr	r2, [r7, #28]
 800fdf6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fdf8:	69bb      	ldr	r3, [r7, #24]
 800fdfa:	699b      	ldr	r3, [r3, #24]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	db04      	blt.n	800fe0a <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fe00:	69fb      	ldr	r3, [r7, #28]
 800fe02:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fe06:	69bb      	ldr	r3, [r7, #24]
 800fe08:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800fe0a:	69bb      	ldr	r3, [r7, #24]
 800fe0c:	6959      	ldr	r1, [r3, #20]
 800fe0e:	693a      	ldr	r2, [r7, #16]
 800fe10:	4613      	mov	r3, r2
 800fe12:	009b      	lsls	r3, r3, #2
 800fe14:	4413      	add	r3, r2
 800fe16:	009b      	lsls	r3, r3, #2
 800fe18:	4a13      	ldr	r2, [pc, #76]	; (800fe68 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800fe1a:	4413      	add	r3, r2
 800fe1c:	4299      	cmp	r1, r3
 800fe1e:	d11c      	bne.n	800fe5a <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fe20:	69bb      	ldr	r3, [r7, #24]
 800fe22:	3304      	adds	r3, #4
 800fe24:	4618      	mov	r0, r3
 800fe26:	f7fe f80d 	bl	800de44 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800fe2a:	69bb      	ldr	r3, [r7, #24]
 800fe2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe2e:	4b0f      	ldr	r3, [pc, #60]	; (800fe6c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	429a      	cmp	r2, r3
 800fe34:	d903      	bls.n	800fe3e <vTaskPriorityDisinheritAfterTimeout+0xce>
 800fe36:	69bb      	ldr	r3, [r7, #24]
 800fe38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe3a:	4a0c      	ldr	r2, [pc, #48]	; (800fe6c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800fe3c:	6013      	str	r3, [r2, #0]
 800fe3e:	69bb      	ldr	r3, [r7, #24]
 800fe40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe42:	4613      	mov	r3, r2
 800fe44:	009b      	lsls	r3, r3, #2
 800fe46:	4413      	add	r3, r2
 800fe48:	009b      	lsls	r3, r3, #2
 800fe4a:	4a07      	ldr	r2, [pc, #28]	; (800fe68 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800fe4c:	441a      	add	r2, r3
 800fe4e:	69bb      	ldr	r3, [r7, #24]
 800fe50:	3304      	adds	r3, #4
 800fe52:	4619      	mov	r1, r3
 800fe54:	4610      	mov	r0, r2
 800fe56:	f7fd ff98 	bl	800dd8a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fe5a:	bf00      	nop
 800fe5c:	3720      	adds	r7, #32
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	bd80      	pop	{r7, pc}
 800fe62:	bf00      	nop
 800fe64:	20000608 	.word	0x20000608
 800fe68:	2000060c 	.word	0x2000060c
 800fe6c:	20000ae8 	.word	0x20000ae8

0800fe70 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800fe70:	b480      	push	{r7}
 800fe72:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800fe74:	4b07      	ldr	r3, [pc, #28]	; (800fe94 <pvTaskIncrementMutexHeldCount+0x24>)
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d004      	beq.n	800fe86 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800fe7c:	4b05      	ldr	r3, [pc, #20]	; (800fe94 <pvTaskIncrementMutexHeldCount+0x24>)
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800fe82:	3201      	adds	r2, #1
 800fe84:	665a      	str	r2, [r3, #100]	; 0x64
		}

		return pxCurrentTCB;
 800fe86:	4b03      	ldr	r3, [pc, #12]	; (800fe94 <pvTaskIncrementMutexHeldCount+0x24>)
 800fe88:	681b      	ldr	r3, [r3, #0]
	}
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe92:	4770      	bx	lr
 800fe94:	20000608 	.word	0x20000608

0800fe98 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b084      	sub	sp, #16
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
 800fea0:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800fea2:	f000 fd93 	bl	80109cc <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800fea6:	4b1e      	ldr	r3, [pc, #120]	; (800ff20 <ulTaskNotifyTake+0x88>)
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800feac:	2b00      	cmp	r3, #0
 800feae:	d113      	bne.n	800fed8 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800feb0:	4b1b      	ldr	r3, [pc, #108]	; (800ff20 <ulTaskNotifyTake+0x88>)
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	2201      	movs	r2, #1
 800feb6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

				if( xTicksToWait > ( TickType_t ) 0 )
 800feba:	683b      	ldr	r3, [r7, #0]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d00b      	beq.n	800fed8 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fec0:	2101      	movs	r1, #1
 800fec2:	6838      	ldr	r0, [r7, #0]
 800fec4:	f000 f8c0 	bl	8010048 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800fec8:	4b16      	ldr	r3, [pc, #88]	; (800ff24 <ulTaskNotifyTake+0x8c>)
 800feca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fece:	601a      	str	r2, [r3, #0]
 800fed0:	f3bf 8f4f 	dsb	sy
 800fed4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800fed8:	f000 fda6 	bl	8010a28 <vPortExitCritical>

		taskENTER_CRITICAL();
 800fedc:	f000 fd76 	bl	80109cc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800fee0:	4b0f      	ldr	r3, [pc, #60]	; (800ff20 <ulTaskNotifyTake+0x88>)
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fee6:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d00c      	beq.n	800ff08 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d004      	beq.n	800fefe <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800fef4:	4b0a      	ldr	r3, [pc, #40]	; (800ff20 <ulTaskNotifyTake+0x88>)
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	2200      	movs	r2, #0
 800fefa:	671a      	str	r2, [r3, #112]	; 0x70
 800fefc:	e004      	b.n	800ff08 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800fefe:	4b08      	ldr	r3, [pc, #32]	; (800ff20 <ulTaskNotifyTake+0x88>)
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	68fa      	ldr	r2, [r7, #12]
 800ff04:	3a01      	subs	r2, #1
 800ff06:	671a      	str	r2, [r3, #112]	; 0x70
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ff08:	4b05      	ldr	r3, [pc, #20]	; (800ff20 <ulTaskNotifyTake+0x88>)
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		}
		taskEXIT_CRITICAL();
 800ff12:	f000 fd89 	bl	8010a28 <vPortExitCritical>

		return ulReturn;
 800ff16:	68fb      	ldr	r3, [r7, #12]
	}
 800ff18:	4618      	mov	r0, r3
 800ff1a:	3710      	adds	r7, #16
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	bd80      	pop	{r7, pc}
 800ff20:	20000608 	.word	0x20000608
 800ff24:	e000ed04 	.word	0xe000ed04

0800ff28 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b08a      	sub	sp, #40	; 0x28
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
 800ff30:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d109      	bne.n	800ff4c <vTaskNotifyGiveFromISR+0x24>
 800ff38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff3c:	f383 8811 	msr	BASEPRI, r3
 800ff40:	f3bf 8f6f 	isb	sy
 800ff44:	f3bf 8f4f 	dsb	sy
 800ff48:	61bb      	str	r3, [r7, #24]
 800ff4a:	e7fe      	b.n	800ff4a <vTaskNotifyGiveFromISR+0x22>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ff4c:	f000 fe1a 	bl	8010b84 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 800ff54:	f3ef 8211 	mrs	r2, BASEPRI
 800ff58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff5c:	f383 8811 	msr	BASEPRI, r3
 800ff60:	f3bf 8f6f 	isb	sy
 800ff64:	f3bf 8f4f 	dsb	sy
 800ff68:	617a      	str	r2, [r7, #20]
 800ff6a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ff6c:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ff6e:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ff70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff72:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ff76:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ff78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff7a:	2202      	movs	r2, #2
 800ff7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800ff80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff84:	1c5a      	adds	r2, r3, #1
 800ff86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff88:	671a      	str	r2, [r3, #112]	; 0x70

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ff8a:	7ffb      	ldrb	r3, [r7, #31]
 800ff8c:	2b01      	cmp	r3, #1
 800ff8e:	d145      	bne.n	801001c <vTaskNotifyGiveFromISR+0xf4>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800ff90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d009      	beq.n	800ffac <vTaskNotifyGiveFromISR+0x84>
	__asm volatile
 800ff98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff9c:	f383 8811 	msr	BASEPRI, r3
 800ffa0:	f3bf 8f6f 	isb	sy
 800ffa4:	f3bf 8f4f 	dsb	sy
 800ffa8:	60fb      	str	r3, [r7, #12]
 800ffaa:	e7fe      	b.n	800ffaa <vTaskNotifyGiveFromISR+0x82>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ffac:	4b20      	ldr	r3, [pc, #128]	; (8010030 <vTaskNotifyGiveFromISR+0x108>)
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d11d      	bne.n	800fff0 <vTaskNotifyGiveFromISR+0xc8>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ffb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffb6:	3304      	adds	r3, #4
 800ffb8:	4618      	mov	r0, r3
 800ffba:	f7fd ff43 	bl	800de44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ffbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffc2:	4b1c      	ldr	r3, [pc, #112]	; (8010034 <vTaskNotifyGiveFromISR+0x10c>)
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	429a      	cmp	r2, r3
 800ffc8:	d903      	bls.n	800ffd2 <vTaskNotifyGiveFromISR+0xaa>
 800ffca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffce:	4a19      	ldr	r2, [pc, #100]	; (8010034 <vTaskNotifyGiveFromISR+0x10c>)
 800ffd0:	6013      	str	r3, [r2, #0]
 800ffd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffd6:	4613      	mov	r3, r2
 800ffd8:	009b      	lsls	r3, r3, #2
 800ffda:	4413      	add	r3, r2
 800ffdc:	009b      	lsls	r3, r3, #2
 800ffde:	4a16      	ldr	r2, [pc, #88]	; (8010038 <vTaskNotifyGiveFromISR+0x110>)
 800ffe0:	441a      	add	r2, r3
 800ffe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffe4:	3304      	adds	r3, #4
 800ffe6:	4619      	mov	r1, r3
 800ffe8:	4610      	mov	r0, r2
 800ffea:	f7fd fece 	bl	800dd8a <vListInsertEnd>
 800ffee:	e005      	b.n	800fffc <vTaskNotifyGiveFromISR+0xd4>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800fff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fff2:	3318      	adds	r3, #24
 800fff4:	4619      	mov	r1, r3
 800fff6:	4811      	ldr	r0, [pc, #68]	; (801003c <vTaskNotifyGiveFromISR+0x114>)
 800fff8:	f7fd fec7 	bl	800dd8a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010000:	4b0f      	ldr	r3, [pc, #60]	; (8010040 <vTaskNotifyGiveFromISR+0x118>)
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010006:	429a      	cmp	r2, r3
 8010008:	d908      	bls.n	801001c <vTaskNotifyGiveFromISR+0xf4>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 801000a:	683b      	ldr	r3, [r7, #0]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d002      	beq.n	8010016 <vTaskNotifyGiveFromISR+0xee>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8010010:	683b      	ldr	r3, [r7, #0]
 8010012:	2201      	movs	r2, #1
 8010014:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8010016:	4b0b      	ldr	r3, [pc, #44]	; (8010044 <vTaskNotifyGiveFromISR+0x11c>)
 8010018:	2201      	movs	r2, #1
 801001a:	601a      	str	r2, [r3, #0]
 801001c:	6a3b      	ldr	r3, [r7, #32]
 801001e:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8010020:	68bb      	ldr	r3, [r7, #8]
 8010022:	f383 8811 	msr	BASEPRI, r3
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8010026:	bf00      	nop
 8010028:	3728      	adds	r7, #40	; 0x28
 801002a:	46bd      	mov	sp, r7
 801002c:	bd80      	pop	{r7, pc}
 801002e:	bf00      	nop
 8010030:	20000b08 	.word	0x20000b08
 8010034:	20000ae8 	.word	0x20000ae8
 8010038:	2000060c 	.word	0x2000060c
 801003c:	20000a9c 	.word	0x20000a9c
 8010040:	20000608 	.word	0x20000608
 8010044:	20000af4 	.word	0x20000af4

08010048 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010048:	b580      	push	{r7, lr}
 801004a:	b084      	sub	sp, #16
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]
 8010050:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010052:	4b21      	ldr	r3, [pc, #132]	; (80100d8 <prvAddCurrentTaskToDelayedList+0x90>)
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010058:	4b20      	ldr	r3, [pc, #128]	; (80100dc <prvAddCurrentTaskToDelayedList+0x94>)
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	3304      	adds	r3, #4
 801005e:	4618      	mov	r0, r3
 8010060:	f7fd fef0 	bl	800de44 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	f1b3 3fff 	cmp.w	r3, #4294967295
 801006a:	d10a      	bne.n	8010082 <prvAddCurrentTaskToDelayedList+0x3a>
 801006c:	683b      	ldr	r3, [r7, #0]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d007      	beq.n	8010082 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010072:	4b1a      	ldr	r3, [pc, #104]	; (80100dc <prvAddCurrentTaskToDelayedList+0x94>)
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	3304      	adds	r3, #4
 8010078:	4619      	mov	r1, r3
 801007a:	4819      	ldr	r0, [pc, #100]	; (80100e0 <prvAddCurrentTaskToDelayedList+0x98>)
 801007c:	f7fd fe85 	bl	800dd8a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010080:	e026      	b.n	80100d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010082:	68fa      	ldr	r2, [r7, #12]
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	4413      	add	r3, r2
 8010088:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801008a:	4b14      	ldr	r3, [pc, #80]	; (80100dc <prvAddCurrentTaskToDelayedList+0x94>)
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	68ba      	ldr	r2, [r7, #8]
 8010090:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010092:	68ba      	ldr	r2, [r7, #8]
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	429a      	cmp	r2, r3
 8010098:	d209      	bcs.n	80100ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801009a:	4b12      	ldr	r3, [pc, #72]	; (80100e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 801009c:	681a      	ldr	r2, [r3, #0]
 801009e:	4b0f      	ldr	r3, [pc, #60]	; (80100dc <prvAddCurrentTaskToDelayedList+0x94>)
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	3304      	adds	r3, #4
 80100a4:	4619      	mov	r1, r3
 80100a6:	4610      	mov	r0, r2
 80100a8:	f7fd fe93 	bl	800ddd2 <vListInsert>
}
 80100ac:	e010      	b.n	80100d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80100ae:	4b0e      	ldr	r3, [pc, #56]	; (80100e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80100b0:	681a      	ldr	r2, [r3, #0]
 80100b2:	4b0a      	ldr	r3, [pc, #40]	; (80100dc <prvAddCurrentTaskToDelayedList+0x94>)
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	3304      	adds	r3, #4
 80100b8:	4619      	mov	r1, r3
 80100ba:	4610      	mov	r0, r2
 80100bc:	f7fd fe89 	bl	800ddd2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80100c0:	4b0a      	ldr	r3, [pc, #40]	; (80100ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	68ba      	ldr	r2, [r7, #8]
 80100c6:	429a      	cmp	r2, r3
 80100c8:	d202      	bcs.n	80100d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80100ca:	4a08      	ldr	r2, [pc, #32]	; (80100ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80100cc:	68bb      	ldr	r3, [r7, #8]
 80100ce:	6013      	str	r3, [r2, #0]
}
 80100d0:	bf00      	nop
 80100d2:	3710      	adds	r7, #16
 80100d4:	46bd      	mov	sp, r7
 80100d6:	bd80      	pop	{r7, pc}
 80100d8:	20000ae4 	.word	0x20000ae4
 80100dc:	20000608 	.word	0x20000608
 80100e0:	20000ac8 	.word	0x20000ac8
 80100e4:	20000a98 	.word	0x20000a98
 80100e8:	20000a94 	.word	0x20000a94
 80100ec:	20000b00 	.word	0x20000b00

080100f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b08a      	sub	sp, #40	; 0x28
 80100f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80100f6:	2300      	movs	r3, #0
 80100f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80100fa:	f000 faff 	bl	80106fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80100fe:	4b1c      	ldr	r3, [pc, #112]	; (8010170 <xTimerCreateTimerTask+0x80>)
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	2b00      	cmp	r3, #0
 8010104:	d021      	beq.n	801014a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010106:	2300      	movs	r3, #0
 8010108:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801010a:	2300      	movs	r3, #0
 801010c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801010e:	1d3a      	adds	r2, r7, #4
 8010110:	f107 0108 	add.w	r1, r7, #8
 8010114:	f107 030c 	add.w	r3, r7, #12
 8010118:	4618      	mov	r0, r3
 801011a:	f7fd fdef 	bl	800dcfc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801011e:	6879      	ldr	r1, [r7, #4]
 8010120:	68bb      	ldr	r3, [r7, #8]
 8010122:	68fa      	ldr	r2, [r7, #12]
 8010124:	9202      	str	r2, [sp, #8]
 8010126:	9301      	str	r3, [sp, #4]
 8010128:	2302      	movs	r3, #2
 801012a:	9300      	str	r3, [sp, #0]
 801012c:	2300      	movs	r3, #0
 801012e:	460a      	mov	r2, r1
 8010130:	4910      	ldr	r1, [pc, #64]	; (8010174 <xTimerCreateTimerTask+0x84>)
 8010132:	4811      	ldr	r0, [pc, #68]	; (8010178 <xTimerCreateTimerTask+0x88>)
 8010134:	f7fe fec0 	bl	800eeb8 <xTaskCreateStatic>
 8010138:	4602      	mov	r2, r0
 801013a:	4b10      	ldr	r3, [pc, #64]	; (801017c <xTimerCreateTimerTask+0x8c>)
 801013c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801013e:	4b0f      	ldr	r3, [pc, #60]	; (801017c <xTimerCreateTimerTask+0x8c>)
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d001      	beq.n	801014a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010146:	2301      	movs	r3, #1
 8010148:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801014a:	697b      	ldr	r3, [r7, #20]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d109      	bne.n	8010164 <xTimerCreateTimerTask+0x74>
	__asm volatile
 8010150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010154:	f383 8811 	msr	BASEPRI, r3
 8010158:	f3bf 8f6f 	isb	sy
 801015c:	f3bf 8f4f 	dsb	sy
 8010160:	613b      	str	r3, [r7, #16]
 8010162:	e7fe      	b.n	8010162 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8010164:	697b      	ldr	r3, [r7, #20]
}
 8010166:	4618      	mov	r0, r3
 8010168:	3718      	adds	r7, #24
 801016a:	46bd      	mov	sp, r7
 801016c:	bd80      	pop	{r7, pc}
 801016e:	bf00      	nop
 8010170:	20000b44 	.word	0x20000b44
 8010174:	08011bf8 	.word	0x08011bf8
 8010178:	080102b1 	.word	0x080102b1
 801017c:	20000b48 	.word	0x20000b48

08010180 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010180:	b580      	push	{r7, lr}
 8010182:	b08a      	sub	sp, #40	; 0x28
 8010184:	af00      	add	r7, sp, #0
 8010186:	60f8      	str	r0, [r7, #12]
 8010188:	60b9      	str	r1, [r7, #8]
 801018a:	607a      	str	r2, [r7, #4]
 801018c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801018e:	2300      	movs	r3, #0
 8010190:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d109      	bne.n	80101ac <xTimerGenericCommand+0x2c>
 8010198:	f04f 0350 	mov.w	r3, #80	; 0x50
 801019c:	f383 8811 	msr	BASEPRI, r3
 80101a0:	f3bf 8f6f 	isb	sy
 80101a4:	f3bf 8f4f 	dsb	sy
 80101a8:	623b      	str	r3, [r7, #32]
 80101aa:	e7fe      	b.n	80101aa <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80101ac:	4b19      	ldr	r3, [pc, #100]	; (8010214 <xTimerGenericCommand+0x94>)
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d02a      	beq.n	801020a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80101b4:	68bb      	ldr	r3, [r7, #8]
 80101b6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80101c0:	68bb      	ldr	r3, [r7, #8]
 80101c2:	2b05      	cmp	r3, #5
 80101c4:	dc18      	bgt.n	80101f8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80101c6:	f7ff fce1 	bl	800fb8c <xTaskGetSchedulerState>
 80101ca:	4603      	mov	r3, r0
 80101cc:	2b02      	cmp	r3, #2
 80101ce:	d109      	bne.n	80101e4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80101d0:	4b10      	ldr	r3, [pc, #64]	; (8010214 <xTimerGenericCommand+0x94>)
 80101d2:	6818      	ldr	r0, [r3, #0]
 80101d4:	f107 0110 	add.w	r1, r7, #16
 80101d8:	2300      	movs	r3, #0
 80101da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80101dc:	f7fe f800 	bl	800e1e0 <xQueueGenericSend>
 80101e0:	6278      	str	r0, [r7, #36]	; 0x24
 80101e2:	e012      	b.n	801020a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80101e4:	4b0b      	ldr	r3, [pc, #44]	; (8010214 <xTimerGenericCommand+0x94>)
 80101e6:	6818      	ldr	r0, [r3, #0]
 80101e8:	f107 0110 	add.w	r1, r7, #16
 80101ec:	2300      	movs	r3, #0
 80101ee:	2200      	movs	r2, #0
 80101f0:	f7fd fff6 	bl	800e1e0 <xQueueGenericSend>
 80101f4:	6278      	str	r0, [r7, #36]	; 0x24
 80101f6:	e008      	b.n	801020a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80101f8:	4b06      	ldr	r3, [pc, #24]	; (8010214 <xTimerGenericCommand+0x94>)
 80101fa:	6818      	ldr	r0, [r3, #0]
 80101fc:	f107 0110 	add.w	r1, r7, #16
 8010200:	2300      	movs	r3, #0
 8010202:	683a      	ldr	r2, [r7, #0]
 8010204:	f7fe f8e6 	bl	800e3d4 <xQueueGenericSendFromISR>
 8010208:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801020a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801020c:	4618      	mov	r0, r3
 801020e:	3728      	adds	r7, #40	; 0x28
 8010210:	46bd      	mov	sp, r7
 8010212:	bd80      	pop	{r7, pc}
 8010214:	20000b44 	.word	0x20000b44

08010218 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010218:	b580      	push	{r7, lr}
 801021a:	b088      	sub	sp, #32
 801021c:	af02      	add	r7, sp, #8
 801021e:	6078      	str	r0, [r7, #4]
 8010220:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010222:	4b22      	ldr	r3, [pc, #136]	; (80102ac <prvProcessExpiredTimer+0x94>)
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	68db      	ldr	r3, [r3, #12]
 8010228:	68db      	ldr	r3, [r3, #12]
 801022a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801022c:	697b      	ldr	r3, [r7, #20]
 801022e:	3304      	adds	r3, #4
 8010230:	4618      	mov	r0, r3
 8010232:	f7fd fe07 	bl	800de44 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010236:	697b      	ldr	r3, [r7, #20]
 8010238:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801023c:	f003 0304 	and.w	r3, r3, #4
 8010240:	2b00      	cmp	r3, #0
 8010242:	d021      	beq.n	8010288 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010244:	697b      	ldr	r3, [r7, #20]
 8010246:	699a      	ldr	r2, [r3, #24]
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	18d1      	adds	r1, r2, r3
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	683a      	ldr	r2, [r7, #0]
 8010250:	6978      	ldr	r0, [r7, #20]
 8010252:	f000 f8d1 	bl	80103f8 <prvInsertTimerInActiveList>
 8010256:	4603      	mov	r3, r0
 8010258:	2b00      	cmp	r3, #0
 801025a:	d01e      	beq.n	801029a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801025c:	2300      	movs	r3, #0
 801025e:	9300      	str	r3, [sp, #0]
 8010260:	2300      	movs	r3, #0
 8010262:	687a      	ldr	r2, [r7, #4]
 8010264:	2100      	movs	r1, #0
 8010266:	6978      	ldr	r0, [r7, #20]
 8010268:	f7ff ff8a 	bl	8010180 <xTimerGenericCommand>
 801026c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801026e:	693b      	ldr	r3, [r7, #16]
 8010270:	2b00      	cmp	r3, #0
 8010272:	d112      	bne.n	801029a <prvProcessExpiredTimer+0x82>
 8010274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010278:	f383 8811 	msr	BASEPRI, r3
 801027c:	f3bf 8f6f 	isb	sy
 8010280:	f3bf 8f4f 	dsb	sy
 8010284:	60fb      	str	r3, [r7, #12]
 8010286:	e7fe      	b.n	8010286 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010288:	697b      	ldr	r3, [r7, #20]
 801028a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801028e:	f023 0301 	bic.w	r3, r3, #1
 8010292:	b2da      	uxtb	r2, r3
 8010294:	697b      	ldr	r3, [r7, #20]
 8010296:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801029a:	697b      	ldr	r3, [r7, #20]
 801029c:	6a1b      	ldr	r3, [r3, #32]
 801029e:	6978      	ldr	r0, [r7, #20]
 80102a0:	4798      	blx	r3
}
 80102a2:	bf00      	nop
 80102a4:	3718      	adds	r7, #24
 80102a6:	46bd      	mov	sp, r7
 80102a8:	bd80      	pop	{r7, pc}
 80102aa:	bf00      	nop
 80102ac:	20000b3c 	.word	0x20000b3c

080102b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b084      	sub	sp, #16
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80102b8:	f107 0308 	add.w	r3, r7, #8
 80102bc:	4618      	mov	r0, r3
 80102be:	f000 f857 	bl	8010370 <prvGetNextExpireTime>
 80102c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80102c4:	68bb      	ldr	r3, [r7, #8]
 80102c6:	4619      	mov	r1, r3
 80102c8:	68f8      	ldr	r0, [r7, #12]
 80102ca:	f000 f803 	bl	80102d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80102ce:	f000 f8d5 	bl	801047c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80102d2:	e7f1      	b.n	80102b8 <prvTimerTask+0x8>

080102d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80102d4:	b580      	push	{r7, lr}
 80102d6:	b084      	sub	sp, #16
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
 80102dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80102de:	f7ff f82b 	bl	800f338 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80102e2:	f107 0308 	add.w	r3, r7, #8
 80102e6:	4618      	mov	r0, r3
 80102e8:	f000 f866 	bl	80103b8 <prvSampleTimeNow>
 80102ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80102ee:	68bb      	ldr	r3, [r7, #8]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d130      	bne.n	8010356 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80102f4:	683b      	ldr	r3, [r7, #0]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d10a      	bne.n	8010310 <prvProcessTimerOrBlockTask+0x3c>
 80102fa:	687a      	ldr	r2, [r7, #4]
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	429a      	cmp	r2, r3
 8010300:	d806      	bhi.n	8010310 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010302:	f7ff f827 	bl	800f354 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010306:	68f9      	ldr	r1, [r7, #12]
 8010308:	6878      	ldr	r0, [r7, #4]
 801030a:	f7ff ff85 	bl	8010218 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801030e:	e024      	b.n	801035a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010310:	683b      	ldr	r3, [r7, #0]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d008      	beq.n	8010328 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010316:	4b13      	ldr	r3, [pc, #76]	; (8010364 <prvProcessTimerOrBlockTask+0x90>)
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	2b00      	cmp	r3, #0
 801031e:	d101      	bne.n	8010324 <prvProcessTimerOrBlockTask+0x50>
 8010320:	2301      	movs	r3, #1
 8010322:	e000      	b.n	8010326 <prvProcessTimerOrBlockTask+0x52>
 8010324:	2300      	movs	r3, #0
 8010326:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010328:	4b0f      	ldr	r3, [pc, #60]	; (8010368 <prvProcessTimerOrBlockTask+0x94>)
 801032a:	6818      	ldr	r0, [r3, #0]
 801032c:	687a      	ldr	r2, [r7, #4]
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	1ad3      	subs	r3, r2, r3
 8010332:	683a      	ldr	r2, [r7, #0]
 8010334:	4619      	mov	r1, r3
 8010336:	f7fe fd8b 	bl	800ee50 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801033a:	f7ff f80b 	bl	800f354 <xTaskResumeAll>
 801033e:	4603      	mov	r3, r0
 8010340:	2b00      	cmp	r3, #0
 8010342:	d10a      	bne.n	801035a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010344:	4b09      	ldr	r3, [pc, #36]	; (801036c <prvProcessTimerOrBlockTask+0x98>)
 8010346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801034a:	601a      	str	r2, [r3, #0]
 801034c:	f3bf 8f4f 	dsb	sy
 8010350:	f3bf 8f6f 	isb	sy
}
 8010354:	e001      	b.n	801035a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010356:	f7fe fffd 	bl	800f354 <xTaskResumeAll>
}
 801035a:	bf00      	nop
 801035c:	3710      	adds	r7, #16
 801035e:	46bd      	mov	sp, r7
 8010360:	bd80      	pop	{r7, pc}
 8010362:	bf00      	nop
 8010364:	20000b40 	.word	0x20000b40
 8010368:	20000b44 	.word	0x20000b44
 801036c:	e000ed04 	.word	0xe000ed04

08010370 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010370:	b480      	push	{r7}
 8010372:	b085      	sub	sp, #20
 8010374:	af00      	add	r7, sp, #0
 8010376:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010378:	4b0e      	ldr	r3, [pc, #56]	; (80103b4 <prvGetNextExpireTime+0x44>)
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d101      	bne.n	8010386 <prvGetNextExpireTime+0x16>
 8010382:	2201      	movs	r2, #1
 8010384:	e000      	b.n	8010388 <prvGetNextExpireTime+0x18>
 8010386:	2200      	movs	r2, #0
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d105      	bne.n	80103a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010394:	4b07      	ldr	r3, [pc, #28]	; (80103b4 <prvGetNextExpireTime+0x44>)
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	68db      	ldr	r3, [r3, #12]
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	60fb      	str	r3, [r7, #12]
 801039e:	e001      	b.n	80103a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80103a0:	2300      	movs	r3, #0
 80103a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80103a4:	68fb      	ldr	r3, [r7, #12]
}
 80103a6:	4618      	mov	r0, r3
 80103a8:	3714      	adds	r7, #20
 80103aa:	46bd      	mov	sp, r7
 80103ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b0:	4770      	bx	lr
 80103b2:	bf00      	nop
 80103b4:	20000b3c 	.word	0x20000b3c

080103b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b084      	sub	sp, #16
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80103c0:	f7ff f864 	bl	800f48c <xTaskGetTickCount>
 80103c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80103c6:	4b0b      	ldr	r3, [pc, #44]	; (80103f4 <prvSampleTimeNow+0x3c>)
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	68fa      	ldr	r2, [r7, #12]
 80103cc:	429a      	cmp	r2, r3
 80103ce:	d205      	bcs.n	80103dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80103d0:	f000 f930 	bl	8010634 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	2201      	movs	r2, #1
 80103d8:	601a      	str	r2, [r3, #0]
 80103da:	e002      	b.n	80103e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	2200      	movs	r2, #0
 80103e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80103e2:	4a04      	ldr	r2, [pc, #16]	; (80103f4 <prvSampleTimeNow+0x3c>)
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80103e8:	68fb      	ldr	r3, [r7, #12]
}
 80103ea:	4618      	mov	r0, r3
 80103ec:	3710      	adds	r7, #16
 80103ee:	46bd      	mov	sp, r7
 80103f0:	bd80      	pop	{r7, pc}
 80103f2:	bf00      	nop
 80103f4:	20000b4c 	.word	0x20000b4c

080103f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b086      	sub	sp, #24
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	60f8      	str	r0, [r7, #12]
 8010400:	60b9      	str	r1, [r7, #8]
 8010402:	607a      	str	r2, [r7, #4]
 8010404:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010406:	2300      	movs	r3, #0
 8010408:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	68ba      	ldr	r2, [r7, #8]
 801040e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	68fa      	ldr	r2, [r7, #12]
 8010414:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010416:	68ba      	ldr	r2, [r7, #8]
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	429a      	cmp	r2, r3
 801041c:	d812      	bhi.n	8010444 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801041e:	687a      	ldr	r2, [r7, #4]
 8010420:	683b      	ldr	r3, [r7, #0]
 8010422:	1ad2      	subs	r2, r2, r3
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	699b      	ldr	r3, [r3, #24]
 8010428:	429a      	cmp	r2, r3
 801042a:	d302      	bcc.n	8010432 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801042c:	2301      	movs	r3, #1
 801042e:	617b      	str	r3, [r7, #20]
 8010430:	e01b      	b.n	801046a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010432:	4b10      	ldr	r3, [pc, #64]	; (8010474 <prvInsertTimerInActiveList+0x7c>)
 8010434:	681a      	ldr	r2, [r3, #0]
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	3304      	adds	r3, #4
 801043a:	4619      	mov	r1, r3
 801043c:	4610      	mov	r0, r2
 801043e:	f7fd fcc8 	bl	800ddd2 <vListInsert>
 8010442:	e012      	b.n	801046a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010444:	687a      	ldr	r2, [r7, #4]
 8010446:	683b      	ldr	r3, [r7, #0]
 8010448:	429a      	cmp	r2, r3
 801044a:	d206      	bcs.n	801045a <prvInsertTimerInActiveList+0x62>
 801044c:	68ba      	ldr	r2, [r7, #8]
 801044e:	683b      	ldr	r3, [r7, #0]
 8010450:	429a      	cmp	r2, r3
 8010452:	d302      	bcc.n	801045a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010454:	2301      	movs	r3, #1
 8010456:	617b      	str	r3, [r7, #20]
 8010458:	e007      	b.n	801046a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801045a:	4b07      	ldr	r3, [pc, #28]	; (8010478 <prvInsertTimerInActiveList+0x80>)
 801045c:	681a      	ldr	r2, [r3, #0]
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	3304      	adds	r3, #4
 8010462:	4619      	mov	r1, r3
 8010464:	4610      	mov	r0, r2
 8010466:	f7fd fcb4 	bl	800ddd2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801046a:	697b      	ldr	r3, [r7, #20]
}
 801046c:	4618      	mov	r0, r3
 801046e:	3718      	adds	r7, #24
 8010470:	46bd      	mov	sp, r7
 8010472:	bd80      	pop	{r7, pc}
 8010474:	20000b40 	.word	0x20000b40
 8010478:	20000b3c 	.word	0x20000b3c

0801047c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801047c:	b580      	push	{r7, lr}
 801047e:	b08e      	sub	sp, #56	; 0x38
 8010480:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010482:	e0c6      	b.n	8010612 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	2b00      	cmp	r3, #0
 8010488:	da17      	bge.n	80104ba <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801048a:	1d3b      	adds	r3, r7, #4
 801048c:	3304      	adds	r3, #4
 801048e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010492:	2b00      	cmp	r3, #0
 8010494:	d109      	bne.n	80104aa <prvProcessReceivedCommands+0x2e>
 8010496:	f04f 0350 	mov.w	r3, #80	; 0x50
 801049a:	f383 8811 	msr	BASEPRI, r3
 801049e:	f3bf 8f6f 	isb	sy
 80104a2:	f3bf 8f4f 	dsb	sy
 80104a6:	61fb      	str	r3, [r7, #28]
 80104a8:	e7fe      	b.n	80104a8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80104aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80104b0:	6850      	ldr	r0, [r2, #4]
 80104b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80104b4:	6892      	ldr	r2, [r2, #8]
 80104b6:	4611      	mov	r1, r2
 80104b8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	f2c0 80a7 	blt.w	8010610 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80104c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104c8:	695b      	ldr	r3, [r3, #20]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d004      	beq.n	80104d8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80104ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104d0:	3304      	adds	r3, #4
 80104d2:	4618      	mov	r0, r3
 80104d4:	f7fd fcb6 	bl	800de44 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80104d8:	463b      	mov	r3, r7
 80104da:	4618      	mov	r0, r3
 80104dc:	f7ff ff6c 	bl	80103b8 <prvSampleTimeNow>
 80104e0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	2b09      	cmp	r3, #9
 80104e6:	f200 8094 	bhi.w	8010612 <prvProcessReceivedCommands+0x196>
 80104ea:	a201      	add	r2, pc, #4	; (adr r2, 80104f0 <prvProcessReceivedCommands+0x74>)
 80104ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104f0:	08010519 	.word	0x08010519
 80104f4:	08010519 	.word	0x08010519
 80104f8:	08010519 	.word	0x08010519
 80104fc:	0801058b 	.word	0x0801058b
 8010500:	0801059f 	.word	0x0801059f
 8010504:	080105e7 	.word	0x080105e7
 8010508:	08010519 	.word	0x08010519
 801050c:	08010519 	.word	0x08010519
 8010510:	0801058b 	.word	0x0801058b
 8010514:	0801059f 	.word	0x0801059f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801051a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801051e:	f043 0301 	orr.w	r3, r3, #1
 8010522:	b2da      	uxtb	r2, r3
 8010524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010526:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801052a:	68ba      	ldr	r2, [r7, #8]
 801052c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801052e:	699b      	ldr	r3, [r3, #24]
 8010530:	18d1      	adds	r1, r2, r3
 8010532:	68bb      	ldr	r3, [r7, #8]
 8010534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010536:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010538:	f7ff ff5e 	bl	80103f8 <prvInsertTimerInActiveList>
 801053c:	4603      	mov	r3, r0
 801053e:	2b00      	cmp	r3, #0
 8010540:	d067      	beq.n	8010612 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010544:	6a1b      	ldr	r3, [r3, #32]
 8010546:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010548:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801054a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801054c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010550:	f003 0304 	and.w	r3, r3, #4
 8010554:	2b00      	cmp	r3, #0
 8010556:	d05c      	beq.n	8010612 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010558:	68ba      	ldr	r2, [r7, #8]
 801055a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801055c:	699b      	ldr	r3, [r3, #24]
 801055e:	441a      	add	r2, r3
 8010560:	2300      	movs	r3, #0
 8010562:	9300      	str	r3, [sp, #0]
 8010564:	2300      	movs	r3, #0
 8010566:	2100      	movs	r1, #0
 8010568:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801056a:	f7ff fe09 	bl	8010180 <xTimerGenericCommand>
 801056e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010570:	6a3b      	ldr	r3, [r7, #32]
 8010572:	2b00      	cmp	r3, #0
 8010574:	d14d      	bne.n	8010612 <prvProcessReceivedCommands+0x196>
 8010576:	f04f 0350 	mov.w	r3, #80	; 0x50
 801057a:	f383 8811 	msr	BASEPRI, r3
 801057e:	f3bf 8f6f 	isb	sy
 8010582:	f3bf 8f4f 	dsb	sy
 8010586:	61bb      	str	r3, [r7, #24]
 8010588:	e7fe      	b.n	8010588 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801058a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801058c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010590:	f023 0301 	bic.w	r3, r3, #1
 8010594:	b2da      	uxtb	r2, r3
 8010596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010598:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801059c:	e039      	b.n	8010612 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801059e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80105a4:	f043 0301 	orr.w	r3, r3, #1
 80105a8:	b2da      	uxtb	r2, r3
 80105aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80105b0:	68ba      	ldr	r2, [r7, #8]
 80105b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105b4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80105b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105b8:	699b      	ldr	r3, [r3, #24]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d109      	bne.n	80105d2 <prvProcessReceivedCommands+0x156>
 80105be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105c2:	f383 8811 	msr	BASEPRI, r3
 80105c6:	f3bf 8f6f 	isb	sy
 80105ca:	f3bf 8f4f 	dsb	sy
 80105ce:	617b      	str	r3, [r7, #20]
 80105d0:	e7fe      	b.n	80105d0 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80105d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105d4:	699a      	ldr	r2, [r3, #24]
 80105d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105d8:	18d1      	adds	r1, r2, r3
 80105da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80105de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80105e0:	f7ff ff0a 	bl	80103f8 <prvInsertTimerInActiveList>
					break;
 80105e4:	e015      	b.n	8010612 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80105e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80105ec:	f003 0302 	and.w	r3, r3, #2
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d103      	bne.n	80105fc <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80105f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80105f6:	f000 fbc9 	bl	8010d8c <vPortFree>
 80105fa:	e00a      	b.n	8010612 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80105fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010602:	f023 0301 	bic.w	r3, r3, #1
 8010606:	b2da      	uxtb	r2, r3
 8010608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801060a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801060e:	e000      	b.n	8010612 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010610:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010612:	4b07      	ldr	r3, [pc, #28]	; (8010630 <prvProcessReceivedCommands+0x1b4>)
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	1d39      	adds	r1, r7, #4
 8010618:	2200      	movs	r2, #0
 801061a:	4618      	mov	r0, r3
 801061c:	f7fd fff8 	bl	800e610 <xQueueReceive>
 8010620:	4603      	mov	r3, r0
 8010622:	2b00      	cmp	r3, #0
 8010624:	f47f af2e 	bne.w	8010484 <prvProcessReceivedCommands+0x8>
	}
}
 8010628:	bf00      	nop
 801062a:	3730      	adds	r7, #48	; 0x30
 801062c:	46bd      	mov	sp, r7
 801062e:	bd80      	pop	{r7, pc}
 8010630:	20000b44 	.word	0x20000b44

08010634 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010634:	b580      	push	{r7, lr}
 8010636:	b088      	sub	sp, #32
 8010638:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801063a:	e047      	b.n	80106cc <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801063c:	4b2d      	ldr	r3, [pc, #180]	; (80106f4 <prvSwitchTimerLists+0xc0>)
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	68db      	ldr	r3, [r3, #12]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010646:	4b2b      	ldr	r3, [pc, #172]	; (80106f4 <prvSwitchTimerLists+0xc0>)
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	68db      	ldr	r3, [r3, #12]
 801064c:	68db      	ldr	r3, [r3, #12]
 801064e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	3304      	adds	r3, #4
 8010654:	4618      	mov	r0, r3
 8010656:	f7fd fbf5 	bl	800de44 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	6a1b      	ldr	r3, [r3, #32]
 801065e:	68f8      	ldr	r0, [r7, #12]
 8010660:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010668:	f003 0304 	and.w	r3, r3, #4
 801066c:	2b00      	cmp	r3, #0
 801066e:	d02d      	beq.n	80106cc <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	699b      	ldr	r3, [r3, #24]
 8010674:	693a      	ldr	r2, [r7, #16]
 8010676:	4413      	add	r3, r2
 8010678:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801067a:	68ba      	ldr	r2, [r7, #8]
 801067c:	693b      	ldr	r3, [r7, #16]
 801067e:	429a      	cmp	r2, r3
 8010680:	d90e      	bls.n	80106a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	68ba      	ldr	r2, [r7, #8]
 8010686:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	68fa      	ldr	r2, [r7, #12]
 801068c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801068e:	4b19      	ldr	r3, [pc, #100]	; (80106f4 <prvSwitchTimerLists+0xc0>)
 8010690:	681a      	ldr	r2, [r3, #0]
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	3304      	adds	r3, #4
 8010696:	4619      	mov	r1, r3
 8010698:	4610      	mov	r0, r2
 801069a:	f7fd fb9a 	bl	800ddd2 <vListInsert>
 801069e:	e015      	b.n	80106cc <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80106a0:	2300      	movs	r3, #0
 80106a2:	9300      	str	r3, [sp, #0]
 80106a4:	2300      	movs	r3, #0
 80106a6:	693a      	ldr	r2, [r7, #16]
 80106a8:	2100      	movs	r1, #0
 80106aa:	68f8      	ldr	r0, [r7, #12]
 80106ac:	f7ff fd68 	bl	8010180 <xTimerGenericCommand>
 80106b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d109      	bne.n	80106cc <prvSwitchTimerLists+0x98>
 80106b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106bc:	f383 8811 	msr	BASEPRI, r3
 80106c0:	f3bf 8f6f 	isb	sy
 80106c4:	f3bf 8f4f 	dsb	sy
 80106c8:	603b      	str	r3, [r7, #0]
 80106ca:	e7fe      	b.n	80106ca <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80106cc:	4b09      	ldr	r3, [pc, #36]	; (80106f4 <prvSwitchTimerLists+0xc0>)
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d1b2      	bne.n	801063c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80106d6:	4b07      	ldr	r3, [pc, #28]	; (80106f4 <prvSwitchTimerLists+0xc0>)
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80106dc:	4b06      	ldr	r3, [pc, #24]	; (80106f8 <prvSwitchTimerLists+0xc4>)
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	4a04      	ldr	r2, [pc, #16]	; (80106f4 <prvSwitchTimerLists+0xc0>)
 80106e2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80106e4:	4a04      	ldr	r2, [pc, #16]	; (80106f8 <prvSwitchTimerLists+0xc4>)
 80106e6:	697b      	ldr	r3, [r7, #20]
 80106e8:	6013      	str	r3, [r2, #0]
}
 80106ea:	bf00      	nop
 80106ec:	3718      	adds	r7, #24
 80106ee:	46bd      	mov	sp, r7
 80106f0:	bd80      	pop	{r7, pc}
 80106f2:	bf00      	nop
 80106f4:	20000b3c 	.word	0x20000b3c
 80106f8:	20000b40 	.word	0x20000b40

080106fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b082      	sub	sp, #8
 8010700:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010702:	f000 f963 	bl	80109cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010706:	4b15      	ldr	r3, [pc, #84]	; (801075c <prvCheckForValidListAndQueue+0x60>)
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d120      	bne.n	8010750 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801070e:	4814      	ldr	r0, [pc, #80]	; (8010760 <prvCheckForValidListAndQueue+0x64>)
 8010710:	f7fd fb0e 	bl	800dd30 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010714:	4813      	ldr	r0, [pc, #76]	; (8010764 <prvCheckForValidListAndQueue+0x68>)
 8010716:	f7fd fb0b 	bl	800dd30 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801071a:	4b13      	ldr	r3, [pc, #76]	; (8010768 <prvCheckForValidListAndQueue+0x6c>)
 801071c:	4a10      	ldr	r2, [pc, #64]	; (8010760 <prvCheckForValidListAndQueue+0x64>)
 801071e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010720:	4b12      	ldr	r3, [pc, #72]	; (801076c <prvCheckForValidListAndQueue+0x70>)
 8010722:	4a10      	ldr	r2, [pc, #64]	; (8010764 <prvCheckForValidListAndQueue+0x68>)
 8010724:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010726:	2300      	movs	r3, #0
 8010728:	9300      	str	r3, [sp, #0]
 801072a:	4b11      	ldr	r3, [pc, #68]	; (8010770 <prvCheckForValidListAndQueue+0x74>)
 801072c:	4a11      	ldr	r2, [pc, #68]	; (8010774 <prvCheckForValidListAndQueue+0x78>)
 801072e:	2110      	movs	r1, #16
 8010730:	200a      	movs	r0, #10
 8010732:	f7fd fc19 	bl	800df68 <xQueueGenericCreateStatic>
 8010736:	4602      	mov	r2, r0
 8010738:	4b08      	ldr	r3, [pc, #32]	; (801075c <prvCheckForValidListAndQueue+0x60>)
 801073a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801073c:	4b07      	ldr	r3, [pc, #28]	; (801075c <prvCheckForValidListAndQueue+0x60>)
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	2b00      	cmp	r3, #0
 8010742:	d005      	beq.n	8010750 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010744:	4b05      	ldr	r3, [pc, #20]	; (801075c <prvCheckForValidListAndQueue+0x60>)
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	490b      	ldr	r1, [pc, #44]	; (8010778 <prvCheckForValidListAndQueue+0x7c>)
 801074a:	4618      	mov	r0, r3
 801074c:	f7fe fb2e 	bl	800edac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010750:	f000 f96a 	bl	8010a28 <vPortExitCritical>
}
 8010754:	bf00      	nop
 8010756:	46bd      	mov	sp, r7
 8010758:	bd80      	pop	{r7, pc}
 801075a:	bf00      	nop
 801075c:	20000b44 	.word	0x20000b44
 8010760:	20000b14 	.word	0x20000b14
 8010764:	20000b28 	.word	0x20000b28
 8010768:	20000b3c 	.word	0x20000b3c
 801076c:	20000b40 	.word	0x20000b40
 8010770:	20000bf0 	.word	0x20000bf0
 8010774:	20000b50 	.word	0x20000b50
 8010778:	08011c00 	.word	0x08011c00

0801077c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801077c:	b480      	push	{r7}
 801077e:	b085      	sub	sp, #20
 8010780:	af00      	add	r7, sp, #0
 8010782:	60f8      	str	r0, [r7, #12]
 8010784:	60b9      	str	r1, [r7, #8]
 8010786:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	3b04      	subs	r3, #4
 801078c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010794:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	3b04      	subs	r3, #4
 801079a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801079c:	68bb      	ldr	r3, [r7, #8]
 801079e:	f023 0201 	bic.w	r2, r3, #1
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	3b04      	subs	r3, #4
 80107aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80107ac:	4a0c      	ldr	r2, [pc, #48]	; (80107e0 <pxPortInitialiseStack+0x64>)
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	3b14      	subs	r3, #20
 80107b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80107b8:	687a      	ldr	r2, [r7, #4]
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	3b04      	subs	r3, #4
 80107c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	f06f 0202 	mvn.w	r2, #2
 80107ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	3b20      	subs	r3, #32
 80107d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80107d2:	68fb      	ldr	r3, [r7, #12]
}
 80107d4:	4618      	mov	r0, r3
 80107d6:	3714      	adds	r7, #20
 80107d8:	46bd      	mov	sp, r7
 80107da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107de:	4770      	bx	lr
 80107e0:	080107e5 	.word	0x080107e5

080107e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80107e4:	b480      	push	{r7}
 80107e6:	b085      	sub	sp, #20
 80107e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80107ea:	2300      	movs	r3, #0
 80107ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80107ee:	4b11      	ldr	r3, [pc, #68]	; (8010834 <prvTaskExitError+0x50>)
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107f6:	d009      	beq.n	801080c <prvTaskExitError+0x28>
 80107f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107fc:	f383 8811 	msr	BASEPRI, r3
 8010800:	f3bf 8f6f 	isb	sy
 8010804:	f3bf 8f4f 	dsb	sy
 8010808:	60fb      	str	r3, [r7, #12]
 801080a:	e7fe      	b.n	801080a <prvTaskExitError+0x26>
 801080c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010810:	f383 8811 	msr	BASEPRI, r3
 8010814:	f3bf 8f6f 	isb	sy
 8010818:	f3bf 8f4f 	dsb	sy
 801081c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801081e:	bf00      	nop
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d0fc      	beq.n	8010820 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010826:	bf00      	nop
 8010828:	3714      	adds	r7, #20
 801082a:	46bd      	mov	sp, r7
 801082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010830:	4770      	bx	lr
 8010832:	bf00      	nop
 8010834:	2000002c 	.word	0x2000002c
	...

08010840 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010840:	4b07      	ldr	r3, [pc, #28]	; (8010860 <pxCurrentTCBConst2>)
 8010842:	6819      	ldr	r1, [r3, #0]
 8010844:	6808      	ldr	r0, [r1, #0]
 8010846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801084a:	f380 8809 	msr	PSP, r0
 801084e:	f3bf 8f6f 	isb	sy
 8010852:	f04f 0000 	mov.w	r0, #0
 8010856:	f380 8811 	msr	BASEPRI, r0
 801085a:	4770      	bx	lr
 801085c:	f3af 8000 	nop.w

08010860 <pxCurrentTCBConst2>:
 8010860:	20000608 	.word	0x20000608
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010864:	bf00      	nop
 8010866:	bf00      	nop

08010868 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010868:	4808      	ldr	r0, [pc, #32]	; (801088c <prvPortStartFirstTask+0x24>)
 801086a:	6800      	ldr	r0, [r0, #0]
 801086c:	6800      	ldr	r0, [r0, #0]
 801086e:	f380 8808 	msr	MSP, r0
 8010872:	f04f 0000 	mov.w	r0, #0
 8010876:	f380 8814 	msr	CONTROL, r0
 801087a:	b662      	cpsie	i
 801087c:	b661      	cpsie	f
 801087e:	f3bf 8f4f 	dsb	sy
 8010882:	f3bf 8f6f 	isb	sy
 8010886:	df00      	svc	0
 8010888:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801088a:	bf00      	nop
 801088c:	e000ed08 	.word	0xe000ed08

08010890 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010890:	b580      	push	{r7, lr}
 8010892:	b086      	sub	sp, #24
 8010894:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010896:	4b44      	ldr	r3, [pc, #272]	; (80109a8 <xPortStartScheduler+0x118>)
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	4a44      	ldr	r2, [pc, #272]	; (80109ac <xPortStartScheduler+0x11c>)
 801089c:	4293      	cmp	r3, r2
 801089e:	d109      	bne.n	80108b4 <xPortStartScheduler+0x24>
 80108a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108a4:	f383 8811 	msr	BASEPRI, r3
 80108a8:	f3bf 8f6f 	isb	sy
 80108ac:	f3bf 8f4f 	dsb	sy
 80108b0:	613b      	str	r3, [r7, #16]
 80108b2:	e7fe      	b.n	80108b2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80108b4:	4b3c      	ldr	r3, [pc, #240]	; (80109a8 <xPortStartScheduler+0x118>)
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	4a3d      	ldr	r2, [pc, #244]	; (80109b0 <xPortStartScheduler+0x120>)
 80108ba:	4293      	cmp	r3, r2
 80108bc:	d109      	bne.n	80108d2 <xPortStartScheduler+0x42>
 80108be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108c2:	f383 8811 	msr	BASEPRI, r3
 80108c6:	f3bf 8f6f 	isb	sy
 80108ca:	f3bf 8f4f 	dsb	sy
 80108ce:	60fb      	str	r3, [r7, #12]
 80108d0:	e7fe      	b.n	80108d0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80108d2:	4b38      	ldr	r3, [pc, #224]	; (80109b4 <xPortStartScheduler+0x124>)
 80108d4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80108d6:	697b      	ldr	r3, [r7, #20]
 80108d8:	781b      	ldrb	r3, [r3, #0]
 80108da:	b2db      	uxtb	r3, r3
 80108dc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80108de:	697b      	ldr	r3, [r7, #20]
 80108e0:	22ff      	movs	r2, #255	; 0xff
 80108e2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80108e4:	697b      	ldr	r3, [r7, #20]
 80108e6:	781b      	ldrb	r3, [r3, #0]
 80108e8:	b2db      	uxtb	r3, r3
 80108ea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80108ec:	78fb      	ldrb	r3, [r7, #3]
 80108ee:	b2db      	uxtb	r3, r3
 80108f0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80108f4:	b2da      	uxtb	r2, r3
 80108f6:	4b30      	ldr	r3, [pc, #192]	; (80109b8 <xPortStartScheduler+0x128>)
 80108f8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80108fa:	4b30      	ldr	r3, [pc, #192]	; (80109bc <xPortStartScheduler+0x12c>)
 80108fc:	2207      	movs	r2, #7
 80108fe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010900:	e009      	b.n	8010916 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8010902:	4b2e      	ldr	r3, [pc, #184]	; (80109bc <xPortStartScheduler+0x12c>)
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	3b01      	subs	r3, #1
 8010908:	4a2c      	ldr	r2, [pc, #176]	; (80109bc <xPortStartScheduler+0x12c>)
 801090a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801090c:	78fb      	ldrb	r3, [r7, #3]
 801090e:	b2db      	uxtb	r3, r3
 8010910:	005b      	lsls	r3, r3, #1
 8010912:	b2db      	uxtb	r3, r3
 8010914:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010916:	78fb      	ldrb	r3, [r7, #3]
 8010918:	b2db      	uxtb	r3, r3
 801091a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801091e:	2b80      	cmp	r3, #128	; 0x80
 8010920:	d0ef      	beq.n	8010902 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010922:	4b26      	ldr	r3, [pc, #152]	; (80109bc <xPortStartScheduler+0x12c>)
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	f1c3 0307 	rsb	r3, r3, #7
 801092a:	2b04      	cmp	r3, #4
 801092c:	d009      	beq.n	8010942 <xPortStartScheduler+0xb2>
 801092e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010932:	f383 8811 	msr	BASEPRI, r3
 8010936:	f3bf 8f6f 	isb	sy
 801093a:	f3bf 8f4f 	dsb	sy
 801093e:	60bb      	str	r3, [r7, #8]
 8010940:	e7fe      	b.n	8010940 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010942:	4b1e      	ldr	r3, [pc, #120]	; (80109bc <xPortStartScheduler+0x12c>)
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	021b      	lsls	r3, r3, #8
 8010948:	4a1c      	ldr	r2, [pc, #112]	; (80109bc <xPortStartScheduler+0x12c>)
 801094a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801094c:	4b1b      	ldr	r3, [pc, #108]	; (80109bc <xPortStartScheduler+0x12c>)
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010954:	4a19      	ldr	r2, [pc, #100]	; (80109bc <xPortStartScheduler+0x12c>)
 8010956:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	b2da      	uxtb	r2, r3
 801095c:	697b      	ldr	r3, [r7, #20]
 801095e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010960:	4b17      	ldr	r3, [pc, #92]	; (80109c0 <xPortStartScheduler+0x130>)
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	4a16      	ldr	r2, [pc, #88]	; (80109c0 <xPortStartScheduler+0x130>)
 8010966:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801096a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801096c:	4b14      	ldr	r3, [pc, #80]	; (80109c0 <xPortStartScheduler+0x130>)
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	4a13      	ldr	r2, [pc, #76]	; (80109c0 <xPortStartScheduler+0x130>)
 8010972:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010976:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010978:	f000 f8d6 	bl	8010b28 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801097c:	4b11      	ldr	r3, [pc, #68]	; (80109c4 <xPortStartScheduler+0x134>)
 801097e:	2200      	movs	r2, #0
 8010980:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010982:	f000 f8f5 	bl	8010b70 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010986:	4b10      	ldr	r3, [pc, #64]	; (80109c8 <xPortStartScheduler+0x138>)
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	4a0f      	ldr	r2, [pc, #60]	; (80109c8 <xPortStartScheduler+0x138>)
 801098c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010990:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010992:	f7ff ff69 	bl	8010868 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010996:	f7fe fe49 	bl	800f62c <vTaskSwitchContext>
	prvTaskExitError();
 801099a:	f7ff ff23 	bl	80107e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801099e:	2300      	movs	r3, #0
}
 80109a0:	4618      	mov	r0, r3
 80109a2:	3718      	adds	r7, #24
 80109a4:	46bd      	mov	sp, r7
 80109a6:	bd80      	pop	{r7, pc}
 80109a8:	e000ed00 	.word	0xe000ed00
 80109ac:	410fc271 	.word	0x410fc271
 80109b0:	410fc270 	.word	0x410fc270
 80109b4:	e000e400 	.word	0xe000e400
 80109b8:	20000c40 	.word	0x20000c40
 80109bc:	20000c44 	.word	0x20000c44
 80109c0:	e000ed20 	.word	0xe000ed20
 80109c4:	2000002c 	.word	0x2000002c
 80109c8:	e000ef34 	.word	0xe000ef34

080109cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80109cc:	b480      	push	{r7}
 80109ce:	b083      	sub	sp, #12
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109d6:	f383 8811 	msr	BASEPRI, r3
 80109da:	f3bf 8f6f 	isb	sy
 80109de:	f3bf 8f4f 	dsb	sy
 80109e2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80109e4:	4b0e      	ldr	r3, [pc, #56]	; (8010a20 <vPortEnterCritical+0x54>)
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	3301      	adds	r3, #1
 80109ea:	4a0d      	ldr	r2, [pc, #52]	; (8010a20 <vPortEnterCritical+0x54>)
 80109ec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80109ee:	4b0c      	ldr	r3, [pc, #48]	; (8010a20 <vPortEnterCritical+0x54>)
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	2b01      	cmp	r3, #1
 80109f4:	d10e      	bne.n	8010a14 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80109f6:	4b0b      	ldr	r3, [pc, #44]	; (8010a24 <vPortEnterCritical+0x58>)
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	b2db      	uxtb	r3, r3
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d009      	beq.n	8010a14 <vPortEnterCritical+0x48>
 8010a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a04:	f383 8811 	msr	BASEPRI, r3
 8010a08:	f3bf 8f6f 	isb	sy
 8010a0c:	f3bf 8f4f 	dsb	sy
 8010a10:	603b      	str	r3, [r7, #0]
 8010a12:	e7fe      	b.n	8010a12 <vPortEnterCritical+0x46>
	}
}
 8010a14:	bf00      	nop
 8010a16:	370c      	adds	r7, #12
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a1e:	4770      	bx	lr
 8010a20:	2000002c 	.word	0x2000002c
 8010a24:	e000ed04 	.word	0xe000ed04

08010a28 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010a28:	b480      	push	{r7}
 8010a2a:	b083      	sub	sp, #12
 8010a2c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010a2e:	4b11      	ldr	r3, [pc, #68]	; (8010a74 <vPortExitCritical+0x4c>)
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d109      	bne.n	8010a4a <vPortExitCritical+0x22>
 8010a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a3a:	f383 8811 	msr	BASEPRI, r3
 8010a3e:	f3bf 8f6f 	isb	sy
 8010a42:	f3bf 8f4f 	dsb	sy
 8010a46:	607b      	str	r3, [r7, #4]
 8010a48:	e7fe      	b.n	8010a48 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8010a4a:	4b0a      	ldr	r3, [pc, #40]	; (8010a74 <vPortExitCritical+0x4c>)
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	3b01      	subs	r3, #1
 8010a50:	4a08      	ldr	r2, [pc, #32]	; (8010a74 <vPortExitCritical+0x4c>)
 8010a52:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010a54:	4b07      	ldr	r3, [pc, #28]	; (8010a74 <vPortExitCritical+0x4c>)
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d104      	bne.n	8010a66 <vPortExitCritical+0x3e>
 8010a5c:	2300      	movs	r3, #0
 8010a5e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010a60:	683b      	ldr	r3, [r7, #0]
 8010a62:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8010a66:	bf00      	nop
 8010a68:	370c      	adds	r7, #12
 8010a6a:	46bd      	mov	sp, r7
 8010a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a70:	4770      	bx	lr
 8010a72:	bf00      	nop
 8010a74:	2000002c 	.word	0x2000002c
	...

08010a80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010a80:	f3ef 8009 	mrs	r0, PSP
 8010a84:	f3bf 8f6f 	isb	sy
 8010a88:	4b15      	ldr	r3, [pc, #84]	; (8010ae0 <pxCurrentTCBConst>)
 8010a8a:	681a      	ldr	r2, [r3, #0]
 8010a8c:	f01e 0f10 	tst.w	lr, #16
 8010a90:	bf08      	it	eq
 8010a92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010a96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a9a:	6010      	str	r0, [r2, #0]
 8010a9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010aa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010aa4:	f380 8811 	msr	BASEPRI, r0
 8010aa8:	f3bf 8f4f 	dsb	sy
 8010aac:	f3bf 8f6f 	isb	sy
 8010ab0:	f7fe fdbc 	bl	800f62c <vTaskSwitchContext>
 8010ab4:	f04f 0000 	mov.w	r0, #0
 8010ab8:	f380 8811 	msr	BASEPRI, r0
 8010abc:	bc09      	pop	{r0, r3}
 8010abe:	6819      	ldr	r1, [r3, #0]
 8010ac0:	6808      	ldr	r0, [r1, #0]
 8010ac2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ac6:	f01e 0f10 	tst.w	lr, #16
 8010aca:	bf08      	it	eq
 8010acc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010ad0:	f380 8809 	msr	PSP, r0
 8010ad4:	f3bf 8f6f 	isb	sy
 8010ad8:	4770      	bx	lr
 8010ada:	bf00      	nop
 8010adc:	f3af 8000 	nop.w

08010ae0 <pxCurrentTCBConst>:
 8010ae0:	20000608 	.word	0x20000608
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010ae4:	bf00      	nop
 8010ae6:	bf00      	nop

08010ae8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010ae8:	b580      	push	{r7, lr}
 8010aea:	b082      	sub	sp, #8
 8010aec:	af00      	add	r7, sp, #0
	__asm volatile
 8010aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010af2:	f383 8811 	msr	BASEPRI, r3
 8010af6:	f3bf 8f6f 	isb	sy
 8010afa:	f3bf 8f4f 	dsb	sy
 8010afe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010b00:	f7fe fcd4 	bl	800f4ac <xTaskIncrementTick>
 8010b04:	4603      	mov	r3, r0
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d003      	beq.n	8010b12 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010b0a:	4b06      	ldr	r3, [pc, #24]	; (8010b24 <SysTick_Handler+0x3c>)
 8010b0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b10:	601a      	str	r2, [r3, #0]
 8010b12:	2300      	movs	r3, #0
 8010b14:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010b16:	683b      	ldr	r3, [r7, #0]
 8010b18:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8010b1c:	bf00      	nop
 8010b1e:	3708      	adds	r7, #8
 8010b20:	46bd      	mov	sp, r7
 8010b22:	bd80      	pop	{r7, pc}
 8010b24:	e000ed04 	.word	0xe000ed04

08010b28 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010b28:	b480      	push	{r7}
 8010b2a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010b2c:	4b0b      	ldr	r3, [pc, #44]	; (8010b5c <vPortSetupTimerInterrupt+0x34>)
 8010b2e:	2200      	movs	r2, #0
 8010b30:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010b32:	4b0b      	ldr	r3, [pc, #44]	; (8010b60 <vPortSetupTimerInterrupt+0x38>)
 8010b34:	2200      	movs	r2, #0
 8010b36:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010b38:	4b0a      	ldr	r3, [pc, #40]	; (8010b64 <vPortSetupTimerInterrupt+0x3c>)
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	4a0a      	ldr	r2, [pc, #40]	; (8010b68 <vPortSetupTimerInterrupt+0x40>)
 8010b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8010b42:	099b      	lsrs	r3, r3, #6
 8010b44:	4a09      	ldr	r2, [pc, #36]	; (8010b6c <vPortSetupTimerInterrupt+0x44>)
 8010b46:	3b01      	subs	r3, #1
 8010b48:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010b4a:	4b04      	ldr	r3, [pc, #16]	; (8010b5c <vPortSetupTimerInterrupt+0x34>)
 8010b4c:	2207      	movs	r2, #7
 8010b4e:	601a      	str	r2, [r3, #0]
}
 8010b50:	bf00      	nop
 8010b52:	46bd      	mov	sp, r7
 8010b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b58:	4770      	bx	lr
 8010b5a:	bf00      	nop
 8010b5c:	e000e010 	.word	0xe000e010
 8010b60:	e000e018 	.word	0xe000e018
 8010b64:	20000000 	.word	0x20000000
 8010b68:	10624dd3 	.word	0x10624dd3
 8010b6c:	e000e014 	.word	0xe000e014

08010b70 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010b70:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010b80 <vPortEnableVFP+0x10>
 8010b74:	6801      	ldr	r1, [r0, #0]
 8010b76:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010b7a:	6001      	str	r1, [r0, #0]
 8010b7c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010b7e:	bf00      	nop
 8010b80:	e000ed88 	.word	0xe000ed88

08010b84 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010b84:	b480      	push	{r7}
 8010b86:	b085      	sub	sp, #20
 8010b88:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010b8a:	f3ef 8305 	mrs	r3, IPSR
 8010b8e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	2b0f      	cmp	r3, #15
 8010b94:	d913      	bls.n	8010bbe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010b96:	4a16      	ldr	r2, [pc, #88]	; (8010bf0 <vPortValidateInterruptPriority+0x6c>)
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	4413      	add	r3, r2
 8010b9c:	781b      	ldrb	r3, [r3, #0]
 8010b9e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010ba0:	4b14      	ldr	r3, [pc, #80]	; (8010bf4 <vPortValidateInterruptPriority+0x70>)
 8010ba2:	781b      	ldrb	r3, [r3, #0]
 8010ba4:	7afa      	ldrb	r2, [r7, #11]
 8010ba6:	429a      	cmp	r2, r3
 8010ba8:	d209      	bcs.n	8010bbe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8010baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bae:	f383 8811 	msr	BASEPRI, r3
 8010bb2:	f3bf 8f6f 	isb	sy
 8010bb6:	f3bf 8f4f 	dsb	sy
 8010bba:	607b      	str	r3, [r7, #4]
 8010bbc:	e7fe      	b.n	8010bbc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010bbe:	4b0e      	ldr	r3, [pc, #56]	; (8010bf8 <vPortValidateInterruptPriority+0x74>)
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010bc6:	4b0d      	ldr	r3, [pc, #52]	; (8010bfc <vPortValidateInterruptPriority+0x78>)
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	429a      	cmp	r2, r3
 8010bcc:	d909      	bls.n	8010be2 <vPortValidateInterruptPriority+0x5e>
 8010bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bd2:	f383 8811 	msr	BASEPRI, r3
 8010bd6:	f3bf 8f6f 	isb	sy
 8010bda:	f3bf 8f4f 	dsb	sy
 8010bde:	603b      	str	r3, [r7, #0]
 8010be0:	e7fe      	b.n	8010be0 <vPortValidateInterruptPriority+0x5c>
	}
 8010be2:	bf00      	nop
 8010be4:	3714      	adds	r7, #20
 8010be6:	46bd      	mov	sp, r7
 8010be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bec:	4770      	bx	lr
 8010bee:	bf00      	nop
 8010bf0:	e000e3f0 	.word	0xe000e3f0
 8010bf4:	20000c40 	.word	0x20000c40
 8010bf8:	e000ed0c 	.word	0xe000ed0c
 8010bfc:	20000c44 	.word	0x20000c44

08010c00 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010c00:	b580      	push	{r7, lr}
 8010c02:	b08a      	sub	sp, #40	; 0x28
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010c08:	2300      	movs	r3, #0
 8010c0a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010c0c:	f7fe fb94 	bl	800f338 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010c10:	4b59      	ldr	r3, [pc, #356]	; (8010d78 <pvPortMalloc+0x178>)
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d101      	bne.n	8010c1c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010c18:	f000 f910 	bl	8010e3c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010c1c:	4b57      	ldr	r3, [pc, #348]	; (8010d7c <pvPortMalloc+0x17c>)
 8010c1e:	681a      	ldr	r2, [r3, #0]
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	4013      	ands	r3, r2
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	f040 808c 	bne.w	8010d42 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d01c      	beq.n	8010c6a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8010c30:	2208      	movs	r2, #8
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	4413      	add	r3, r2
 8010c36:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	f003 0307 	and.w	r3, r3, #7
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d013      	beq.n	8010c6a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	f023 0307 	bic.w	r3, r3, #7
 8010c48:	3308      	adds	r3, #8
 8010c4a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	f003 0307 	and.w	r3, r3, #7
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d009      	beq.n	8010c6a <pvPortMalloc+0x6a>
 8010c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c5a:	f383 8811 	msr	BASEPRI, r3
 8010c5e:	f3bf 8f6f 	isb	sy
 8010c62:	f3bf 8f4f 	dsb	sy
 8010c66:	617b      	str	r3, [r7, #20]
 8010c68:	e7fe      	b.n	8010c68 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d068      	beq.n	8010d42 <pvPortMalloc+0x142>
 8010c70:	4b43      	ldr	r3, [pc, #268]	; (8010d80 <pvPortMalloc+0x180>)
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	687a      	ldr	r2, [r7, #4]
 8010c76:	429a      	cmp	r2, r3
 8010c78:	d863      	bhi.n	8010d42 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010c7a:	4b42      	ldr	r3, [pc, #264]	; (8010d84 <pvPortMalloc+0x184>)
 8010c7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010c7e:	4b41      	ldr	r3, [pc, #260]	; (8010d84 <pvPortMalloc+0x184>)
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010c84:	e004      	b.n	8010c90 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8010c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c92:	685b      	ldr	r3, [r3, #4]
 8010c94:	687a      	ldr	r2, [r7, #4]
 8010c96:	429a      	cmp	r2, r3
 8010c98:	d903      	bls.n	8010ca2 <pvPortMalloc+0xa2>
 8010c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d1f1      	bne.n	8010c86 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010ca2:	4b35      	ldr	r3, [pc, #212]	; (8010d78 <pvPortMalloc+0x178>)
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ca8:	429a      	cmp	r2, r3
 8010caa:	d04a      	beq.n	8010d42 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010cac:	6a3b      	ldr	r3, [r7, #32]
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	2208      	movs	r2, #8
 8010cb2:	4413      	add	r3, r2
 8010cb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cb8:	681a      	ldr	r2, [r3, #0]
 8010cba:	6a3b      	ldr	r3, [r7, #32]
 8010cbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cc0:	685a      	ldr	r2, [r3, #4]
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	1ad2      	subs	r2, r2, r3
 8010cc6:	2308      	movs	r3, #8
 8010cc8:	005b      	lsls	r3, r3, #1
 8010cca:	429a      	cmp	r2, r3
 8010ccc:	d91e      	bls.n	8010d0c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	4413      	add	r3, r2
 8010cd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010cd6:	69bb      	ldr	r3, [r7, #24]
 8010cd8:	f003 0307 	and.w	r3, r3, #7
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d009      	beq.n	8010cf4 <pvPortMalloc+0xf4>
 8010ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ce4:	f383 8811 	msr	BASEPRI, r3
 8010ce8:	f3bf 8f6f 	isb	sy
 8010cec:	f3bf 8f4f 	dsb	sy
 8010cf0:	613b      	str	r3, [r7, #16]
 8010cf2:	e7fe      	b.n	8010cf2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cf6:	685a      	ldr	r2, [r3, #4]
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	1ad2      	subs	r2, r2, r3
 8010cfc:	69bb      	ldr	r3, [r7, #24]
 8010cfe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d02:	687a      	ldr	r2, [r7, #4]
 8010d04:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010d06:	69b8      	ldr	r0, [r7, #24]
 8010d08:	f000 f8fa 	bl	8010f00 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010d0c:	4b1c      	ldr	r3, [pc, #112]	; (8010d80 <pvPortMalloc+0x180>)
 8010d0e:	681a      	ldr	r2, [r3, #0]
 8010d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d12:	685b      	ldr	r3, [r3, #4]
 8010d14:	1ad3      	subs	r3, r2, r3
 8010d16:	4a1a      	ldr	r2, [pc, #104]	; (8010d80 <pvPortMalloc+0x180>)
 8010d18:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010d1a:	4b19      	ldr	r3, [pc, #100]	; (8010d80 <pvPortMalloc+0x180>)
 8010d1c:	681a      	ldr	r2, [r3, #0]
 8010d1e:	4b1a      	ldr	r3, [pc, #104]	; (8010d88 <pvPortMalloc+0x188>)
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	429a      	cmp	r2, r3
 8010d24:	d203      	bcs.n	8010d2e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010d26:	4b16      	ldr	r3, [pc, #88]	; (8010d80 <pvPortMalloc+0x180>)
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	4a17      	ldr	r2, [pc, #92]	; (8010d88 <pvPortMalloc+0x188>)
 8010d2c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d30:	685a      	ldr	r2, [r3, #4]
 8010d32:	4b12      	ldr	r3, [pc, #72]	; (8010d7c <pvPortMalloc+0x17c>)
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	431a      	orrs	r2, r3
 8010d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d3a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d3e:	2200      	movs	r2, #0
 8010d40:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010d42:	f7fe fb07 	bl	800f354 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8010d46:	69fb      	ldr	r3, [r7, #28]
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d101      	bne.n	8010d50 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8010d4c:	f7f0 f97e 	bl	800104c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010d50:	69fb      	ldr	r3, [r7, #28]
 8010d52:	f003 0307 	and.w	r3, r3, #7
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d009      	beq.n	8010d6e <pvPortMalloc+0x16e>
 8010d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d5e:	f383 8811 	msr	BASEPRI, r3
 8010d62:	f3bf 8f6f 	isb	sy
 8010d66:	f3bf 8f4f 	dsb	sy
 8010d6a:	60fb      	str	r3, [r7, #12]
 8010d6c:	e7fe      	b.n	8010d6c <pvPortMalloc+0x16c>
	return pvReturn;
 8010d6e:	69fb      	ldr	r3, [r7, #28]
}
 8010d70:	4618      	mov	r0, r3
 8010d72:	3728      	adds	r7, #40	; 0x28
 8010d74:	46bd      	mov	sp, r7
 8010d76:	bd80      	pop	{r7, pc}
 8010d78:	20006a10 	.word	0x20006a10
 8010d7c:	20006a1c 	.word	0x20006a1c
 8010d80:	20006a14 	.word	0x20006a14
 8010d84:	20006a08 	.word	0x20006a08
 8010d88:	20006a18 	.word	0x20006a18

08010d8c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b086      	sub	sp, #24
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d046      	beq.n	8010e2c <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010d9e:	2308      	movs	r3, #8
 8010da0:	425b      	negs	r3, r3
 8010da2:	697a      	ldr	r2, [r7, #20]
 8010da4:	4413      	add	r3, r2
 8010da6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010da8:	697b      	ldr	r3, [r7, #20]
 8010daa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010dac:	693b      	ldr	r3, [r7, #16]
 8010dae:	685a      	ldr	r2, [r3, #4]
 8010db0:	4b20      	ldr	r3, [pc, #128]	; (8010e34 <vPortFree+0xa8>)
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	4013      	ands	r3, r2
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d109      	bne.n	8010dce <vPortFree+0x42>
 8010dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dbe:	f383 8811 	msr	BASEPRI, r3
 8010dc2:	f3bf 8f6f 	isb	sy
 8010dc6:	f3bf 8f4f 	dsb	sy
 8010dca:	60fb      	str	r3, [r7, #12]
 8010dcc:	e7fe      	b.n	8010dcc <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010dce:	693b      	ldr	r3, [r7, #16]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d009      	beq.n	8010dea <vPortFree+0x5e>
 8010dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dda:	f383 8811 	msr	BASEPRI, r3
 8010dde:	f3bf 8f6f 	isb	sy
 8010de2:	f3bf 8f4f 	dsb	sy
 8010de6:	60bb      	str	r3, [r7, #8]
 8010de8:	e7fe      	b.n	8010de8 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010dea:	693b      	ldr	r3, [r7, #16]
 8010dec:	685a      	ldr	r2, [r3, #4]
 8010dee:	4b11      	ldr	r3, [pc, #68]	; (8010e34 <vPortFree+0xa8>)
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	4013      	ands	r3, r2
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d019      	beq.n	8010e2c <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010df8:	693b      	ldr	r3, [r7, #16]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d115      	bne.n	8010e2c <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010e00:	693b      	ldr	r3, [r7, #16]
 8010e02:	685a      	ldr	r2, [r3, #4]
 8010e04:	4b0b      	ldr	r3, [pc, #44]	; (8010e34 <vPortFree+0xa8>)
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	43db      	mvns	r3, r3
 8010e0a:	401a      	ands	r2, r3
 8010e0c:	693b      	ldr	r3, [r7, #16]
 8010e0e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010e10:	f7fe fa92 	bl	800f338 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010e14:	693b      	ldr	r3, [r7, #16]
 8010e16:	685a      	ldr	r2, [r3, #4]
 8010e18:	4b07      	ldr	r3, [pc, #28]	; (8010e38 <vPortFree+0xac>)
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	4413      	add	r3, r2
 8010e1e:	4a06      	ldr	r2, [pc, #24]	; (8010e38 <vPortFree+0xac>)
 8010e20:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010e22:	6938      	ldr	r0, [r7, #16]
 8010e24:	f000 f86c 	bl	8010f00 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010e28:	f7fe fa94 	bl	800f354 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010e2c:	bf00      	nop
 8010e2e:	3718      	adds	r7, #24
 8010e30:	46bd      	mov	sp, r7
 8010e32:	bd80      	pop	{r7, pc}
 8010e34:	20006a1c 	.word	0x20006a1c
 8010e38:	20006a14 	.word	0x20006a14

08010e3c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010e3c:	b480      	push	{r7}
 8010e3e:	b085      	sub	sp, #20
 8010e40:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010e42:	f645 53c0 	movw	r3, #24000	; 0x5dc0
 8010e46:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010e48:	4b27      	ldr	r3, [pc, #156]	; (8010ee8 <prvHeapInit+0xac>)
 8010e4a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	f003 0307 	and.w	r3, r3, #7
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d00c      	beq.n	8010e70 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	3307      	adds	r3, #7
 8010e5a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	f023 0307 	bic.w	r3, r3, #7
 8010e62:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010e64:	68ba      	ldr	r2, [r7, #8]
 8010e66:	68fb      	ldr	r3, [r7, #12]
 8010e68:	1ad3      	subs	r3, r2, r3
 8010e6a:	4a1f      	ldr	r2, [pc, #124]	; (8010ee8 <prvHeapInit+0xac>)
 8010e6c:	4413      	add	r3, r2
 8010e6e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010e74:	4a1d      	ldr	r2, [pc, #116]	; (8010eec <prvHeapInit+0xb0>)
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010e7a:	4b1c      	ldr	r3, [pc, #112]	; (8010eec <prvHeapInit+0xb0>)
 8010e7c:	2200      	movs	r2, #0
 8010e7e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	68ba      	ldr	r2, [r7, #8]
 8010e84:	4413      	add	r3, r2
 8010e86:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010e88:	2208      	movs	r2, #8
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	1a9b      	subs	r3, r3, r2
 8010e8e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	f023 0307 	bic.w	r3, r3, #7
 8010e96:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	4a15      	ldr	r2, [pc, #84]	; (8010ef0 <prvHeapInit+0xb4>)
 8010e9c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010e9e:	4b14      	ldr	r3, [pc, #80]	; (8010ef0 <prvHeapInit+0xb4>)
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	2200      	movs	r2, #0
 8010ea4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010ea6:	4b12      	ldr	r3, [pc, #72]	; (8010ef0 <prvHeapInit+0xb4>)
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	2200      	movs	r2, #0
 8010eac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010eb2:	683b      	ldr	r3, [r7, #0]
 8010eb4:	68fa      	ldr	r2, [r7, #12]
 8010eb6:	1ad2      	subs	r2, r2, r3
 8010eb8:	683b      	ldr	r3, [r7, #0]
 8010eba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010ebc:	4b0c      	ldr	r3, [pc, #48]	; (8010ef0 <prvHeapInit+0xb4>)
 8010ebe:	681a      	ldr	r2, [r3, #0]
 8010ec0:	683b      	ldr	r3, [r7, #0]
 8010ec2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010ec4:	683b      	ldr	r3, [r7, #0]
 8010ec6:	685b      	ldr	r3, [r3, #4]
 8010ec8:	4a0a      	ldr	r2, [pc, #40]	; (8010ef4 <prvHeapInit+0xb8>)
 8010eca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010ecc:	683b      	ldr	r3, [r7, #0]
 8010ece:	685b      	ldr	r3, [r3, #4]
 8010ed0:	4a09      	ldr	r2, [pc, #36]	; (8010ef8 <prvHeapInit+0xbc>)
 8010ed2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010ed4:	4b09      	ldr	r3, [pc, #36]	; (8010efc <prvHeapInit+0xc0>)
 8010ed6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010eda:	601a      	str	r2, [r3, #0]
}
 8010edc:	bf00      	nop
 8010ede:	3714      	adds	r7, #20
 8010ee0:	46bd      	mov	sp, r7
 8010ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee6:	4770      	bx	lr
 8010ee8:	20000c48 	.word	0x20000c48
 8010eec:	20006a08 	.word	0x20006a08
 8010ef0:	20006a10 	.word	0x20006a10
 8010ef4:	20006a18 	.word	0x20006a18
 8010ef8:	20006a14 	.word	0x20006a14
 8010efc:	20006a1c 	.word	0x20006a1c

08010f00 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010f00:	b480      	push	{r7}
 8010f02:	b085      	sub	sp, #20
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010f08:	4b28      	ldr	r3, [pc, #160]	; (8010fac <prvInsertBlockIntoFreeList+0xac>)
 8010f0a:	60fb      	str	r3, [r7, #12]
 8010f0c:	e002      	b.n	8010f14 <prvInsertBlockIntoFreeList+0x14>
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	60fb      	str	r3, [r7, #12]
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	687a      	ldr	r2, [r7, #4]
 8010f1a:	429a      	cmp	r2, r3
 8010f1c:	d8f7      	bhi.n	8010f0e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	685b      	ldr	r3, [r3, #4]
 8010f26:	68ba      	ldr	r2, [r7, #8]
 8010f28:	4413      	add	r3, r2
 8010f2a:	687a      	ldr	r2, [r7, #4]
 8010f2c:	429a      	cmp	r2, r3
 8010f2e:	d108      	bne.n	8010f42 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	685a      	ldr	r2, [r3, #4]
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	685b      	ldr	r3, [r3, #4]
 8010f38:	441a      	add	r2, r3
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	685b      	ldr	r3, [r3, #4]
 8010f4a:	68ba      	ldr	r2, [r7, #8]
 8010f4c:	441a      	add	r2, r3
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	429a      	cmp	r2, r3
 8010f54:	d118      	bne.n	8010f88 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	681a      	ldr	r2, [r3, #0]
 8010f5a:	4b15      	ldr	r3, [pc, #84]	; (8010fb0 <prvInsertBlockIntoFreeList+0xb0>)
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	429a      	cmp	r2, r3
 8010f60:	d00d      	beq.n	8010f7e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	685a      	ldr	r2, [r3, #4]
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	685b      	ldr	r3, [r3, #4]
 8010f6c:	441a      	add	r2, r3
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	681a      	ldr	r2, [r3, #0]
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	601a      	str	r2, [r3, #0]
 8010f7c:	e008      	b.n	8010f90 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010f7e:	4b0c      	ldr	r3, [pc, #48]	; (8010fb0 <prvInsertBlockIntoFreeList+0xb0>)
 8010f80:	681a      	ldr	r2, [r3, #0]
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	601a      	str	r2, [r3, #0]
 8010f86:	e003      	b.n	8010f90 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	681a      	ldr	r2, [r3, #0]
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010f90:	68fa      	ldr	r2, [r7, #12]
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	429a      	cmp	r2, r3
 8010f96:	d002      	beq.n	8010f9e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	687a      	ldr	r2, [r7, #4]
 8010f9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010f9e:	bf00      	nop
 8010fa0:	3714      	adds	r7, #20
 8010fa2:	46bd      	mov	sp, r7
 8010fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa8:	4770      	bx	lr
 8010faa:	bf00      	nop
 8010fac:	20006a08 	.word	0x20006a08
 8010fb0:	20006a10 	.word	0x20006a10

08010fb4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8010fb8:	2201      	movs	r2, #1
 8010fba:	490e      	ldr	r1, [pc, #56]	; (8010ff4 <MX_USB_HOST_Init+0x40>)
 8010fbc:	480e      	ldr	r0, [pc, #56]	; (8010ff8 <MX_USB_HOST_Init+0x44>)
 8010fbe:	f7fa fc49 	bl	800b854 <USBH_Init>
 8010fc2:	4603      	mov	r3, r0
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d001      	beq.n	8010fcc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8010fc8:	f7f0 fcd5 	bl	8001976 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 8010fcc:	490b      	ldr	r1, [pc, #44]	; (8010ffc <MX_USB_HOST_Init+0x48>)
 8010fce:	480a      	ldr	r0, [pc, #40]	; (8010ff8 <MX_USB_HOST_Init+0x44>)
 8010fd0:	f7fa fcf0 	bl	800b9b4 <USBH_RegisterClass>
 8010fd4:	4603      	mov	r3, r0
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d001      	beq.n	8010fde <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8010fda:	f7f0 fccc 	bl	8001976 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8010fde:	4806      	ldr	r0, [pc, #24]	; (8010ff8 <MX_USB_HOST_Init+0x44>)
 8010fe0:	f7fa fd74 	bl	800bacc <USBH_Start>
 8010fe4:	4603      	mov	r3, r0
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d001      	beq.n	8010fee <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8010fea:	f7f0 fcc4 	bl	8001976 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8010fee:	bf00      	nop
 8010ff0:	bd80      	pop	{r7, pc}
 8010ff2:	bf00      	nop
 8010ff4:	08011001 	.word	0x08011001
 8010ff8:	200071b8 	.word	0x200071b8
 8010ffc:	2000000c 	.word	0x2000000c

08011000 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8011000:	b480      	push	{r7}
 8011002:	b083      	sub	sp, #12
 8011004:	af00      	add	r7, sp, #0
 8011006:	6078      	str	r0, [r7, #4]
 8011008:	460b      	mov	r3, r1
 801100a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801100c:	78fb      	ldrb	r3, [r7, #3]
 801100e:	3b01      	subs	r3, #1
 8011010:	2b04      	cmp	r3, #4
 8011012:	d819      	bhi.n	8011048 <USBH_UserProcess+0x48>
 8011014:	a201      	add	r2, pc, #4	; (adr r2, 801101c <USBH_UserProcess+0x1c>)
 8011016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801101a:	bf00      	nop
 801101c:	08011049 	.word	0x08011049
 8011020:	08011039 	.word	0x08011039
 8011024:	08011049 	.word	0x08011049
 8011028:	08011041 	.word	0x08011041
 801102c:	08011031 	.word	0x08011031
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8011030:	4b09      	ldr	r3, [pc, #36]	; (8011058 <USBH_UserProcess+0x58>)
 8011032:	2203      	movs	r2, #3
 8011034:	701a      	strb	r2, [r3, #0]
  break;
 8011036:	e008      	b.n	801104a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8011038:	4b07      	ldr	r3, [pc, #28]	; (8011058 <USBH_UserProcess+0x58>)
 801103a:	2202      	movs	r2, #2
 801103c:	701a      	strb	r2, [r3, #0]
  break;
 801103e:	e004      	b.n	801104a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8011040:	4b05      	ldr	r3, [pc, #20]	; (8011058 <USBH_UserProcess+0x58>)
 8011042:	2201      	movs	r2, #1
 8011044:	701a      	strb	r2, [r3, #0]
  break;
 8011046:	e000      	b.n	801104a <USBH_UserProcess+0x4a>

  default:
  break;
 8011048:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801104a:	bf00      	nop
 801104c:	370c      	adds	r7, #12
 801104e:	46bd      	mov	sp, r7
 8011050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011054:	4770      	bx	lr
 8011056:	bf00      	nop
 8011058:	20006a20 	.word	0x20006a20

0801105c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801105c:	b580      	push	{r7, lr}
 801105e:	b08a      	sub	sp, #40	; 0x28
 8011060:	af00      	add	r7, sp, #0
 8011062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011064:	f107 0314 	add.w	r3, r7, #20
 8011068:	2200      	movs	r2, #0
 801106a:	601a      	str	r2, [r3, #0]
 801106c:	605a      	str	r2, [r3, #4]
 801106e:	609a      	str	r2, [r3, #8]
 8011070:	60da      	str	r2, [r3, #12]
 8011072:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801107c:	d147      	bne.n	801110e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801107e:	2300      	movs	r3, #0
 8011080:	613b      	str	r3, [r7, #16]
 8011082:	4b25      	ldr	r3, [pc, #148]	; (8011118 <HAL_HCD_MspInit+0xbc>)
 8011084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011086:	4a24      	ldr	r2, [pc, #144]	; (8011118 <HAL_HCD_MspInit+0xbc>)
 8011088:	f043 0301 	orr.w	r3, r3, #1
 801108c:	6313      	str	r3, [r2, #48]	; 0x30
 801108e:	4b22      	ldr	r3, [pc, #136]	; (8011118 <HAL_HCD_MspInit+0xbc>)
 8011090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011092:	f003 0301 	and.w	r3, r3, #1
 8011096:	613b      	str	r3, [r7, #16]
 8011098:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 801109a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801109e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80110a0:	2300      	movs	r3, #0
 80110a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80110a4:	2300      	movs	r3, #0
 80110a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80110a8:	f107 0314 	add.w	r3, r7, #20
 80110ac:	4619      	mov	r1, r3
 80110ae:	481b      	ldr	r0, [pc, #108]	; (801111c <HAL_HCD_MspInit+0xc0>)
 80110b0:	f7f2 fed2 	bl	8003e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80110b4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80110b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80110ba:	2302      	movs	r3, #2
 80110bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80110be:	2300      	movs	r3, #0
 80110c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80110c2:	2303      	movs	r3, #3
 80110c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80110c6:	230a      	movs	r3, #10
 80110c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80110ca:	f107 0314 	add.w	r3, r7, #20
 80110ce:	4619      	mov	r1, r3
 80110d0:	4812      	ldr	r0, [pc, #72]	; (801111c <HAL_HCD_MspInit+0xc0>)
 80110d2:	f7f2 fec1 	bl	8003e58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80110d6:	4b10      	ldr	r3, [pc, #64]	; (8011118 <HAL_HCD_MspInit+0xbc>)
 80110d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110da:	4a0f      	ldr	r2, [pc, #60]	; (8011118 <HAL_HCD_MspInit+0xbc>)
 80110dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80110e0:	6353      	str	r3, [r2, #52]	; 0x34
 80110e2:	2300      	movs	r3, #0
 80110e4:	60fb      	str	r3, [r7, #12]
 80110e6:	4b0c      	ldr	r3, [pc, #48]	; (8011118 <HAL_HCD_MspInit+0xbc>)
 80110e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80110ea:	4a0b      	ldr	r2, [pc, #44]	; (8011118 <HAL_HCD_MspInit+0xbc>)
 80110ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80110f0:	6453      	str	r3, [r2, #68]	; 0x44
 80110f2:	4b09      	ldr	r3, [pc, #36]	; (8011118 <HAL_HCD_MspInit+0xbc>)
 80110f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80110f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80110fa:	60fb      	str	r3, [r7, #12]
 80110fc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80110fe:	2200      	movs	r2, #0
 8011100:	2105      	movs	r1, #5
 8011102:	2043      	movs	r0, #67	; 0x43
 8011104:	f7f2 f8be 	bl	8003284 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011108:	2043      	movs	r0, #67	; 0x43
 801110a:	f7f2 f8e7 	bl	80032dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801110e:	bf00      	nop
 8011110:	3728      	adds	r7, #40	; 0x28
 8011112:	46bd      	mov	sp, r7
 8011114:	bd80      	pop	{r7, pc}
 8011116:	bf00      	nop
 8011118:	40023800 	.word	0x40023800
 801111c:	40020000 	.word	0x40020000

08011120 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8011120:	b580      	push	{r7, lr}
 8011122:	b082      	sub	sp, #8
 8011124:	af00      	add	r7, sp, #0
 8011126:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801112e:	4618      	mov	r0, r3
 8011130:	f7fb f979 	bl	800c426 <USBH_LL_IncTimer>
}
 8011134:	bf00      	nop
 8011136:	3708      	adds	r7, #8
 8011138:	46bd      	mov	sp, r7
 801113a:	bd80      	pop	{r7, pc}

0801113c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 801113c:	b580      	push	{r7, lr}
 801113e:	b082      	sub	sp, #8
 8011140:	af00      	add	r7, sp, #0
 8011142:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801114a:	4618      	mov	r0, r3
 801114c:	f7fb f9bd 	bl	800c4ca <USBH_LL_Connect>
}
 8011150:	bf00      	nop
 8011152:	3708      	adds	r7, #8
 8011154:	46bd      	mov	sp, r7
 8011156:	bd80      	pop	{r7, pc}

08011158 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011158:	b580      	push	{r7, lr}
 801115a:	b082      	sub	sp, #8
 801115c:	af00      	add	r7, sp, #0
 801115e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011166:	4618      	mov	r0, r3
 8011168:	f7fb f9d2 	bl	800c510 <USBH_LL_Disconnect>
}
 801116c:	bf00      	nop
 801116e:	3708      	adds	r7, #8
 8011170:	46bd      	mov	sp, r7
 8011172:	bd80      	pop	{r7, pc}

08011174 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8011174:	b580      	push	{r7, lr}
 8011176:	b082      	sub	sp, #8
 8011178:	af00      	add	r7, sp, #0
 801117a:	6078      	str	r0, [r7, #4]
 801117c:	460b      	mov	r3, r1
 801117e:	70fb      	strb	r3, [r7, #3]
 8011180:	4613      	mov	r3, r2
 8011182:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801118a:	4618      	mov	r0, r3
 801118c:	f7fb fa09 	bl	800c5a2 <USBH_LL_NotifyURBChange>
#endif
}
 8011190:	bf00      	nop
 8011192:	3708      	adds	r7, #8
 8011194:	46bd      	mov	sp, r7
 8011196:	bd80      	pop	{r7, pc}

08011198 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8011198:	b580      	push	{r7, lr}
 801119a:	b082      	sub	sp, #8
 801119c:	af00      	add	r7, sp, #0
 801119e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80111a6:	4618      	mov	r0, r3
 80111a8:	f7fb f967 	bl	800c47a <USBH_LL_PortEnabled>
} 
 80111ac:	bf00      	nop
 80111ae:	3708      	adds	r7, #8
 80111b0:	46bd      	mov	sp, r7
 80111b2:	bd80      	pop	{r7, pc}

080111b4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80111b4:	b580      	push	{r7, lr}
 80111b6:	b082      	sub	sp, #8
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80111c2:	4618      	mov	r0, r3
 80111c4:	f7fb f973 	bl	800c4ae <USBH_LL_PortDisabled>
} 
 80111c8:	bf00      	nop
 80111ca:	3708      	adds	r7, #8
 80111cc:	46bd      	mov	sp, r7
 80111ce:	bd80      	pop	{r7, pc}

080111d0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80111d0:	b580      	push	{r7, lr}
 80111d2:	b082      	sub	sp, #8
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80111de:	2b01      	cmp	r3, #1
 80111e0:	d12a      	bne.n	8011238 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80111e2:	4a18      	ldr	r2, [pc, #96]	; (8011244 <USBH_LL_Init+0x74>)
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	4a15      	ldr	r2, [pc, #84]	; (8011244 <USBH_LL_Init+0x74>)
 80111ee:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80111f2:	4b14      	ldr	r3, [pc, #80]	; (8011244 <USBH_LL_Init+0x74>)
 80111f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80111f8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80111fa:	4b12      	ldr	r3, [pc, #72]	; (8011244 <USBH_LL_Init+0x74>)
 80111fc:	2208      	movs	r2, #8
 80111fe:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8011200:	4b10      	ldr	r3, [pc, #64]	; (8011244 <USBH_LL_Init+0x74>)
 8011202:	2201      	movs	r2, #1
 8011204:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011206:	4b0f      	ldr	r3, [pc, #60]	; (8011244 <USBH_LL_Init+0x74>)
 8011208:	2200      	movs	r2, #0
 801120a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 801120c:	4b0d      	ldr	r3, [pc, #52]	; (8011244 <USBH_LL_Init+0x74>)
 801120e:	2202      	movs	r2, #2
 8011210:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011212:	4b0c      	ldr	r3, [pc, #48]	; (8011244 <USBH_LL_Init+0x74>)
 8011214:	2200      	movs	r2, #0
 8011216:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8011218:	480a      	ldr	r0, [pc, #40]	; (8011244 <USBH_LL_Init+0x74>)
 801121a:	f7f3 f937 	bl	800448c <HAL_HCD_Init>
 801121e:	4603      	mov	r3, r0
 8011220:	2b00      	cmp	r3, #0
 8011222:	d001      	beq.n	8011228 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8011224:	f7f0 fba7 	bl	8001976 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8011228:	4806      	ldr	r0, [pc, #24]	; (8011244 <USBH_LL_Init+0x74>)
 801122a:	f7f3 fd47 	bl	8004cbc <HAL_HCD_GetCurrentFrame>
 801122e:	4603      	mov	r3, r0
 8011230:	4619      	mov	r1, r3
 8011232:	6878      	ldr	r0, [r7, #4]
 8011234:	f7fb f8e8 	bl	800c408 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8011238:	2300      	movs	r3, #0
}
 801123a:	4618      	mov	r0, r3
 801123c:	3708      	adds	r7, #8
 801123e:	46bd      	mov	sp, r7
 8011240:	bd80      	pop	{r7, pc}
 8011242:	bf00      	nop
 8011244:	2000759c 	.word	0x2000759c

08011248 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8011248:	b580      	push	{r7, lr}
 801124a:	b084      	sub	sp, #16
 801124c:	af00      	add	r7, sp, #0
 801124e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011250:	2300      	movs	r3, #0
 8011252:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011254:	2300      	movs	r3, #0
 8011256:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801125e:	4618      	mov	r0, r3
 8011260:	f7f3 fcb4 	bl	8004bcc <HAL_HCD_Start>
 8011264:	4603      	mov	r3, r0
 8011266:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011268:	7bfb      	ldrb	r3, [r7, #15]
 801126a:	4618      	mov	r0, r3
 801126c:	f000 f990 	bl	8011590 <USBH_Get_USB_Status>
 8011270:	4603      	mov	r3, r0
 8011272:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8011274:	7bbb      	ldrb	r3, [r7, #14]
}
 8011276:	4618      	mov	r0, r3
 8011278:	3710      	adds	r7, #16
 801127a:	46bd      	mov	sp, r7
 801127c:	bd80      	pop	{r7, pc}

0801127e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801127e:	b580      	push	{r7, lr}
 8011280:	b084      	sub	sp, #16
 8011282:	af00      	add	r7, sp, #0
 8011284:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011286:	2300      	movs	r3, #0
 8011288:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801128a:	2300      	movs	r3, #0
 801128c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011294:	4618      	mov	r0, r3
 8011296:	f7f3 fcbc 	bl	8004c12 <HAL_HCD_Stop>
 801129a:	4603      	mov	r3, r0
 801129c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801129e:	7bfb      	ldrb	r3, [r7, #15]
 80112a0:	4618      	mov	r0, r3
 80112a2:	f000 f975 	bl	8011590 <USBH_Get_USB_Status>
 80112a6:	4603      	mov	r3, r0
 80112a8:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80112aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80112ac:	4618      	mov	r0, r3
 80112ae:	3710      	adds	r7, #16
 80112b0:	46bd      	mov	sp, r7
 80112b2:	bd80      	pop	{r7, pc}

080112b4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80112b4:	b580      	push	{r7, lr}
 80112b6:	b084      	sub	sp, #16
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80112bc:	2301      	movs	r3, #1
 80112be:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80112c6:	4618      	mov	r0, r3
 80112c8:	f7f3 fd06 	bl	8004cd8 <HAL_HCD_GetCurrentSpeed>
 80112cc:	4603      	mov	r3, r0
 80112ce:	2b01      	cmp	r3, #1
 80112d0:	d007      	beq.n	80112e2 <USBH_LL_GetSpeed+0x2e>
 80112d2:	2b01      	cmp	r3, #1
 80112d4:	d302      	bcc.n	80112dc <USBH_LL_GetSpeed+0x28>
 80112d6:	2b02      	cmp	r3, #2
 80112d8:	d006      	beq.n	80112e8 <USBH_LL_GetSpeed+0x34>
 80112da:	e008      	b.n	80112ee <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80112dc:	2300      	movs	r3, #0
 80112de:	73fb      	strb	r3, [r7, #15]
    break;
 80112e0:	e008      	b.n	80112f4 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 80112e2:	2301      	movs	r3, #1
 80112e4:	73fb      	strb	r3, [r7, #15]
    break;
 80112e6:	e005      	b.n	80112f4 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 80112e8:	2302      	movs	r3, #2
 80112ea:	73fb      	strb	r3, [r7, #15]
    break;
 80112ec:	e002      	b.n	80112f4 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 80112ee:	2301      	movs	r3, #1
 80112f0:	73fb      	strb	r3, [r7, #15]
    break;
 80112f2:	bf00      	nop
  }
  return  speed;
 80112f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80112f6:	4618      	mov	r0, r3
 80112f8:	3710      	adds	r7, #16
 80112fa:	46bd      	mov	sp, r7
 80112fc:	bd80      	pop	{r7, pc}

080112fe <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80112fe:	b580      	push	{r7, lr}
 8011300:	b084      	sub	sp, #16
 8011302:	af00      	add	r7, sp, #0
 8011304:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011306:	2300      	movs	r3, #0
 8011308:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801130a:	2300      	movs	r3, #0
 801130c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011314:	4618      	mov	r0, r3
 8011316:	f7f3 fc99 	bl	8004c4c <HAL_HCD_ResetPort>
 801131a:	4603      	mov	r3, r0
 801131c:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 801131e:	7bfb      	ldrb	r3, [r7, #15]
 8011320:	4618      	mov	r0, r3
 8011322:	f000 f935 	bl	8011590 <USBH_Get_USB_Status>
 8011326:	4603      	mov	r3, r0
 8011328:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801132a:	7bbb      	ldrb	r3, [r7, #14]
}
 801132c:	4618      	mov	r0, r3
 801132e:	3710      	adds	r7, #16
 8011330:	46bd      	mov	sp, r7
 8011332:	bd80      	pop	{r7, pc}

08011334 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011334:	b580      	push	{r7, lr}
 8011336:	b082      	sub	sp, #8
 8011338:	af00      	add	r7, sp, #0
 801133a:	6078      	str	r0, [r7, #4]
 801133c:	460b      	mov	r3, r1
 801133e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011346:	78fa      	ldrb	r2, [r7, #3]
 8011348:	4611      	mov	r1, r2
 801134a:	4618      	mov	r0, r3
 801134c:	f7f3 fca1 	bl	8004c92 <HAL_HCD_HC_GetXferCount>
 8011350:	4603      	mov	r3, r0
}
 8011352:	4618      	mov	r0, r3
 8011354:	3708      	adds	r7, #8
 8011356:	46bd      	mov	sp, r7
 8011358:	bd80      	pop	{r7, pc}

0801135a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801135a:	b590      	push	{r4, r7, lr}
 801135c:	b089      	sub	sp, #36	; 0x24
 801135e:	af04      	add	r7, sp, #16
 8011360:	6078      	str	r0, [r7, #4]
 8011362:	4608      	mov	r0, r1
 8011364:	4611      	mov	r1, r2
 8011366:	461a      	mov	r2, r3
 8011368:	4603      	mov	r3, r0
 801136a:	70fb      	strb	r3, [r7, #3]
 801136c:	460b      	mov	r3, r1
 801136e:	70bb      	strb	r3, [r7, #2]
 8011370:	4613      	mov	r3, r2
 8011372:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011374:	2300      	movs	r3, #0
 8011376:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011378:	2300      	movs	r3, #0
 801137a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8011382:	787c      	ldrb	r4, [r7, #1]
 8011384:	78ba      	ldrb	r2, [r7, #2]
 8011386:	78f9      	ldrb	r1, [r7, #3]
 8011388:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801138a:	9302      	str	r3, [sp, #8]
 801138c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011390:	9301      	str	r3, [sp, #4]
 8011392:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011396:	9300      	str	r3, [sp, #0]
 8011398:	4623      	mov	r3, r4
 801139a:	f7f3 f8e5 	bl	8004568 <HAL_HCD_HC_Init>
 801139e:	4603      	mov	r3, r0
 80113a0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80113a2:	7bfb      	ldrb	r3, [r7, #15]
 80113a4:	4618      	mov	r0, r3
 80113a6:	f000 f8f3 	bl	8011590 <USBH_Get_USB_Status>
 80113aa:	4603      	mov	r3, r0
 80113ac:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80113ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80113b0:	4618      	mov	r0, r3
 80113b2:	3714      	adds	r7, #20
 80113b4:	46bd      	mov	sp, r7
 80113b6:	bd90      	pop	{r4, r7, pc}

080113b8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80113b8:	b580      	push	{r7, lr}
 80113ba:	b084      	sub	sp, #16
 80113bc:	af00      	add	r7, sp, #0
 80113be:	6078      	str	r0, [r7, #4]
 80113c0:	460b      	mov	r3, r1
 80113c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80113c4:	2300      	movs	r3, #0
 80113c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80113c8:	2300      	movs	r3, #0
 80113ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80113d2:	78fa      	ldrb	r2, [r7, #3]
 80113d4:	4611      	mov	r1, r2
 80113d6:	4618      	mov	r0, r3
 80113d8:	f7f3 f95e 	bl	8004698 <HAL_HCD_HC_Halt>
 80113dc:	4603      	mov	r3, r0
 80113de:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80113e0:	7bfb      	ldrb	r3, [r7, #15]
 80113e2:	4618      	mov	r0, r3
 80113e4:	f000 f8d4 	bl	8011590 <USBH_Get_USB_Status>
 80113e8:	4603      	mov	r3, r0
 80113ea:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80113ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80113ee:	4618      	mov	r0, r3
 80113f0:	3710      	adds	r7, #16
 80113f2:	46bd      	mov	sp, r7
 80113f4:	bd80      	pop	{r7, pc}

080113f6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80113f6:	b590      	push	{r4, r7, lr}
 80113f8:	b089      	sub	sp, #36	; 0x24
 80113fa:	af04      	add	r7, sp, #16
 80113fc:	6078      	str	r0, [r7, #4]
 80113fe:	4608      	mov	r0, r1
 8011400:	4611      	mov	r1, r2
 8011402:	461a      	mov	r2, r3
 8011404:	4603      	mov	r3, r0
 8011406:	70fb      	strb	r3, [r7, #3]
 8011408:	460b      	mov	r3, r1
 801140a:	70bb      	strb	r3, [r7, #2]
 801140c:	4613      	mov	r3, r2
 801140e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011410:	2300      	movs	r3, #0
 8011412:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011414:	2300      	movs	r3, #0
 8011416:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801141e:	787c      	ldrb	r4, [r7, #1]
 8011420:	78ba      	ldrb	r2, [r7, #2]
 8011422:	78f9      	ldrb	r1, [r7, #3]
 8011424:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011428:	9303      	str	r3, [sp, #12]
 801142a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801142c:	9302      	str	r3, [sp, #8]
 801142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011430:	9301      	str	r3, [sp, #4]
 8011432:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011436:	9300      	str	r3, [sp, #0]
 8011438:	4623      	mov	r3, r4
 801143a:	f7f3 f951 	bl	80046e0 <HAL_HCD_HC_SubmitRequest>
 801143e:	4603      	mov	r3, r0
 8011440:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8011442:	7bfb      	ldrb	r3, [r7, #15]
 8011444:	4618      	mov	r0, r3
 8011446:	f000 f8a3 	bl	8011590 <USBH_Get_USB_Status>
 801144a:	4603      	mov	r3, r0
 801144c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801144e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011450:	4618      	mov	r0, r3
 8011452:	3714      	adds	r7, #20
 8011454:	46bd      	mov	sp, r7
 8011456:	bd90      	pop	{r4, r7, pc}

08011458 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011458:	b580      	push	{r7, lr}
 801145a:	b082      	sub	sp, #8
 801145c:	af00      	add	r7, sp, #0
 801145e:	6078      	str	r0, [r7, #4]
 8011460:	460b      	mov	r3, r1
 8011462:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801146a:	78fa      	ldrb	r2, [r7, #3]
 801146c:	4611      	mov	r1, r2
 801146e:	4618      	mov	r0, r3
 8011470:	f7f3 fbfa 	bl	8004c68 <HAL_HCD_HC_GetURBState>
 8011474:	4603      	mov	r3, r0
}
 8011476:	4618      	mov	r0, r3
 8011478:	3708      	adds	r7, #8
 801147a:	46bd      	mov	sp, r7
 801147c:	bd80      	pop	{r7, pc}

0801147e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801147e:	b580      	push	{r7, lr}
 8011480:	b082      	sub	sp, #8
 8011482:	af00      	add	r7, sp, #0
 8011484:	6078      	str	r0, [r7, #4]
 8011486:	460b      	mov	r3, r1
 8011488:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8011490:	2b01      	cmp	r3, #1
 8011492:	d103      	bne.n	801149c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8011494:	78fb      	ldrb	r3, [r7, #3]
 8011496:	4618      	mov	r0, r3
 8011498:	f000 f8a6 	bl	80115e8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 801149c:	20c8      	movs	r0, #200	; 0xc8
 801149e:	f7f0 feb5 	bl	800220c <HAL_Delay>
  return USBH_OK;
 80114a2:	2300      	movs	r3, #0
}
 80114a4:	4618      	mov	r0, r3
 80114a6:	3708      	adds	r7, #8
 80114a8:	46bd      	mov	sp, r7
 80114aa:	bd80      	pop	{r7, pc}

080114ac <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80114ac:	b480      	push	{r7}
 80114ae:	b085      	sub	sp, #20
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	6078      	str	r0, [r7, #4]
 80114b4:	460b      	mov	r3, r1
 80114b6:	70fb      	strb	r3, [r7, #3]
 80114b8:	4613      	mov	r3, r2
 80114ba:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80114c2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80114c4:	78fa      	ldrb	r2, [r7, #3]
 80114c6:	68f9      	ldr	r1, [r7, #12]
 80114c8:	4613      	mov	r3, r2
 80114ca:	009b      	lsls	r3, r3, #2
 80114cc:	4413      	add	r3, r2
 80114ce:	00db      	lsls	r3, r3, #3
 80114d0:	440b      	add	r3, r1
 80114d2:	333b      	adds	r3, #59	; 0x3b
 80114d4:	781b      	ldrb	r3, [r3, #0]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d00a      	beq.n	80114f0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80114da:	78fa      	ldrb	r2, [r7, #3]
 80114dc:	68f9      	ldr	r1, [r7, #12]
 80114de:	4613      	mov	r3, r2
 80114e0:	009b      	lsls	r3, r3, #2
 80114e2:	4413      	add	r3, r2
 80114e4:	00db      	lsls	r3, r3, #3
 80114e6:	440b      	add	r3, r1
 80114e8:	3350      	adds	r3, #80	; 0x50
 80114ea:	78ba      	ldrb	r2, [r7, #2]
 80114ec:	701a      	strb	r2, [r3, #0]
 80114ee:	e009      	b.n	8011504 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80114f0:	78fa      	ldrb	r2, [r7, #3]
 80114f2:	68f9      	ldr	r1, [r7, #12]
 80114f4:	4613      	mov	r3, r2
 80114f6:	009b      	lsls	r3, r3, #2
 80114f8:	4413      	add	r3, r2
 80114fa:	00db      	lsls	r3, r3, #3
 80114fc:	440b      	add	r3, r1
 80114fe:	3351      	adds	r3, #81	; 0x51
 8011500:	78ba      	ldrb	r2, [r7, #2]
 8011502:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8011504:	2300      	movs	r3, #0
}
 8011506:	4618      	mov	r0, r3
 8011508:	3714      	adds	r7, #20
 801150a:	46bd      	mov	sp, r7
 801150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011510:	4770      	bx	lr

08011512 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011512:	b480      	push	{r7}
 8011514:	b085      	sub	sp, #20
 8011516:	af00      	add	r7, sp, #0
 8011518:	6078      	str	r0, [r7, #4]
 801151a:	460b      	mov	r3, r1
 801151c:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 801151e:	2300      	movs	r3, #0
 8011520:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011528:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 801152a:	78fa      	ldrb	r2, [r7, #3]
 801152c:	68b9      	ldr	r1, [r7, #8]
 801152e:	4613      	mov	r3, r2
 8011530:	009b      	lsls	r3, r3, #2
 8011532:	4413      	add	r3, r2
 8011534:	00db      	lsls	r3, r3, #3
 8011536:	440b      	add	r3, r1
 8011538:	333b      	adds	r3, #59	; 0x3b
 801153a:	781b      	ldrb	r3, [r3, #0]
 801153c:	2b00      	cmp	r3, #0
 801153e:	d00a      	beq.n	8011556 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8011540:	78fa      	ldrb	r2, [r7, #3]
 8011542:	68b9      	ldr	r1, [r7, #8]
 8011544:	4613      	mov	r3, r2
 8011546:	009b      	lsls	r3, r3, #2
 8011548:	4413      	add	r3, r2
 801154a:	00db      	lsls	r3, r3, #3
 801154c:	440b      	add	r3, r1
 801154e:	3350      	adds	r3, #80	; 0x50
 8011550:	781b      	ldrb	r3, [r3, #0]
 8011552:	73fb      	strb	r3, [r7, #15]
 8011554:	e009      	b.n	801156a <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8011556:	78fa      	ldrb	r2, [r7, #3]
 8011558:	68b9      	ldr	r1, [r7, #8]
 801155a:	4613      	mov	r3, r2
 801155c:	009b      	lsls	r3, r3, #2
 801155e:	4413      	add	r3, r2
 8011560:	00db      	lsls	r3, r3, #3
 8011562:	440b      	add	r3, r1
 8011564:	3351      	adds	r3, #81	; 0x51
 8011566:	781b      	ldrb	r3, [r3, #0]
 8011568:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 801156a:	7bfb      	ldrb	r3, [r7, #15]
}
 801156c:	4618      	mov	r0, r3
 801156e:	3714      	adds	r7, #20
 8011570:	46bd      	mov	sp, r7
 8011572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011576:	4770      	bx	lr

08011578 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8011578:	b580      	push	{r7, lr}
 801157a:	b082      	sub	sp, #8
 801157c:	af00      	add	r7, sp, #0
 801157e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8011580:	6878      	ldr	r0, [r7, #4]
 8011582:	f7f0 fe43 	bl	800220c <HAL_Delay>
}
 8011586:	bf00      	nop
 8011588:	3708      	adds	r7, #8
 801158a:	46bd      	mov	sp, r7
 801158c:	bd80      	pop	{r7, pc}
	...

08011590 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011590:	b480      	push	{r7}
 8011592:	b085      	sub	sp, #20
 8011594:	af00      	add	r7, sp, #0
 8011596:	4603      	mov	r3, r0
 8011598:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801159a:	2300      	movs	r3, #0
 801159c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801159e:	79fb      	ldrb	r3, [r7, #7]
 80115a0:	2b03      	cmp	r3, #3
 80115a2:	d817      	bhi.n	80115d4 <USBH_Get_USB_Status+0x44>
 80115a4:	a201      	add	r2, pc, #4	; (adr r2, 80115ac <USBH_Get_USB_Status+0x1c>)
 80115a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115aa:	bf00      	nop
 80115ac:	080115bd 	.word	0x080115bd
 80115b0:	080115c3 	.word	0x080115c3
 80115b4:	080115c9 	.word	0x080115c9
 80115b8:	080115cf 	.word	0x080115cf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80115bc:	2300      	movs	r3, #0
 80115be:	73fb      	strb	r3, [r7, #15]
    break;
 80115c0:	e00b      	b.n	80115da <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80115c2:	2302      	movs	r3, #2
 80115c4:	73fb      	strb	r3, [r7, #15]
    break;
 80115c6:	e008      	b.n	80115da <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80115c8:	2301      	movs	r3, #1
 80115ca:	73fb      	strb	r3, [r7, #15]
    break;
 80115cc:	e005      	b.n	80115da <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80115ce:	2302      	movs	r3, #2
 80115d0:	73fb      	strb	r3, [r7, #15]
    break;
 80115d2:	e002      	b.n	80115da <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80115d4:	2302      	movs	r3, #2
 80115d6:	73fb      	strb	r3, [r7, #15]
    break;
 80115d8:	bf00      	nop
  }
  return usb_status;
 80115da:	7bfb      	ldrb	r3, [r7, #15]
}
 80115dc:	4618      	mov	r0, r3
 80115de:	3714      	adds	r7, #20
 80115e0:	46bd      	mov	sp, r7
 80115e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e6:	4770      	bx	lr

080115e8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 80115e8:	b580      	push	{r7, lr}
 80115ea:	b084      	sub	sp, #16
 80115ec:	af00      	add	r7, sp, #0
 80115ee:	4603      	mov	r3, r0
 80115f0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 80115f2:	79fb      	ldrb	r3, [r7, #7]
 80115f4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80115f6:	79fb      	ldrb	r3, [r7, #7]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d102      	bne.n	8011602 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 80115fc:	2301      	movs	r3, #1
 80115fe:	73fb      	strb	r3, [r7, #15]
 8011600:	e001      	b.n	8011606 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8011602:	2300      	movs	r3, #0
 8011604:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,(GPIO_PinState)data);
 8011606:	7bfb      	ldrb	r3, [r7, #15]
 8011608:	461a      	mov	r2, r3
 801160a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801160e:	4803      	ldr	r0, [pc, #12]	; (801161c <MX_DriverVbusFS+0x34>)
 8011610:	f7f2 feca 	bl	80043a8 <HAL_GPIO_WritePin>
}
 8011614:	bf00      	nop
 8011616:	3710      	adds	r7, #16
 8011618:	46bd      	mov	sp, r7
 801161a:	bd80      	pop	{r7, pc}
 801161c:	40020000 	.word	0x40020000

08011620 <__errno>:
 8011620:	4b01      	ldr	r3, [pc, #4]	; (8011628 <__errno+0x8>)
 8011622:	6818      	ldr	r0, [r3, #0]
 8011624:	4770      	bx	lr
 8011626:	bf00      	nop
 8011628:	20000030 	.word	0x20000030

0801162c <__libc_init_array>:
 801162c:	b570      	push	{r4, r5, r6, lr}
 801162e:	4e0d      	ldr	r6, [pc, #52]	; (8011664 <__libc_init_array+0x38>)
 8011630:	4c0d      	ldr	r4, [pc, #52]	; (8011668 <__libc_init_array+0x3c>)
 8011632:	1ba4      	subs	r4, r4, r6
 8011634:	10a4      	asrs	r4, r4, #2
 8011636:	2500      	movs	r5, #0
 8011638:	42a5      	cmp	r5, r4
 801163a:	d109      	bne.n	8011650 <__libc_init_array+0x24>
 801163c:	4e0b      	ldr	r6, [pc, #44]	; (801166c <__libc_init_array+0x40>)
 801163e:	4c0c      	ldr	r4, [pc, #48]	; (8011670 <__libc_init_array+0x44>)
 8011640:	f000 f8f6 	bl	8011830 <_init>
 8011644:	1ba4      	subs	r4, r4, r6
 8011646:	10a4      	asrs	r4, r4, #2
 8011648:	2500      	movs	r5, #0
 801164a:	42a5      	cmp	r5, r4
 801164c:	d105      	bne.n	801165a <__libc_init_array+0x2e>
 801164e:	bd70      	pop	{r4, r5, r6, pc}
 8011650:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011654:	4798      	blx	r3
 8011656:	3501      	adds	r5, #1
 8011658:	e7ee      	b.n	8011638 <__libc_init_array+0xc>
 801165a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801165e:	4798      	blx	r3
 8011660:	3501      	adds	r5, #1
 8011662:	e7f2      	b.n	801164a <__libc_init_array+0x1e>
 8011664:	08011d54 	.word	0x08011d54
 8011668:	08011d54 	.word	0x08011d54
 801166c:	08011d54 	.word	0x08011d54
 8011670:	08011d58 	.word	0x08011d58

08011674 <malloc>:
 8011674:	4b02      	ldr	r3, [pc, #8]	; (8011680 <malloc+0xc>)
 8011676:	4601      	mov	r1, r0
 8011678:	6818      	ldr	r0, [r3, #0]
 801167a:	f000 b86d 	b.w	8011758 <_malloc_r>
 801167e:	bf00      	nop
 8011680:	20000030 	.word	0x20000030

08011684 <free>:
 8011684:	4b02      	ldr	r3, [pc, #8]	; (8011690 <free+0xc>)
 8011686:	4601      	mov	r1, r0
 8011688:	6818      	ldr	r0, [r3, #0]
 801168a:	f000 b817 	b.w	80116bc <_free_r>
 801168e:	bf00      	nop
 8011690:	20000030 	.word	0x20000030

08011694 <memcpy>:
 8011694:	b510      	push	{r4, lr}
 8011696:	1e43      	subs	r3, r0, #1
 8011698:	440a      	add	r2, r1
 801169a:	4291      	cmp	r1, r2
 801169c:	d100      	bne.n	80116a0 <memcpy+0xc>
 801169e:	bd10      	pop	{r4, pc}
 80116a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80116a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80116a8:	e7f7      	b.n	801169a <memcpy+0x6>

080116aa <memset>:
 80116aa:	4402      	add	r2, r0
 80116ac:	4603      	mov	r3, r0
 80116ae:	4293      	cmp	r3, r2
 80116b0:	d100      	bne.n	80116b4 <memset+0xa>
 80116b2:	4770      	bx	lr
 80116b4:	f803 1b01 	strb.w	r1, [r3], #1
 80116b8:	e7f9      	b.n	80116ae <memset+0x4>
	...

080116bc <_free_r>:
 80116bc:	b538      	push	{r3, r4, r5, lr}
 80116be:	4605      	mov	r5, r0
 80116c0:	2900      	cmp	r1, #0
 80116c2:	d045      	beq.n	8011750 <_free_r+0x94>
 80116c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80116c8:	1f0c      	subs	r4, r1, #4
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	bfb8      	it	lt
 80116ce:	18e4      	addlt	r4, r4, r3
 80116d0:	f000 f8ac 	bl	801182c <__malloc_lock>
 80116d4:	4a1f      	ldr	r2, [pc, #124]	; (8011754 <_free_r+0x98>)
 80116d6:	6813      	ldr	r3, [r2, #0]
 80116d8:	4610      	mov	r0, r2
 80116da:	b933      	cbnz	r3, 80116ea <_free_r+0x2e>
 80116dc:	6063      	str	r3, [r4, #4]
 80116de:	6014      	str	r4, [r2, #0]
 80116e0:	4628      	mov	r0, r5
 80116e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80116e6:	f000 b8a2 	b.w	801182e <__malloc_unlock>
 80116ea:	42a3      	cmp	r3, r4
 80116ec:	d90c      	bls.n	8011708 <_free_r+0x4c>
 80116ee:	6821      	ldr	r1, [r4, #0]
 80116f0:	1862      	adds	r2, r4, r1
 80116f2:	4293      	cmp	r3, r2
 80116f4:	bf04      	itt	eq
 80116f6:	681a      	ldreq	r2, [r3, #0]
 80116f8:	685b      	ldreq	r3, [r3, #4]
 80116fa:	6063      	str	r3, [r4, #4]
 80116fc:	bf04      	itt	eq
 80116fe:	1852      	addeq	r2, r2, r1
 8011700:	6022      	streq	r2, [r4, #0]
 8011702:	6004      	str	r4, [r0, #0]
 8011704:	e7ec      	b.n	80116e0 <_free_r+0x24>
 8011706:	4613      	mov	r3, r2
 8011708:	685a      	ldr	r2, [r3, #4]
 801170a:	b10a      	cbz	r2, 8011710 <_free_r+0x54>
 801170c:	42a2      	cmp	r2, r4
 801170e:	d9fa      	bls.n	8011706 <_free_r+0x4a>
 8011710:	6819      	ldr	r1, [r3, #0]
 8011712:	1858      	adds	r0, r3, r1
 8011714:	42a0      	cmp	r0, r4
 8011716:	d10b      	bne.n	8011730 <_free_r+0x74>
 8011718:	6820      	ldr	r0, [r4, #0]
 801171a:	4401      	add	r1, r0
 801171c:	1858      	adds	r0, r3, r1
 801171e:	4282      	cmp	r2, r0
 8011720:	6019      	str	r1, [r3, #0]
 8011722:	d1dd      	bne.n	80116e0 <_free_r+0x24>
 8011724:	6810      	ldr	r0, [r2, #0]
 8011726:	6852      	ldr	r2, [r2, #4]
 8011728:	605a      	str	r2, [r3, #4]
 801172a:	4401      	add	r1, r0
 801172c:	6019      	str	r1, [r3, #0]
 801172e:	e7d7      	b.n	80116e0 <_free_r+0x24>
 8011730:	d902      	bls.n	8011738 <_free_r+0x7c>
 8011732:	230c      	movs	r3, #12
 8011734:	602b      	str	r3, [r5, #0]
 8011736:	e7d3      	b.n	80116e0 <_free_r+0x24>
 8011738:	6820      	ldr	r0, [r4, #0]
 801173a:	1821      	adds	r1, r4, r0
 801173c:	428a      	cmp	r2, r1
 801173e:	bf04      	itt	eq
 8011740:	6811      	ldreq	r1, [r2, #0]
 8011742:	6852      	ldreq	r2, [r2, #4]
 8011744:	6062      	str	r2, [r4, #4]
 8011746:	bf04      	itt	eq
 8011748:	1809      	addeq	r1, r1, r0
 801174a:	6021      	streq	r1, [r4, #0]
 801174c:	605c      	str	r4, [r3, #4]
 801174e:	e7c7      	b.n	80116e0 <_free_r+0x24>
 8011750:	bd38      	pop	{r3, r4, r5, pc}
 8011752:	bf00      	nop
 8011754:	20006a24 	.word	0x20006a24

08011758 <_malloc_r>:
 8011758:	b570      	push	{r4, r5, r6, lr}
 801175a:	1ccd      	adds	r5, r1, #3
 801175c:	f025 0503 	bic.w	r5, r5, #3
 8011760:	3508      	adds	r5, #8
 8011762:	2d0c      	cmp	r5, #12
 8011764:	bf38      	it	cc
 8011766:	250c      	movcc	r5, #12
 8011768:	2d00      	cmp	r5, #0
 801176a:	4606      	mov	r6, r0
 801176c:	db01      	blt.n	8011772 <_malloc_r+0x1a>
 801176e:	42a9      	cmp	r1, r5
 8011770:	d903      	bls.n	801177a <_malloc_r+0x22>
 8011772:	230c      	movs	r3, #12
 8011774:	6033      	str	r3, [r6, #0]
 8011776:	2000      	movs	r0, #0
 8011778:	bd70      	pop	{r4, r5, r6, pc}
 801177a:	f000 f857 	bl	801182c <__malloc_lock>
 801177e:	4a21      	ldr	r2, [pc, #132]	; (8011804 <_malloc_r+0xac>)
 8011780:	6814      	ldr	r4, [r2, #0]
 8011782:	4621      	mov	r1, r4
 8011784:	b991      	cbnz	r1, 80117ac <_malloc_r+0x54>
 8011786:	4c20      	ldr	r4, [pc, #128]	; (8011808 <_malloc_r+0xb0>)
 8011788:	6823      	ldr	r3, [r4, #0]
 801178a:	b91b      	cbnz	r3, 8011794 <_malloc_r+0x3c>
 801178c:	4630      	mov	r0, r6
 801178e:	f000 f83d 	bl	801180c <_sbrk_r>
 8011792:	6020      	str	r0, [r4, #0]
 8011794:	4629      	mov	r1, r5
 8011796:	4630      	mov	r0, r6
 8011798:	f000 f838 	bl	801180c <_sbrk_r>
 801179c:	1c43      	adds	r3, r0, #1
 801179e:	d124      	bne.n	80117ea <_malloc_r+0x92>
 80117a0:	230c      	movs	r3, #12
 80117a2:	6033      	str	r3, [r6, #0]
 80117a4:	4630      	mov	r0, r6
 80117a6:	f000 f842 	bl	801182e <__malloc_unlock>
 80117aa:	e7e4      	b.n	8011776 <_malloc_r+0x1e>
 80117ac:	680b      	ldr	r3, [r1, #0]
 80117ae:	1b5b      	subs	r3, r3, r5
 80117b0:	d418      	bmi.n	80117e4 <_malloc_r+0x8c>
 80117b2:	2b0b      	cmp	r3, #11
 80117b4:	d90f      	bls.n	80117d6 <_malloc_r+0x7e>
 80117b6:	600b      	str	r3, [r1, #0]
 80117b8:	50cd      	str	r5, [r1, r3]
 80117ba:	18cc      	adds	r4, r1, r3
 80117bc:	4630      	mov	r0, r6
 80117be:	f000 f836 	bl	801182e <__malloc_unlock>
 80117c2:	f104 000b 	add.w	r0, r4, #11
 80117c6:	1d23      	adds	r3, r4, #4
 80117c8:	f020 0007 	bic.w	r0, r0, #7
 80117cc:	1ac3      	subs	r3, r0, r3
 80117ce:	d0d3      	beq.n	8011778 <_malloc_r+0x20>
 80117d0:	425a      	negs	r2, r3
 80117d2:	50e2      	str	r2, [r4, r3]
 80117d4:	e7d0      	b.n	8011778 <_malloc_r+0x20>
 80117d6:	428c      	cmp	r4, r1
 80117d8:	684b      	ldr	r3, [r1, #4]
 80117da:	bf16      	itet	ne
 80117dc:	6063      	strne	r3, [r4, #4]
 80117de:	6013      	streq	r3, [r2, #0]
 80117e0:	460c      	movne	r4, r1
 80117e2:	e7eb      	b.n	80117bc <_malloc_r+0x64>
 80117e4:	460c      	mov	r4, r1
 80117e6:	6849      	ldr	r1, [r1, #4]
 80117e8:	e7cc      	b.n	8011784 <_malloc_r+0x2c>
 80117ea:	1cc4      	adds	r4, r0, #3
 80117ec:	f024 0403 	bic.w	r4, r4, #3
 80117f0:	42a0      	cmp	r0, r4
 80117f2:	d005      	beq.n	8011800 <_malloc_r+0xa8>
 80117f4:	1a21      	subs	r1, r4, r0
 80117f6:	4630      	mov	r0, r6
 80117f8:	f000 f808 	bl	801180c <_sbrk_r>
 80117fc:	3001      	adds	r0, #1
 80117fe:	d0cf      	beq.n	80117a0 <_malloc_r+0x48>
 8011800:	6025      	str	r5, [r4, #0]
 8011802:	e7db      	b.n	80117bc <_malloc_r+0x64>
 8011804:	20006a24 	.word	0x20006a24
 8011808:	20006a28 	.word	0x20006a28

0801180c <_sbrk_r>:
 801180c:	b538      	push	{r3, r4, r5, lr}
 801180e:	4c06      	ldr	r4, [pc, #24]	; (8011828 <_sbrk_r+0x1c>)
 8011810:	2300      	movs	r3, #0
 8011812:	4605      	mov	r5, r0
 8011814:	4608      	mov	r0, r1
 8011816:	6023      	str	r3, [r4, #0]
 8011818:	f7f0 fb3e 	bl	8001e98 <_sbrk>
 801181c:	1c43      	adds	r3, r0, #1
 801181e:	d102      	bne.n	8011826 <_sbrk_r+0x1a>
 8011820:	6823      	ldr	r3, [r4, #0]
 8011822:	b103      	cbz	r3, 8011826 <_sbrk_r+0x1a>
 8011824:	602b      	str	r3, [r5, #0]
 8011826:	bd38      	pop	{r3, r4, r5, pc}
 8011828:	20007860 	.word	0x20007860

0801182c <__malloc_lock>:
 801182c:	4770      	bx	lr

0801182e <__malloc_unlock>:
 801182e:	4770      	bx	lr

08011830 <_init>:
 8011830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011832:	bf00      	nop
 8011834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011836:	bc08      	pop	{r3}
 8011838:	469e      	mov	lr, r3
 801183a:	4770      	bx	lr

0801183c <_fini>:
 801183c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801183e:	bf00      	nop
 8011840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011842:	bc08      	pop	{r3}
 8011844:	469e      	mov	lr, r3
 8011846:	4770      	bx	lr
